{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.rplib","path":"css/fonts/FontAwesome.rplib","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1581381349075},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1581381349029},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1581381349030},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1581381349075},{"_id":"themes/landscape/_config.yml","hash":"68f217e2c625f224fe4b667ad9ddcf96de1a6630","modified":1582381148814},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1581381349076},{"_id":"source/_posts/.DS_Store","hash":"a4f06e5d8dfcc3109c2ac0a4270e018a22f08a76","modified":1582383354145},{"_id":"source/_posts/2020-02-09-algorithm.md","hash":"b2e3ab56e883d9dec62011d7f1245fcda9514589","modified":1582509935578},{"_id":"source/_posts/2020-02-10-angular入门.md","hash":"d8451de691d0c61681603cac326e240c374e9684","modified":1581381349028},{"_id":"source/_posts/2020-02-16-container.md","hash":"37eea1ede80d7d07a1b106ef04fe45376860a36d","modified":1583192678593},{"_id":"source/_posts/2020-02-16-thread.md","hash":"3e44315e17a387a49f17ef3bc30d9f55d7b3ee15","modified":1583192693201},{"_id":"source/_posts/2020-02-22-ClassLoader.md","hash":"7e9c9a9397a644c193268c86b840c02c5e8a6faa","modified":1582447634978},{"_id":"source/_posts/2020-02-22-GC.md","hash":"9f6c039a0b000cf1f2436a305480029d972002ff","modified":1583219089266},{"_id":"source/_posts/2020-02-22-ThreadPool.md","hash":"a31399f2196f6394e93117c7db959f109d92c979","modified":1583192678589},{"_id":"source/_posts/2020-02-22-classfile.md","hash":"a600b023714da67fe0e5c47e142df01aa925194d","modified":1582448112435},{"_id":"source/_posts/2020-02-22-jmm.md","hash":"2b664d8515b042dc3d0faaf8bdfb954d0d47c1d1","modified":1582447115808},{"_id":"source/about/index.md","hash":"bd8ea69e8424fde8c12938cb43f0666e4a91be8c","modified":1582382609662},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1581381349072},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1581381349071},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1581381349071},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1581381349073},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1581381349073},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1581381349072},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1581381349075},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1581381349074},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1581381349072},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1581381349073},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"47fba466a16c98c560fa11a670cb5b98d15ea339","modified":1581381349074},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1581381349074},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1581381349032},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1581381349031},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1581381349031},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1581381349032},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1581381349039},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1581381349031},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1581381349032},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1581381349077},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"1af0903edbb40217a297a91446dbd13dba0f0227","modified":1581381349037},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1581381349036},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1581381349036},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"9d9ba1bced831bb1cf29c88d43a183b48443ae81","modified":1581865092781},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"1cf632121e70c8b431471d86cdac7d0ee65eca04","modified":1581381349038},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1581381349036},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1581381349036},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7d3fb80836302b3087028f6520ab3dd96c4fa493","modified":1581381349037},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"22bb34c03b5479978b23a63d07268a922ce09613","modified":1583628766992},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1581381349038},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1581381349039},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1581381349040},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1581381349040},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"d9391ff79fc8badb8e8f86a0e41352d702d0348c","modified":1583192443519},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1581381349041},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1581381349040},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1581381349069},{"_id":"themes/landscape/source/css/_variables.styl","hash":"9aef6838357c53a82af9eee598e9e659ac9b83eb","modified":1581381349051},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1581381349055},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1581381349045},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1581381349045},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1581381349045},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1581381349043},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1581381349042},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1581381349044},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1581381349043},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1581381349044},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1581381349042},{"_id":"themes/landscape/source/js/script.js","hash":"8da5c6ada9ca1749da2fbc92376f1f5da0a2065b","modified":1581381349070},{"_id":"source/_posts/2020-02-16-thread/status.jpg","hash":"36eb85300ff11f8ff116c78a8eb1faba3691beb6","modified":1581818551000},{"_id":"source/_posts/2020-02-22-GC/gc.png","hash":"a23b17c141aa5f0bb2d0d3701d47f2f234c1ec8f","modified":1582355289000},{"_id":"source/_posts/2020-02-22-classfile/jvm.jpeg","hash":"377ac6eb71acbe10abd8c13d9fd0f689b61658c6","modified":1582332228000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1581381349034},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1581381349035},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1581381349035},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1581381349034},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1581381349035},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1581381349034},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1581381349054},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1581381349055},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"5783bba2ef51f6e450bbff079272e9b0f9d5b2a2","modified":1583057699574},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"849b63f06f2e7613e5f651d2409b082f291fd0c5","modified":1581381349053},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"9986ee45f846b284bac4cd10651b10c213ff29b9","modified":1581381349054},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1581381349052},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1581381349054},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1581381349055},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1581381349052},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1581381349053},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1581381349049},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1581381349049},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1581381349060},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1581381349059},{"_id":"themes/landscape/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1581381349051},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1581381349046},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1581381349047},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1581381349048},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1581381349047},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1581381349046},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1581381349047},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1581381349059},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1581381349058},{"_id":"source/_posts/2020-02-22-ClassLoader/ClassLoader.png","hash":"47d1f44807b419485edbb7b9877107aced736e82","modified":1582384651000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1581381349057},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"badb974f41de85a3cfdfa139e4578bca5ded84f9","modified":1581381349050},{"_id":"source/_posts/2020-02-09-algorithm/algorithm.png","hash":"115aa3ad01e01c326d1fd46054a048efb7a5b50f","modified":1582454324000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.rplib","hash":"3b08522bbe36d619e9e9223f043cfd9fe82973d0","modified":1581381349066},{"_id":"public/content.json","hash":"c6bdf65498e9e829ca5e7c434eb9ffbaccebf511","modified":1583602482495},{"_id":"public/./public/search.xml","hash":"d669131353cb4cecc9c1bdb6fb253915814e38d8","modified":1583602482495},{"_id":"public/about/index.html","hash":"6fbf86a62792b2c8e878924735045bc0e4325650","modified":1583628769210},{"_id":"public/2020/02/22/ClassLoader/index.html","hash":"b439cc7cac039f36034cdbafd0755549b7683b93","modified":1583628769210},{"_id":"public/2020/02/10/angular入门/index.html","hash":"04767601b01f45a2bdad0f65fad3639a2e7efca1","modified":1583628769210},{"_id":"public/categories/技术笔记/index.html","hash":"bc72ed4543642a2f0f682d2bf6e7d3a15bf33572","modified":1583628769210},{"_id":"public/categories/前端/index.html","hash":"4bf6f7054e69075e961e4380eab56c8f4222ede8","modified":1583628769210},{"_id":"public/archives/index.html","hash":"1dbe8dccd805b386e4cad900356b6d865e05e493","modified":1583628769210},{"_id":"public/archives/2020/index.html","hash":"6a221650f9f9eca9ac546973c8d77cf8b8fbc4ce","modified":1583628769210},{"_id":"public/archives/2020/02/index.html","hash":"d2d25d0468c62a9fb4a0c5bd9717d4395975fd8a","modified":1583628769210},{"_id":"public/tags/算法/index.html","hash":"c2e2588aa7acb126ac78d73908c37287f7b5838d","modified":1583628769210},{"_id":"public/tags/Angular/index.html","hash":"e85e82f6055294fa75057cb09c1d445606cf377e","modified":1583628769210},{"_id":"public/tags/Thread/index.html","hash":"ea896e9a2f1e944727661b2612ebc6bbf6f632e8","modified":1583628769210},{"_id":"public/tags/容器/index.html","hash":"e6abd907db6d052db8bc7242c1ad62bdaa88e1ec","modified":1583628769210},{"_id":"public/tags/JVM/index.html","hash":"017e57ff0f7414470bd80810b339389b3c5543b5","modified":1583628769210},{"_id":"public/2020/02/09/algorithm/index.html","hash":"6e6ec7e9980b9e3d6a270c25d0afcc41006f4212","modified":1583628769210},{"_id":"public/2020/02/22/classfile/index.html","hash":"2344db70e8814d1389dedd4208e63f47039bbf87","modified":1583628769210},{"_id":"public/2020/02/22/GC/index.html","hash":"4b8eaad36a280a38448c444da85de6f46815a61c","modified":1583628769210},{"_id":"public/2020/02/22/jmm/index.html","hash":"ef0cb602ad484edf9fc50ca6991055e9e350b7bb","modified":1583628769210},{"_id":"public/2020/02/16/container/index.html","hash":"06da1bd036281aa3282f5f4d6f0118e5a1505a2a","modified":1583628769210},{"_id":"public/2020/02/16/thread/index.html","hash":"a2022ab031ab3c0dab9ab634150d5bb04a3da774","modified":1583628769210},{"_id":"public/2020/02/16/ThreadPool/index.html","hash":"4ac0c451ee432201d02de7aff812ec83061e2e2e","modified":1583628769210},{"_id":"public/index.html","hash":"c9ff3065f980e393e4d1c3534ea4ea45ee21d186","modified":1583628769210},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582509610863},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582509610863},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582509610863},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582509610863},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582509610863},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582509610863},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1582509610863},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1582509610863},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1582509610863},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582509610863},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1582509610863},{"_id":"public/2020/02/16/thread/status.jpg","hash":"36eb85300ff11f8ff116c78a8eb1faba3691beb6","modified":1582509610863},{"_id":"public/2020/02/22/GC/gc.png","hash":"a23b17c141aa5f0bb2d0d3701d47f2f234c1ec8f","modified":1582509610863},{"_id":"public/2020/02/22/classfile/jvm.jpeg","hash":"377ac6eb71acbe10abd8c13d9fd0f689b61658c6","modified":1582509610863},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1582509610863},{"_id":"public/js/script.js","hash":"8da5c6ada9ca1749da2fbc92376f1f5da0a2065b","modified":1582509610863},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582509610863},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582509610863},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1582509610863},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1582509610863},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1582509610863},{"_id":"public/css/style.css","hash":"d4ce629b96e7e556b3f9592b45f1094d046b998b","modified":1582509610863},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1582509610863},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1582509610863},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1582509610863},{"_id":"public/css/images/banner.jpg","hash":"badb974f41de85a3cfdfa139e4578bca5ded84f9","modified":1582509610863},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1582509610863},{"_id":"public/2020/02/22/ClassLoader/ClassLoader.png","hash":"47d1f44807b419485edbb7b9877107aced736e82","modified":1582509610863},{"_id":"public/2020/02/09/algorithm/algorithm.png","hash":"115aa3ad01e01c326d1fd46054a048efb7a5b50f","modified":1582509610863},{"_id":"public/css/fonts/FontAwesome.rplib","hash":"3b08522bbe36d619e9e9223f043cfd9fe82973d0","modified":1582509610863},{"_id":"public/2020/02/23/algorithm/index.html","hash":"5b7ed16feabce776d19ac27da15b874d673e8933","modified":1582509577887},{"_id":"source/_posts/2020-03-01-tcpip.md","hash":"2e5784af5ccad90522fbc398d7bc265c4427c8b9","modified":1583192634051},{"_id":"public/2020/03/01/tcpip/index.html","hash":"1bda5544d7558d6b161d657adc6aee122e806a30","modified":1583628769210},{"_id":"public/tags/高并发/index.html","hash":"c0c53db69ab5e772861ca3264893f345e1b67593","modified":1583628769210},{"_id":"public/archives/2020/03/index.html","hash":"79345b96798443300a9570b106a4066e882ffd32","modified":1583628769210},{"_id":"source/_posts/2020-03-01-lvs.md","hash":"a238322c7b5b9dc57eccdb20c35ee9854f4cc96d","modified":1583192757068},{"_id":"public/2020/03/01/lvs/index.html","hash":"2c2f88f910293d07331608f5fe0f79f5348db083","modified":1583628769210},{"_id":"public/archives/page/2/index.html","hash":"6c9881afcdee63e16613f437543923659bd817f2","modified":1583628769210},{"_id":"public/archives/2020/page/2/index.html","hash":"94d3c9a3648a33be2d42d83680b66284c0f6e7b8","modified":1583628769210},{"_id":"public/page/2/index.html","hash":"6f4ed3030d7b21fd74ce0df5fb34a09a88e0d152","modified":1583628769210},{"_id":"source/_posts/2020-03-02-loadbalance.md","hash":"b4c37b54403c0ae3a70c0b2f2c7e4abf9b14eb0e","modified":1583078915306},{"_id":"source/_posts/2020-03-02-loadbalance/四层负载均衡.png","hash":"a7ca40e5951853969cfd1bdd65b6e486b02da426","modified":1583078538000},{"_id":"public/2020/03/02/loadbalance/index.html","hash":"ca7f7acbb48b8fd59f2877fa5ede4a9d1c4077ae","modified":1583164302240},{"_id":"public/2020/03/02/loadbalance/四层负载均衡.png","hash":"a7ca40e5951853969cfd1bdd65b6e486b02da426","modified":1583078919218},{"_id":"source/_posts/2020-03-02-loadbalance/loadbalance.png","hash":"a7ca40e5951853969cfd1bdd65b6e486b02da426","modified":1583078538000},{"_id":"public/2020/03/02/loadbalance/loadbalance.png","hash":"a7ca40e5951853969cfd1bdd65b6e486b02da426","modified":1583079135667},{"_id":"public/categories/技术笔记/page/2/index.html","hash":"9c1ba6fd295e72724eb7dcf230e9bfee6e3db0e5","modified":1583628769210},{"_id":"public/tags/LVS/index.html","hash":"9f3b5a083185ef1ab12958e31121da73aad5f95a","modified":1583628769210},{"_id":"source/_posts/2020-03-02-keepalivedlvs.md","hash":"69bfe24b3bfcae63d2f5ea4e07878578c25c68e2","modified":1583171456459},{"_id":"public/tags/Keepalived/index.html","hash":"014ce9580aa1925f16819d023cac7b09cf1fbd3d","modified":1583628769210},{"_id":"public/2020/03/02/keepalivedlvs/index.html","hash":"bd6380ef796eee77a4435b19df36e15fcbc3204e","modified":1583192460522},{"_id":"source/_posts/2020-03-01-loadbalance.md","hash":"801dd55665d6453f4ea32bbc5e26e0a15dbd105c","modified":1583192610737},{"_id":"source/_posts/2020-03-01-keepalivedlvs.md","hash":"5c730446c99dd582229e65e84abced3caa0e0d30","modified":1583193049411},{"_id":"source/_posts/2020-03-01-loadbalance/loadbalance.png","hash":"a7ca40e5951853969cfd1bdd65b6e486b02da426","modified":1583078538000},{"_id":"public/2020/03/03/loadbalance/index.html","hash":"504dc1fe6fcf2c6b1e1452971a1a8870a9b7146a","modified":1583628769210},{"_id":"public/2020/03/03/keepalivedlvs/index.html","hash":"ae853ffc8fa9e832cf73c3ac435eb3157cf9c60d","modified":1583628769210},{"_id":"public/2020/03/03/loadbalance/loadbalance.png","hash":"a7ca40e5951853969cfd1bdd65b6e486b02da426","modified":1583192613345},{"_id":"source/_posts/2020-03-08-twemproxy.md","hash":"557eb935bbd3e85759c4826f62efc2f9917dd1ee","modified":1583602465024},{"_id":"public/2020/03/08/twemproxy/index.html","hash":"305c62daca047459ac22c7a503db94eda4cea385","modified":1583628769210},{"_id":"public/tags/Redis/index.html","hash":"9aae9cdf969ccb8265f683433cff682f9b34517f","modified":1583628769210}],"Category":[{"name":"技术笔记","_id":"ck6ztaqu700035xc964qohzdr"},{"name":"前端","_id":"ck6ztaquc00085xc90i9wb7nd"}],"Data":[],"Page":[{"title":"About me","date":"2020-02-10T13:29:44.000Z","_content":"## 个人介绍\n还没想好和大家说什么^_^\n\n\n联系方式\n---\nQQ : 591926730\nEmail : tanhuanghui@sina.com\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2020-02-10 21:29:44\n---\n## 个人介绍\n还没想好和大家说什么^_^\n\n\n联系方式\n---\nQQ : 591926730\nEmail : tanhuanghui@sina.com\n\n\n\n\n\n\n\n","updated":"2020-02-22T14:43:29.662Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck6ztaqu400015xc99a1h83kx","content":"<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><p>还没想好和大家说什么^_^</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>QQ : 591926730<br>Email : <a href=\"mailto:tanhuanghui@sina.com\">tanhuanghui@sina.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><p>还没想好和大家说什么^_^</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>QQ : 591926730<br>Email : <a href=\"mailto:tanhuanghui@sina.com\">tanhuanghui@sina.com</a></p>\n"}],"Post":[{"title":"algorithm","toc":true,"date":"2020-02-09T10:21:47.000Z","_content":"### 常见排序列表\n\n![常见排序列表](https://casparthh.github.io/2020/02/09/algorithm/algorithm.png)\n<!--more-->\n\n### 选择排序\n选择排序是给定位置去找数。选择排序是按顺序比较，找最大值或者最小值，每一轮比较都只需要换一次位置；  \n\n```\n/**\n * 由于每一次是前一个和后一个对比，所以循环的次数应该是 length - 1;\n * @param nums\n */\npublic static void selection(int[] nums) {\n    for (int i = 0; i < nums.length - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < nums.length; j++) {\n            minIndex = nums[minIndex] > nums[j] ? j : minIndex;\n        }\n        swap(nums, i, minIndex);\n    }\n}\n\n/**\n * 选择排序优化版，每次外层循环找出最小值和最大值，分别放到数组的前后，减少外层循环\n * @param nums\n */\npublic static void selection(int[] nums) {\n    for (int i = 0, len = nums.length; i < len; i++) {\n        int minIndex = i == 0 ? 0 : len;\n        int maxIndex = i == 0 ? len - 1 : 0;\n        for (int j = i; j < len; j++) {\n            minIndex = nums[minIndex] > nums[j] ? j : minIndex;\n            maxIndex = nums[maxIndex] > nums[j] ? maxIndex : j;\n        }\n        swap(nums, i, minIndex);\n        maxIndex = maxIndex == i ? minIndex : maxIndex;\n        swap(nums, maxIndex, len - 1);\n        len--;\n    }\n}\n```\n\n### 冒泡排序\n冒泡排序是通过数去找位置，比较相邻位置的两个数，每一轮比较后，位置不对都需要换位置\n```\n/**\n * 由于前后两位对比，所以外层循环的次数应该是 length - 1;\n * 内存循环次数是当前数组未排序长度 - 1\n *\n * @param nums\n */\npublic static void bubble(int[] nums) {\n    for (int i = 1; i < nums.length; i++) {\n        for (int j = 0; j < nums.length - i; j++) {\n            if (nums[j] > nums[j + 1]) {\n                swap(nums, j, j + 1);\n            }\n        }\n    }\n}\n```\n\n\n### 插入排序\n每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。\n```\n/**\n * 插入排序\n *\n * @param nums\n */\npublic static void insertion(int[] nums) {\n    for (int i = 1; i < nums.length; i++) {\n        for (int j = i; j > 0; j--) {\n            if (nums[j] < nums[j - 1]) {\n                swap(nums, j, j - 1);\n            } else {\n                //如果当前元素大于等于上一个元素了，跳出内循环。\n                break;\n            }\n        }\n    }\n}\n```\n\n\n### 归并排序\n归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案\"修补\"在一起，即分而治之)。  \n分解：将列表越分越小，直至分成一个元素。  \n终止条件：一个元素是有序的。    \n合并：将两个有序列表归并，列表越来越大。  \n\n```\npublic static void merge(int[] nums, int left, int right) {\n    if (right == left) {\n        return;\n    }\n    //分两半\n    int mid = (right - left) / 2 + left;\n    merge(nums, left, mid);\n    merge(nums, mid + 1, right);\n    merge(nums, left, mid + 1, right);\n}\n\npublic static void merge(int[] nums, int leftIndex, int rightIndex, int rightBound) {\n    int leftBound = rightIndex - 1;\n    int[] buffer = new int[rightBound - leftIndex + 1];\n\n    int l = leftIndex, r = rightIndex, bufferIndex = 0;\n\n    while (l <= leftBound && r <= rightBound) {\n        buffer[bufferIndex++] = nums[l] <= nums[r] ? nums[l++] : nums[r++];\n    }\n\n    while (l <= leftBound) {\n        buffer[bufferIndex++] = nums[l++];\n    }\n\n    while (r <= rightBound) {\n        buffer[bufferIndex++] = nums[r++];\n    }\n    for (int i = 0; i < buffer.length; i++) {\n        nums[leftIndex + i] = buffer[i];\n    }\n}\n```\n\n#### 快速排序\n速排序是常用的几种排序中空间时间最优秀的排序，可以适用各种数据结构。\n快排的方法是先给定一个数，然后将待排序的数据分别于这个数比较，从左到右的遍历下标，\n比这个数大的放在右边，比这个数小的放在左边，\n而后分别对左边和右边的数据做递归引用排序，最终就能得到有序的数据\n```\npublic static void quick(int[] nums, int left, int rightBound) {\n    int pivot = nums[(rightBound - left) / 2 + left];\n    int l = left;\n    int rb = rightBound;\n    while (l <= rb) {\n        while (nums[l] < pivot) {\n            l++;\n        }\n        while (nums[rb] > pivot) {\n            rb--;\n        }\n        if (l <= rb) {\n            swap(nums, l, rb);\n            l++;\n            rb--;\n        }\n    }\n    if (left < l) {\n        quick(nums, left, rb);\n    }\n    if (l < rightBound) {\n        quick(nums, l, rightBound);\n    }\n}\n```\n","source":"_posts/2020-02-09-algorithm.md","raw":"---\ntitle: algorithm\ntoc: true\ncategories:\n  - 技术笔记\ndate: 2020-02-09 18:21:47\ntags:\n  - 算法\n---\n### 常见排序列表\n\n![常见排序列表](https://casparthh.github.io/2020/02/09/algorithm/algorithm.png)\n<!--more-->\n\n### 选择排序\n选择排序是给定位置去找数。选择排序是按顺序比较，找最大值或者最小值，每一轮比较都只需要换一次位置；  \n\n```\n/**\n * 由于每一次是前一个和后一个对比，所以循环的次数应该是 length - 1;\n * @param nums\n */\npublic static void selection(int[] nums) {\n    for (int i = 0; i < nums.length - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < nums.length; j++) {\n            minIndex = nums[minIndex] > nums[j] ? j : minIndex;\n        }\n        swap(nums, i, minIndex);\n    }\n}\n\n/**\n * 选择排序优化版，每次外层循环找出最小值和最大值，分别放到数组的前后，减少外层循环\n * @param nums\n */\npublic static void selection(int[] nums) {\n    for (int i = 0, len = nums.length; i < len; i++) {\n        int minIndex = i == 0 ? 0 : len;\n        int maxIndex = i == 0 ? len - 1 : 0;\n        for (int j = i; j < len; j++) {\n            minIndex = nums[minIndex] > nums[j] ? j : minIndex;\n            maxIndex = nums[maxIndex] > nums[j] ? maxIndex : j;\n        }\n        swap(nums, i, minIndex);\n        maxIndex = maxIndex == i ? minIndex : maxIndex;\n        swap(nums, maxIndex, len - 1);\n        len--;\n    }\n}\n```\n\n### 冒泡排序\n冒泡排序是通过数去找位置，比较相邻位置的两个数，每一轮比较后，位置不对都需要换位置\n```\n/**\n * 由于前后两位对比，所以外层循环的次数应该是 length - 1;\n * 内存循环次数是当前数组未排序长度 - 1\n *\n * @param nums\n */\npublic static void bubble(int[] nums) {\n    for (int i = 1; i < nums.length; i++) {\n        for (int j = 0; j < nums.length - i; j++) {\n            if (nums[j] > nums[j + 1]) {\n                swap(nums, j, j + 1);\n            }\n        }\n    }\n}\n```\n\n\n### 插入排序\n每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。\n```\n/**\n * 插入排序\n *\n * @param nums\n */\npublic static void insertion(int[] nums) {\n    for (int i = 1; i < nums.length; i++) {\n        for (int j = i; j > 0; j--) {\n            if (nums[j] < nums[j - 1]) {\n                swap(nums, j, j - 1);\n            } else {\n                //如果当前元素大于等于上一个元素了，跳出内循环。\n                break;\n            }\n        }\n    }\n}\n```\n\n\n### 归并排序\n归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案\"修补\"在一起，即分而治之)。  \n分解：将列表越分越小，直至分成一个元素。  \n终止条件：一个元素是有序的。    \n合并：将两个有序列表归并，列表越来越大。  \n\n```\npublic static void merge(int[] nums, int left, int right) {\n    if (right == left) {\n        return;\n    }\n    //分两半\n    int mid = (right - left) / 2 + left;\n    merge(nums, left, mid);\n    merge(nums, mid + 1, right);\n    merge(nums, left, mid + 1, right);\n}\n\npublic static void merge(int[] nums, int leftIndex, int rightIndex, int rightBound) {\n    int leftBound = rightIndex - 1;\n    int[] buffer = new int[rightBound - leftIndex + 1];\n\n    int l = leftIndex, r = rightIndex, bufferIndex = 0;\n\n    while (l <= leftBound && r <= rightBound) {\n        buffer[bufferIndex++] = nums[l] <= nums[r] ? nums[l++] : nums[r++];\n    }\n\n    while (l <= leftBound) {\n        buffer[bufferIndex++] = nums[l++];\n    }\n\n    while (r <= rightBound) {\n        buffer[bufferIndex++] = nums[r++];\n    }\n    for (int i = 0; i < buffer.length; i++) {\n        nums[leftIndex + i] = buffer[i];\n    }\n}\n```\n\n#### 快速排序\n速排序是常用的几种排序中空间时间最优秀的排序，可以适用各种数据结构。\n快排的方法是先给定一个数，然后将待排序的数据分别于这个数比较，从左到右的遍历下标，\n比这个数大的放在右边，比这个数小的放在左边，\n而后分别对左边和右边的数据做递归引用排序，最终就能得到有序的数据\n```\npublic static void quick(int[] nums, int left, int rightBound) {\n    int pivot = nums[(rightBound - left) / 2 + left];\n    int l = left;\n    int rb = rightBound;\n    while (l <= rb) {\n        while (nums[l] < pivot) {\n            l++;\n        }\n        while (nums[rb] > pivot) {\n            rb--;\n        }\n        if (l <= rb) {\n            swap(nums, l, rb);\n            l++;\n            rb--;\n        }\n    }\n    if (left < l) {\n        quick(nums, left, rb);\n    }\n    if (l < rightBound) {\n        quick(nums, l, rightBound);\n    }\n}\n```\n","slug":"algorithm","published":1,"updated":"2020-02-24T02:05:35.578Z","_id":"ck6ztaqtz00005xc99l27h4v3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"常见排序列表\"><a href=\"#常见排序列表\" class=\"headerlink\" title=\"常见排序列表\"></a>常见排序列表</h3><p><img src=\"https://casparthh.github.io/2020/02/09/algorithm/algorithm.png\" alt=\"常见排序列表\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p>选择排序是给定位置去找数。选择排序是按顺序比较，找最大值或者最小值，每一轮比较都只需要换一次位置；  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 由于每一次是前一个和后一个对比，所以循环的次数应该是 length - 1;</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void selection(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; nums.length - 1; i++) &#123;</span><br><span class=\"line\">        int minIndex &#x3D; i;</span><br><span class=\"line\">        for (int j &#x3D; i + 1; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            minIndex &#x3D; nums[minIndex] &gt; nums[j] ? j : minIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums, i, minIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 选择排序优化版，每次外层循环找出最小值和最大值，分别放到数组的前后，减少外层循环</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void selection(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0, len &#x3D; nums.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        int minIndex &#x3D; i &#x3D;&#x3D; 0 ? 0 : len;</span><br><span class=\"line\">        int maxIndex &#x3D; i &#x3D;&#x3D; 0 ? len - 1 : 0;</span><br><span class=\"line\">        for (int j &#x3D; i; j &lt; len; j++) &#123;</span><br><span class=\"line\">            minIndex &#x3D; nums[minIndex] &gt; nums[j] ? j : minIndex;</span><br><span class=\"line\">            maxIndex &#x3D; nums[maxIndex] &gt; nums[j] ? maxIndex : j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums, i, minIndex);</span><br><span class=\"line\">        maxIndex &#x3D; maxIndex &#x3D;&#x3D; i ? minIndex : maxIndex;</span><br><span class=\"line\">        swap(nums, maxIndex, len - 1);</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>冒泡排序是通过数去找位置，比较相邻位置的两个数，每一轮比较后，位置不对都需要换位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 由于前后两位对比，所以外层循环的次数应该是 length - 1;</span><br><span class=\"line\"> * 内存循环次数是当前数组未排序长度 - 1</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void bubble(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 1; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        for (int j &#x3D; 0; j &lt; nums.length - i; j++) &#123;</span><br><span class=\"line\">            if (nums[j] &gt; nums[j + 1]) &#123;</span><br><span class=\"line\">                swap(nums, j, j + 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 插入排序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void insertion(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 1; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        for (int j &#x3D; i; j &gt; 0; j--) &#123;</span><br><span class=\"line\">            if (nums[j] &lt; nums[j - 1]) &#123;</span><br><span class=\"line\">                swap(nums, j, j - 1);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;如果当前元素大于等于上一个元素了，跳出内循环。</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。<br>分解：将列表越分越小，直至分成一个元素。<br>终止条件：一个元素是有序的。<br>合并：将两个有序列表归并，列表越来越大。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void merge(int[] nums, int left, int right) &#123;</span><br><span class=\"line\">    if (right &#x3D;&#x3D; left) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;分两半</span><br><span class=\"line\">    int mid &#x3D; (right - left) &#x2F; 2 + left;</span><br><span class=\"line\">    merge(nums, left, mid);</span><br><span class=\"line\">    merge(nums, mid + 1, right);</span><br><span class=\"line\">    merge(nums, left, mid + 1, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void merge(int[] nums, int leftIndex, int rightIndex, int rightBound) &#123;</span><br><span class=\"line\">    int leftBound &#x3D; rightIndex - 1;</span><br><span class=\"line\">    int[] buffer &#x3D; new int[rightBound - leftIndex + 1];</span><br><span class=\"line\"></span><br><span class=\"line\">    int l &#x3D; leftIndex, r &#x3D; rightIndex, bufferIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (l &lt;&#x3D; leftBound &amp;&amp; r &lt;&#x3D; rightBound) &#123;</span><br><span class=\"line\">        buffer[bufferIndex++] &#x3D; nums[l] &lt;&#x3D; nums[r] ? nums[l++] : nums[r++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (l &lt;&#x3D; leftBound) &#123;</span><br><span class=\"line\">        buffer[bufferIndex++] &#x3D; nums[l++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (r &lt;&#x3D; rightBound) &#123;</span><br><span class=\"line\">        buffer[bufferIndex++] &#x3D; nums[r++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">        nums[leftIndex + i] &#x3D; buffer[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>速排序是常用的几种排序中空间时间最优秀的排序，可以适用各种数据结构。<br>快排的方法是先给定一个数，然后将待排序的数据分别于这个数比较，从左到右的遍历下标，<br>比这个数大的放在右边，比这个数小的放在左边，<br>而后分别对左边和右边的数据做递归引用排序，最终就能得到有序的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void quick(int[] nums, int left, int rightBound) &#123;</span><br><span class=\"line\">    int pivot &#x3D; nums[(rightBound - left) &#x2F; 2 + left];</span><br><span class=\"line\">    int l &#x3D; left;</span><br><span class=\"line\">    int rb &#x3D; rightBound;</span><br><span class=\"line\">    while (l &lt;&#x3D; rb) &#123;</span><br><span class=\"line\">        while (nums[l] &lt; pivot) &#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (nums[rb] &gt; pivot) &#123;</span><br><span class=\"line\">            rb--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (l &lt;&#x3D; rb) &#123;</span><br><span class=\"line\">            swap(nums, l, rb);</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">            rb--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (left &lt; l) &#123;</span><br><span class=\"line\">        quick(nums, left, rb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (l &lt; rightBound) &#123;</span><br><span class=\"line\">        quick(nums, l, rightBound);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"常见排序列表\"><a href=\"#常见排序列表\" class=\"headerlink\" title=\"常见排序列表\"></a>常见排序列表</h3><p><img src=\"https://casparthh.github.io/2020/02/09/algorithm/algorithm.png\" alt=\"常见排序列表\"></p>","more":"<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p>选择排序是给定位置去找数。选择排序是按顺序比较，找最大值或者最小值，每一轮比较都只需要换一次位置；  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 由于每一次是前一个和后一个对比，所以循环的次数应该是 length - 1;</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void selection(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; nums.length - 1; i++) &#123;</span><br><span class=\"line\">        int minIndex &#x3D; i;</span><br><span class=\"line\">        for (int j &#x3D; i + 1; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            minIndex &#x3D; nums[minIndex] &gt; nums[j] ? j : minIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums, i, minIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 选择排序优化版，每次外层循环找出最小值和最大值，分别放到数组的前后，减少外层循环</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void selection(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0, len &#x3D; nums.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        int minIndex &#x3D; i &#x3D;&#x3D; 0 ? 0 : len;</span><br><span class=\"line\">        int maxIndex &#x3D; i &#x3D;&#x3D; 0 ? len - 1 : 0;</span><br><span class=\"line\">        for (int j &#x3D; i; j &lt; len; j++) &#123;</span><br><span class=\"line\">            minIndex &#x3D; nums[minIndex] &gt; nums[j] ? j : minIndex;</span><br><span class=\"line\">            maxIndex &#x3D; nums[maxIndex] &gt; nums[j] ? maxIndex : j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(nums, i, minIndex);</span><br><span class=\"line\">        maxIndex &#x3D; maxIndex &#x3D;&#x3D; i ? minIndex : maxIndex;</span><br><span class=\"line\">        swap(nums, maxIndex, len - 1);</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>冒泡排序是通过数去找位置，比较相邻位置的两个数，每一轮比较后，位置不对都需要换位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 由于前后两位对比，所以外层循环的次数应该是 length - 1;</span><br><span class=\"line\"> * 内存循环次数是当前数组未排序长度 - 1</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void bubble(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 1; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        for (int j &#x3D; 0; j &lt; nums.length - i; j++) &#123;</span><br><span class=\"line\">            if (nums[j] &gt; nums[j + 1]) &#123;</span><br><span class=\"line\">                swap(nums, j, j + 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 插入排序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param nums</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static void insertion(int[] nums) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 1; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        for (int j &#x3D; i; j &gt; 0; j--) &#123;</span><br><span class=\"line\">            if (nums[j] &lt; nums[j - 1]) &#123;</span><br><span class=\"line\">                swap(nums, j, j - 1);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;如果当前元素大于等于上一个元素了，跳出内循环。</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。<br>分解：将列表越分越小，直至分成一个元素。<br>终止条件：一个元素是有序的。<br>合并：将两个有序列表归并，列表越来越大。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void merge(int[] nums, int left, int right) &#123;</span><br><span class=\"line\">    if (right &#x3D;&#x3D; left) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;分两半</span><br><span class=\"line\">    int mid &#x3D; (right - left) &#x2F; 2 + left;</span><br><span class=\"line\">    merge(nums, left, mid);</span><br><span class=\"line\">    merge(nums, mid + 1, right);</span><br><span class=\"line\">    merge(nums, left, mid + 1, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void merge(int[] nums, int leftIndex, int rightIndex, int rightBound) &#123;</span><br><span class=\"line\">    int leftBound &#x3D; rightIndex - 1;</span><br><span class=\"line\">    int[] buffer &#x3D; new int[rightBound - leftIndex + 1];</span><br><span class=\"line\"></span><br><span class=\"line\">    int l &#x3D; leftIndex, r &#x3D; rightIndex, bufferIndex &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (l &lt;&#x3D; leftBound &amp;&amp; r &lt;&#x3D; rightBound) &#123;</span><br><span class=\"line\">        buffer[bufferIndex++] &#x3D; nums[l] &lt;&#x3D; nums[r] ? nums[l++] : nums[r++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (l &lt;&#x3D; leftBound) &#123;</span><br><span class=\"line\">        buffer[bufferIndex++] &#x3D; nums[l++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (r &lt;&#x3D; rightBound) &#123;</span><br><span class=\"line\">        buffer[bufferIndex++] &#x3D; nums[r++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; buffer.length; i++) &#123;</span><br><span class=\"line\">        nums[leftIndex + i] &#x3D; buffer[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p>速排序是常用的几种排序中空间时间最优秀的排序，可以适用各种数据结构。<br>快排的方法是先给定一个数，然后将待排序的数据分别于这个数比较，从左到右的遍历下标，<br>比这个数大的放在右边，比这个数小的放在左边，<br>而后分别对左边和右边的数据做递归引用排序，最终就能得到有序的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void quick(int[] nums, int left, int rightBound) &#123;</span><br><span class=\"line\">    int pivot &#x3D; nums[(rightBound - left) &#x2F; 2 + left];</span><br><span class=\"line\">    int l &#x3D; left;</span><br><span class=\"line\">    int rb &#x3D; rightBound;</span><br><span class=\"line\">    while (l &lt;&#x3D; rb) &#123;</span><br><span class=\"line\">        while (nums[l] &lt; pivot) &#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (nums[rb] &gt; pivot) &#123;</span><br><span class=\"line\">            rb--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (l &lt;&#x3D; rb) &#123;</span><br><span class=\"line\">            swap(nums, l, rb);</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">            rb--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (left &lt; l) &#123;</span><br><span class=\"line\">        quick(nums, left, rb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (l &lt; rightBound) &#123;</span><br><span class=\"line\">        quick(nums, l, rightBound);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Angular入门","date":"2020-02-10T14:09:42.000Z","_content":"# Angular 环境搭建\n1、安装前准备工作：\n\t1.1、安装nodejs\n\t\t安装nodejs的计算机上面必须安装nodejs, 建议安装最新稳定版本\n\t\t$ node -v\n\t1.2、安装cnpm\n\t\tnpm可能安装包会失败，建议先用npm安装一下cnpm用淘宝镜像安装\n\t\t$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n2、使用 npm/cnpm 命令安装 angular/cli (只需要安装一次)\n\t$ npm install -g @angular/cli\t或者\tcnpm install -g @angular/cli\n<!--more-->\nAngular 创建项目\n1、打开命令行工具找到你要创建项目的目录\n2、创建项目\n\tng new 项目名称\n\t直接安装:\n\t$ ng new angulardemo\n\t如果要跳过npm i 安装:\n\t$ ng new angulardemo --skip-install\n\t再手动用cnpm install 代替npm i安装\n\t$ cd angulardemo \n\t$ cnpm install\n3、运行项目\n\t$ ng serve --open\n\t访问：http://localhost:4200 \n\n\n\n","source":"_posts/2020-02-10-angular入门.md","raw":"---\ntitle: Angular入门\ndate: 2020-02-10 22:09:42\ncategories:\n- 前端\ntags:\n- Angular\n---\n# Angular 环境搭建\n1、安装前准备工作：\n\t1.1、安装nodejs\n\t\t安装nodejs的计算机上面必须安装nodejs, 建议安装最新稳定版本\n\t\t$ node -v\n\t1.2、安装cnpm\n\t\tnpm可能安装包会失败，建议先用npm安装一下cnpm用淘宝镜像安装\n\t\t$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n2、使用 npm/cnpm 命令安装 angular/cli (只需要安装一次)\n\t$ npm install -g @angular/cli\t或者\tcnpm install -g @angular/cli\n<!--more-->\nAngular 创建项目\n1、打开命令行工具找到你要创建项目的目录\n2、创建项目\n\tng new 项目名称\n\t直接安装:\n\t$ ng new angulardemo\n\t如果要跳过npm i 安装:\n\t$ ng new angulardemo --skip-install\n\t再手动用cnpm install 代替npm i安装\n\t$ cd angulardemo \n\t$ cnpm install\n3、运行项目\n\t$ ng serve --open\n\t访问：http://localhost:4200 \n\n\n\n","slug":"angular入门","published":1,"updated":"2020-02-11T00:35:49.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6ztaqu500025xc9398rduoe","content":"<h1 id=\"Angular-环境搭建\"><a href=\"#Angular-环境搭建\" class=\"headerlink\" title=\"Angular 环境搭建\"></a>Angular 环境搭建</h1><p>1、安装前准备工作：<br>    1.1、安装nodejs<br>        安装nodejs的计算机上面必须安装nodejs, 建议安装最新稳定版本<br>        $ node -v<br>    1.2、安装cnpm<br>        npm可能安装包会失败，建议先用npm安装一下cnpm用淘宝镜像安装<br>        $ npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n<p>2、使用 npm/cnpm 命令安装 angular/cli (只需要安装一次)<br>    $ npm install -g @angular/cli    或者    cnpm install -g @angular/cli</p>\n<a id=\"more\"></a>\n<p>Angular 创建项目<br>1、打开命令行工具找到你要创建项目的目录<br>2、创建项目<br>    ng new 项目名称<br>    直接安装:<br>    $ ng new angulardemo<br>    如果要跳过npm i 安装:<br>    $ ng new angulardemo –skip-install<br>    再手动用cnpm install 代替npm i安装<br>    $ cd angulardemo<br>    $ cnpm install<br>3、运行项目<br>    $ ng serve –open<br>    访问：<a href=\"http://localhost:4200\" target=\"_blank\" rel=\"noopener\">http://localhost:4200</a> </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Angular-环境搭建\"><a href=\"#Angular-环境搭建\" class=\"headerlink\" title=\"Angular 环境搭建\"></a>Angular 环境搭建</h1><p>1、安装前准备工作：<br>    1.1、安装nodejs<br>        安装nodejs的计算机上面必须安装nodejs, 建议安装最新稳定版本<br>        $ node -v<br>    1.2、安装cnpm<br>        npm可能安装包会失败，建议先用npm安装一下cnpm用淘宝镜像安装<br>        $ npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n<p>2、使用 npm/cnpm 命令安装 angular/cli (只需要安装一次)<br>    $ npm install -g @angular/cli    或者    cnpm install -g @angular/cli</p>","more":"<p>Angular 创建项目<br>1、打开命令行工具找到你要创建项目的目录<br>2、创建项目<br>    ng new 项目名称<br>    直接安装:<br>    $ ng new angulardemo<br>    如果要跳过npm i 安装:<br>    $ ng new angulardemo –skip-install<br>    再手动用cnpm install 代替npm i安装<br>    $ cd angulardemo<br>    $ cnpm install<br>3、运行项目<br>    $ ng serve –open<br>    访问：<a href=\"http://localhost:4200\" target=\"_blank\" rel=\"noopener\">http://localhost:4200</a> </p>"},{"title":"多线程 - Java容器","date":"2020-02-16T14:05:29.000Z","toc":true,"_content":"### Java 容器\n容器 分两大类Collection、Map，Collection又分三大类List、Set、Queue队列\n\n#### Set \nSet 与 List, Queue 的主要区别是不会有重复元素\n\n#### ArrayList & LinkedList\n* 没有加锁，线程不安全。  \n* ArrayList是基于数组实现的，LinkedList是基于双链表实现的。\n* LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向对列。\n* 因为Array是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的，可以直接返回数组中index位置的元素，因此在随机访问集合元素上有较好的性能。Array获取数据的时间复杂度是O(1),但是要插入、删除数据却是开销很大的，因为这需要移动数组中插入位置之后的的所有元素。\n* 相对于ArrayList，LinkedList的随机访问集合元素时性能较差，因为需要在双向列表中找到要index的位置，再返回；但在插入，删除操作是更快的。\n<!--more-->\n\n#### Queue\n* **Queue 实现的实际上是一个队列，有进有出，它实现了很多对线程友好的API offer、peek、poll，他的一个子类型叫 BlockingQueue对线程友好的API又添加了put和take，这两个实现了阻塞操作，这个是在其他的List、 Set里面都是没有的。这里面最重要的就是是叫做阻塞队列，它的实现的初衷就是为了线程池、高并发做准备的。**\n* Queue里面还有一个子接口叫Deque叫双端队列，一般的队列只是从一端往里扔从另一端往外取。 Deque就是说你可以从反方向装从另外一个方向取。\n\n| Queue Method | Equivalent Deque Method | 说明 |\n| --- | --- | --- |\n| add(e) | addLast(e) | 向队尾插入元素，失败则抛出异常 |\n| offer(e) | offerLast(e) | 向队尾插入元素，失败则返回false |\n| remove(e) | removeFirst(e) | 获取并删除首元素，失败则抛出异常 |\n| poll(e) | pollFirst(e) | 获取并删除首元素，失败则返回null |\n| element(e) | getFirst(e) | 获取但不删除首元素，失败则抛出异常 |\n| peek(e) | peekFirst(e) | 获取但不删除首元素，失败则返回null |\n\n#### Vector & HashTable\n最开始java1.0容器里只有两个，第一个叫Vector可以单独的往里扔，还有一个是Hashtable是可以一对一对往里扔的。Vector相对于实现了List接口，Hashtable实现了Map接口，Vector 和 Hashtable 自带锁所以性能低。\n\n#### HashMap\nHashMap没有锁，线程不安全,他虽然速度比较快，但是多线程时数据会出问题。\n\n##### Collections.synchronizedHashMap\nMap<String,String> map = Collections.synchronizedMap(new HashMap<String,String>());  \n用的是SynchronizedMap这个方法，给HashMap我们手动加锁，它的源码自己做了一个Object，然后每次都是SynchronizedObject，严格来讲他和那个Hashtable效率上区别不大。\n\n#### ConcurrentMap 接口\n##### ConcurrentHashMap & ConcurrentSkipListMap\nConcurrentHashMap是多线程里面真正用的，提高效率主要提高在读上面，由于它往里插的时候内部又做了各种各样的判断，本来是链表的，到8之后又变成了红黑树，然后里面又做了各种各样的 CAS 的判断，所以他往里插的速度是要更低一些的。  \nConcurrentSkipListMap 通过**跳表**来实现的高并发容器并且这个Map是有排序的;  \n这两个的区别一个是有序的一个是无序的，同时都支持并发的操作\n  \n#### CopyOnWrite \n###### CopyOnWriteArrayList & CopyOnWriteArraySet & CopyOnWriteMap\n写时复制，当Write的时候我们要进行复制。这个原码非常简单，当我们需要往里面加元素的时候，把里面的元素得复制出来，再添加一个位置存放新元素。 而且在写的时个有加锁，但在读的时候没有锁。在写的时候特别少，读的时候很多的情况下，在这个时候就可以考虑CopyOnWrite这种方式来提高效率。\n```\n//CopyOnWriteMap.put方法\npublic V put(K key, V value) {\n    synchronized(this) {\n        Map<K, V> newMap = new HashMap(this.internalMap);\n        V val = newMap.put(key, value);\n        this.internalMap = newMap;\n        return val;\n    }\n}\n\n//CopyOnWriteArrayList.add\npublic boolean add(E e) {\n    synchronized (lock) {\n        Object[] es = getArray();\n        int len = es.length;\n        es = Arrays.copyOf(es, len + 1);\n        es[len] = e;\n        setArray(es);\n        return true;\n    }\n}\n\n//CopyOnWriteArraySet 中实际是由CopyOnWriteArrayList存放的，在add的时候直接调用的CopyOnWriteArrayList.addIfAbsent(...)\n```\n\n#### BlockingQueue 接口\nBlockingQueue的概念重点是在Blocking上，Blocking阻塞，Queue队列，是阻塞队列。  \nBlockingQueue在 Queue的基础上又添加了两个方法，这两个方法一个叫put，一个叫take。这两个方法是真真正正的实现了阻塞。put往里装如果满了的话我这个线程会阻塞住，take往外取如果空了的话线程会阻塞住。所 以这个BlockingQueue就实现了生产者消费者里面的那个容器。\n\n##### LinkedBlockingQueue\n用链表实现的BlockingQueue，是一个无界队列\n\n##### ArrayBlockingqueue\nArrayBlockingQueue是有界的，可以指定它一个固定的值10，它容器就是10，那么当你往里面扔容器的时候，一旦他满了这个put方法就会阻塞住。然后你可以看看用add方法满了之后他会报异常。 offer用返回值来判断到底加没加成功，offer还有另外一个写法你可以指定一个时间尝试着往里面加1秒钟，1秒钟之后如果加不进去它就返回了.\n\n##### DelayQueue\nDelayQueue可以实现在时间上的排序，这个DelayQueue能实现按照在里面等待的时间来进行排序。\n\n##### SynchronousQueue\nSynchronousQueue容量为0，就是这个东西它不是用来装内容的，SynchronousQueue是专门用来两 个线程之间传内容的，给线程下达任务。 \n这个Queue和其他的很重要的区别就是 你不能往里头装东西，只能用来阻塞式的put调用，要求是前面得有人等着拿这个东西的时候你才可以 往里装，但容量为0，其实说白了就是我要递到另外一个的手里才可以。\n\n##### TransferQueue   \nTransferQueue传递，实际上是前面这各种各样Queue的一个组合，它可以给线程来传递任务，以此同时不像是SynchronousQueue只能传递一个，TransferQueue做成列表可以传好多个。比较牛X的是它添加了一个方法叫transfer，如果我们用put就相当于一个线程来了往里一装它就走了。transfer就是装完在这等着，阻塞等有人把它取走我这个线程才回去干我自己的事情。  \n一般使用场景:是我做了一件事情，我这个事情要求有一个结果，有了这个结果之后我可以继续进行我下面的这个事情的时候，比方说 我付了钱，这个订单我付账完成了，但是我一直要等这个付账的结果完成才可以给客户反馈。  \n\n#### PriorityQueue\nPriorityQueue特点是它内部你往里装的时候并不是按顺序往里装的，而是内部进行了一个排序。\n\n","source":"_posts/2020-02-16-container.md","raw":"---\ntitle: 多线程 - Java容器\ndate: 2020-02-16 22:05:29\ntoc: true\ncategories:\n- 技术笔记\ntags: \n- Thread\n- 容器\n---\n### Java 容器\n容器 分两大类Collection、Map，Collection又分三大类List、Set、Queue队列\n\n#### Set \nSet 与 List, Queue 的主要区别是不会有重复元素\n\n#### ArrayList & LinkedList\n* 没有加锁，线程不安全。  \n* ArrayList是基于数组实现的，LinkedList是基于双链表实现的。\n* LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向对列。\n* 因为Array是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的，可以直接返回数组中index位置的元素，因此在随机访问集合元素上有较好的性能。Array获取数据的时间复杂度是O(1),但是要插入、删除数据却是开销很大的，因为这需要移动数组中插入位置之后的的所有元素。\n* 相对于ArrayList，LinkedList的随机访问集合元素时性能较差，因为需要在双向列表中找到要index的位置，再返回；但在插入，删除操作是更快的。\n<!--more-->\n\n#### Queue\n* **Queue 实现的实际上是一个队列，有进有出，它实现了很多对线程友好的API offer、peek、poll，他的一个子类型叫 BlockingQueue对线程友好的API又添加了put和take，这两个实现了阻塞操作，这个是在其他的List、 Set里面都是没有的。这里面最重要的就是是叫做阻塞队列，它的实现的初衷就是为了线程池、高并发做准备的。**\n* Queue里面还有一个子接口叫Deque叫双端队列，一般的队列只是从一端往里扔从另一端往外取。 Deque就是说你可以从反方向装从另外一个方向取。\n\n| Queue Method | Equivalent Deque Method | 说明 |\n| --- | --- | --- |\n| add(e) | addLast(e) | 向队尾插入元素，失败则抛出异常 |\n| offer(e) | offerLast(e) | 向队尾插入元素，失败则返回false |\n| remove(e) | removeFirst(e) | 获取并删除首元素，失败则抛出异常 |\n| poll(e) | pollFirst(e) | 获取并删除首元素，失败则返回null |\n| element(e) | getFirst(e) | 获取但不删除首元素，失败则抛出异常 |\n| peek(e) | peekFirst(e) | 获取但不删除首元素，失败则返回null |\n\n#### Vector & HashTable\n最开始java1.0容器里只有两个，第一个叫Vector可以单独的往里扔，还有一个是Hashtable是可以一对一对往里扔的。Vector相对于实现了List接口，Hashtable实现了Map接口，Vector 和 Hashtable 自带锁所以性能低。\n\n#### HashMap\nHashMap没有锁，线程不安全,他虽然速度比较快，但是多线程时数据会出问题。\n\n##### Collections.synchronizedHashMap\nMap<String,String> map = Collections.synchronizedMap(new HashMap<String,String>());  \n用的是SynchronizedMap这个方法，给HashMap我们手动加锁，它的源码自己做了一个Object，然后每次都是SynchronizedObject，严格来讲他和那个Hashtable效率上区别不大。\n\n#### ConcurrentMap 接口\n##### ConcurrentHashMap & ConcurrentSkipListMap\nConcurrentHashMap是多线程里面真正用的，提高效率主要提高在读上面，由于它往里插的时候内部又做了各种各样的判断，本来是链表的，到8之后又变成了红黑树，然后里面又做了各种各样的 CAS 的判断，所以他往里插的速度是要更低一些的。  \nConcurrentSkipListMap 通过**跳表**来实现的高并发容器并且这个Map是有排序的;  \n这两个的区别一个是有序的一个是无序的，同时都支持并发的操作\n  \n#### CopyOnWrite \n###### CopyOnWriteArrayList & CopyOnWriteArraySet & CopyOnWriteMap\n写时复制，当Write的时候我们要进行复制。这个原码非常简单，当我们需要往里面加元素的时候，把里面的元素得复制出来，再添加一个位置存放新元素。 而且在写的时个有加锁，但在读的时候没有锁。在写的时候特别少，读的时候很多的情况下，在这个时候就可以考虑CopyOnWrite这种方式来提高效率。\n```\n//CopyOnWriteMap.put方法\npublic V put(K key, V value) {\n    synchronized(this) {\n        Map<K, V> newMap = new HashMap(this.internalMap);\n        V val = newMap.put(key, value);\n        this.internalMap = newMap;\n        return val;\n    }\n}\n\n//CopyOnWriteArrayList.add\npublic boolean add(E e) {\n    synchronized (lock) {\n        Object[] es = getArray();\n        int len = es.length;\n        es = Arrays.copyOf(es, len + 1);\n        es[len] = e;\n        setArray(es);\n        return true;\n    }\n}\n\n//CopyOnWriteArraySet 中实际是由CopyOnWriteArrayList存放的，在add的时候直接调用的CopyOnWriteArrayList.addIfAbsent(...)\n```\n\n#### BlockingQueue 接口\nBlockingQueue的概念重点是在Blocking上，Blocking阻塞，Queue队列，是阻塞队列。  \nBlockingQueue在 Queue的基础上又添加了两个方法，这两个方法一个叫put，一个叫take。这两个方法是真真正正的实现了阻塞。put往里装如果满了的话我这个线程会阻塞住，take往外取如果空了的话线程会阻塞住。所 以这个BlockingQueue就实现了生产者消费者里面的那个容器。\n\n##### LinkedBlockingQueue\n用链表实现的BlockingQueue，是一个无界队列\n\n##### ArrayBlockingqueue\nArrayBlockingQueue是有界的，可以指定它一个固定的值10，它容器就是10，那么当你往里面扔容器的时候，一旦他满了这个put方法就会阻塞住。然后你可以看看用add方法满了之后他会报异常。 offer用返回值来判断到底加没加成功，offer还有另外一个写法你可以指定一个时间尝试着往里面加1秒钟，1秒钟之后如果加不进去它就返回了.\n\n##### DelayQueue\nDelayQueue可以实现在时间上的排序，这个DelayQueue能实现按照在里面等待的时间来进行排序。\n\n##### SynchronousQueue\nSynchronousQueue容量为0，就是这个东西它不是用来装内容的，SynchronousQueue是专门用来两 个线程之间传内容的，给线程下达任务。 \n这个Queue和其他的很重要的区别就是 你不能往里头装东西，只能用来阻塞式的put调用，要求是前面得有人等着拿这个东西的时候你才可以 往里装，但容量为0，其实说白了就是我要递到另外一个的手里才可以。\n\n##### TransferQueue   \nTransferQueue传递，实际上是前面这各种各样Queue的一个组合，它可以给线程来传递任务，以此同时不像是SynchronousQueue只能传递一个，TransferQueue做成列表可以传好多个。比较牛X的是它添加了一个方法叫transfer，如果我们用put就相当于一个线程来了往里一装它就走了。transfer就是装完在这等着，阻塞等有人把它取走我这个线程才回去干我自己的事情。  \n一般使用场景:是我做了一件事情，我这个事情要求有一个结果，有了这个结果之后我可以继续进行我下面的这个事情的时候，比方说 我付了钱，这个订单我付账完成了，但是我一直要等这个付账的结果完成才可以给客户反馈。  \n\n#### PriorityQueue\nPriorityQueue特点是它内部你往里装的时候并不是按顺序往里装的，而是内部进行了一个排序。\n\n","slug":"container","published":1,"updated":"2020-03-02T23:44:38.593Z","_id":"ck6ztaqu900055xc9hmtn3ykb","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Java-容器\"><a href=\"#Java-容器\" class=\"headerlink\" title=\"Java 容器\"></a>Java 容器</h3><p>容器 分两大类Collection、Map，Collection又分三大类List、Set、Queue队列</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>Set 与 List, Queue 的主要区别是不会有重复元素</p>\n<h4 id=\"ArrayList-amp-LinkedList\"><a href=\"#ArrayList-amp-LinkedList\" class=\"headerlink\" title=\"ArrayList &amp; LinkedList\"></a>ArrayList &amp; LinkedList</h4><ul>\n<li>没有加锁，线程不安全。  </li>\n<li>ArrayList是基于数组实现的，LinkedList是基于双链表实现的。</li>\n<li>LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向对列。</li>\n<li>因为Array是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的，可以直接返回数组中index位置的元素，因此在随机访问集合元素上有较好的性能。Array获取数据的时间复杂度是O(1),但是要插入、删除数据却是开销很大的，因为这需要移动数组中插入位置之后的的所有元素。</li>\n<li>相对于ArrayList，LinkedList的随机访问集合元素时性能较差，因为需要在双向列表中找到要index的位置，再返回；但在插入，删除操作是更快的。<a id=\"more\"></a>\n\n</li>\n</ul>\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><ul>\n<li><strong>Queue 实现的实际上是一个队列，有进有出，它实现了很多对线程友好的API offer、peek、poll，他的一个子类型叫 BlockingQueue对线程友好的API又添加了put和take，这两个实现了阻塞操作，这个是在其他的List、 Set里面都是没有的。这里面最重要的就是是叫做阻塞队列，它的实现的初衷就是为了线程池、高并发做准备的。</strong></li>\n<li>Queue里面还有一个子接口叫Deque叫双端队列，一般的队列只是从一端往里扔从另一端往外取。 Deque就是说你可以从反方向装从另外一个方向取。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Queue Method</th>\n<th>Equivalent Deque Method</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>add(e)</td>\n<td>addLast(e)</td>\n<td>向队尾插入元素，失败则抛出异常</td>\n</tr>\n<tr>\n<td>offer(e)</td>\n<td>offerLast(e)</td>\n<td>向队尾插入元素，失败则返回false</td>\n</tr>\n<tr>\n<td>remove(e)</td>\n<td>removeFirst(e)</td>\n<td>获取并删除首元素，失败则抛出异常</td>\n</tr>\n<tr>\n<td>poll(e)</td>\n<td>pollFirst(e)</td>\n<td>获取并删除首元素，失败则返回null</td>\n</tr>\n<tr>\n<td>element(e)</td>\n<td>getFirst(e)</td>\n<td>获取但不删除首元素，失败则抛出异常</td>\n</tr>\n<tr>\n<td>peek(e)</td>\n<td>peekFirst(e)</td>\n<td>获取但不删除首元素，失败则返回null</td>\n</tr>\n</tbody></table>\n<h4 id=\"Vector-amp-HashTable\"><a href=\"#Vector-amp-HashTable\" class=\"headerlink\" title=\"Vector &amp; HashTable\"></a>Vector &amp; HashTable</h4><p>最开始java1.0容器里只有两个，第一个叫Vector可以单独的往里扔，还有一个是Hashtable是可以一对一对往里扔的。Vector相对于实现了List接口，Hashtable实现了Map接口，Vector 和 Hashtable 自带锁所以性能低。</p>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p>HashMap没有锁，线程不安全,他虽然速度比较快，但是多线程时数据会出问题。</p>\n<h5 id=\"Collections-synchronizedHashMap\"><a href=\"#Collections-synchronizedHashMap\" class=\"headerlink\" title=\"Collections.synchronizedHashMap\"></a>Collections.synchronizedHashMap</h5><p>Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;String,String&gt;());<br>用的是SynchronizedMap这个方法，给HashMap我们手动加锁，它的源码自己做了一个Object，然后每次都是SynchronizedObject，严格来讲他和那个Hashtable效率上区别不大。</p>\n<h4 id=\"ConcurrentMap-接口\"><a href=\"#ConcurrentMap-接口\" class=\"headerlink\" title=\"ConcurrentMap 接口\"></a>ConcurrentMap 接口</h4><h5 id=\"ConcurrentHashMap-amp-ConcurrentSkipListMap\"><a href=\"#ConcurrentHashMap-amp-ConcurrentSkipListMap\" class=\"headerlink\" title=\"ConcurrentHashMap &amp; ConcurrentSkipListMap\"></a>ConcurrentHashMap &amp; ConcurrentSkipListMap</h5><p>ConcurrentHashMap是多线程里面真正用的，提高效率主要提高在读上面，由于它往里插的时候内部又做了各种各样的判断，本来是链表的，到8之后又变成了红黑树，然后里面又做了各种各样的 CAS 的判断，所以他往里插的速度是要更低一些的。<br>ConcurrentSkipListMap 通过<strong>跳表</strong>来实现的高并发容器并且这个Map是有排序的;<br>这两个的区别一个是有序的一个是无序的，同时都支持并发的操作</p>\n<h4 id=\"CopyOnWrite\"><a href=\"#CopyOnWrite\" class=\"headerlink\" title=\"CopyOnWrite\"></a>CopyOnWrite</h4><h6 id=\"CopyOnWriteArrayList-amp-CopyOnWriteArraySet-amp-CopyOnWriteMap\"><a href=\"#CopyOnWriteArrayList-amp-CopyOnWriteArraySet-amp-CopyOnWriteMap\" class=\"headerlink\" title=\"CopyOnWriteArrayList &amp; CopyOnWriteArraySet &amp; CopyOnWriteMap\"></a>CopyOnWriteArrayList &amp; CopyOnWriteArraySet &amp; CopyOnWriteMap</h6><p>写时复制，当Write的时候我们要进行复制。这个原码非常简单，当我们需要往里面加元素的时候，把里面的元素得复制出来，再添加一个位置存放新元素。 而且在写的时个有加锁，但在读的时候没有锁。在写的时候特别少，读的时候很多的情况下，在这个时候就可以考虑CopyOnWrite这种方式来提高效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;CopyOnWriteMap.put方法</span><br><span class=\"line\">public V put(K key, V value) &#123;</span><br><span class=\"line\">    synchronized(this) &#123;</span><br><span class=\"line\">        Map&lt;K, V&gt; newMap &#x3D; new HashMap(this.internalMap);</span><br><span class=\"line\">        V val &#x3D; newMap.put(key, value);</span><br><span class=\"line\">        this.internalMap &#x3D; newMap;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;CopyOnWriteArrayList.add</span><br><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    synchronized (lock) &#123;</span><br><span class=\"line\">        Object[] es &#x3D; getArray();</span><br><span class=\"line\">        int len &#x3D; es.length;</span><br><span class=\"line\">        es &#x3D; Arrays.copyOf(es, len + 1);</span><br><span class=\"line\">        es[len] &#x3D; e;</span><br><span class=\"line\">        setArray(es);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;CopyOnWriteArraySet 中实际是由CopyOnWriteArrayList存放的，在add的时候直接调用的CopyOnWriteArrayList.addIfAbsent(...)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BlockingQueue-接口\"><a href=\"#BlockingQueue-接口\" class=\"headerlink\" title=\"BlockingQueue 接口\"></a>BlockingQueue 接口</h4><p>BlockingQueue的概念重点是在Blocking上，Blocking阻塞，Queue队列，是阻塞队列。<br>BlockingQueue在 Queue的基础上又添加了两个方法，这两个方法一个叫put，一个叫take。这两个方法是真真正正的实现了阻塞。put往里装如果满了的话我这个线程会阻塞住，take往外取如果空了的话线程会阻塞住。所 以这个BlockingQueue就实现了生产者消费者里面的那个容器。</p>\n<h5 id=\"LinkedBlockingQueue\"><a href=\"#LinkedBlockingQueue\" class=\"headerlink\" title=\"LinkedBlockingQueue\"></a>LinkedBlockingQueue</h5><p>用链表实现的BlockingQueue，是一个无界队列</p>\n<h5 id=\"ArrayBlockingqueue\"><a href=\"#ArrayBlockingqueue\" class=\"headerlink\" title=\"ArrayBlockingqueue\"></a>ArrayBlockingqueue</h5><p>ArrayBlockingQueue是有界的，可以指定它一个固定的值10，它容器就是10，那么当你往里面扔容器的时候，一旦他满了这个put方法就会阻塞住。然后你可以看看用add方法满了之后他会报异常。 offer用返回值来判断到底加没加成功，offer还有另外一个写法你可以指定一个时间尝试着往里面加1秒钟，1秒钟之后如果加不进去它就返回了.</p>\n<h5 id=\"DelayQueue\"><a href=\"#DelayQueue\" class=\"headerlink\" title=\"DelayQueue\"></a>DelayQueue</h5><p>DelayQueue可以实现在时间上的排序，这个DelayQueue能实现按照在里面等待的时间来进行排序。</p>\n<h5 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h5><p>SynchronousQueue容量为0，就是这个东西它不是用来装内容的，SynchronousQueue是专门用来两 个线程之间传内容的，给线程下达任务。<br>这个Queue和其他的很重要的区别就是 你不能往里头装东西，只能用来阻塞式的put调用，要求是前面得有人等着拿这个东西的时候你才可以 往里装，但容量为0，其实说白了就是我要递到另外一个的手里才可以。</p>\n<h5 id=\"TransferQueue\"><a href=\"#TransferQueue\" class=\"headerlink\" title=\"TransferQueue\"></a>TransferQueue</h5><p>TransferQueue传递，实际上是前面这各种各样Queue的一个组合，它可以给线程来传递任务，以此同时不像是SynchronousQueue只能传递一个，TransferQueue做成列表可以传好多个。比较牛X的是它添加了一个方法叫transfer，如果我们用put就相当于一个线程来了往里一装它就走了。transfer就是装完在这等着，阻塞等有人把它取走我这个线程才回去干我自己的事情。<br>一般使用场景:是我做了一件事情，我这个事情要求有一个结果，有了这个结果之后我可以继续进行我下面的这个事情的时候，比方说 我付了钱，这个订单我付账完成了，但是我一直要等这个付账的结果完成才可以给客户反馈。  </p>\n<h4 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h4><p>PriorityQueue特点是它内部你往里装的时候并不是按顺序往里装的，而是内部进行了一个排序。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Java-容器\"><a href=\"#Java-容器\" class=\"headerlink\" title=\"Java 容器\"></a>Java 容器</h3><p>容器 分两大类Collection、Map，Collection又分三大类List、Set、Queue队列</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>Set 与 List, Queue 的主要区别是不会有重复元素</p>\n<h4 id=\"ArrayList-amp-LinkedList\"><a href=\"#ArrayList-amp-LinkedList\" class=\"headerlink\" title=\"ArrayList &amp; LinkedList\"></a>ArrayList &amp; LinkedList</h4><ul>\n<li>没有加锁，线程不安全。  </li>\n<li>ArrayList是基于数组实现的，LinkedList是基于双链表实现的。</li>\n<li>LinkedList还实现了Deque接口，Deque接口是Queue接口的子接口，它代表一个双向队列，因此LinkedList可以作为双向对列。</li>\n<li>因为Array是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的，可以直接返回数组中index位置的元素，因此在随机访问集合元素上有较好的性能。Array获取数据的时间复杂度是O(1),但是要插入、删除数据却是开销很大的，因为这需要移动数组中插入位置之后的的所有元素。</li>\n<li>相对于ArrayList，LinkedList的随机访问集合元素时性能较差，因为需要在双向列表中找到要index的位置，再返回；但在插入，删除操作是更快的。</li></ul>","more":"\n\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><ul>\n<li><strong>Queue 实现的实际上是一个队列，有进有出，它实现了很多对线程友好的API offer、peek、poll，他的一个子类型叫 BlockingQueue对线程友好的API又添加了put和take，这两个实现了阻塞操作，这个是在其他的List、 Set里面都是没有的。这里面最重要的就是是叫做阻塞队列，它的实现的初衷就是为了线程池、高并发做准备的。</strong></li>\n<li>Queue里面还有一个子接口叫Deque叫双端队列，一般的队列只是从一端往里扔从另一端往外取。 Deque就是说你可以从反方向装从另外一个方向取。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Queue Method</th>\n<th>Equivalent Deque Method</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>add(e)</td>\n<td>addLast(e)</td>\n<td>向队尾插入元素，失败则抛出异常</td>\n</tr>\n<tr>\n<td>offer(e)</td>\n<td>offerLast(e)</td>\n<td>向队尾插入元素，失败则返回false</td>\n</tr>\n<tr>\n<td>remove(e)</td>\n<td>removeFirst(e)</td>\n<td>获取并删除首元素，失败则抛出异常</td>\n</tr>\n<tr>\n<td>poll(e)</td>\n<td>pollFirst(e)</td>\n<td>获取并删除首元素，失败则返回null</td>\n</tr>\n<tr>\n<td>element(e)</td>\n<td>getFirst(e)</td>\n<td>获取但不删除首元素，失败则抛出异常</td>\n</tr>\n<tr>\n<td>peek(e)</td>\n<td>peekFirst(e)</td>\n<td>获取但不删除首元素，失败则返回null</td>\n</tr>\n</tbody></table>\n<h4 id=\"Vector-amp-HashTable\"><a href=\"#Vector-amp-HashTable\" class=\"headerlink\" title=\"Vector &amp; HashTable\"></a>Vector &amp; HashTable</h4><p>最开始java1.0容器里只有两个，第一个叫Vector可以单独的往里扔，还有一个是Hashtable是可以一对一对往里扔的。Vector相对于实现了List接口，Hashtable实现了Map接口，Vector 和 Hashtable 自带锁所以性能低。</p>\n<h4 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h4><p>HashMap没有锁，线程不安全,他虽然速度比较快，但是多线程时数据会出问题。</p>\n<h5 id=\"Collections-synchronizedHashMap\"><a href=\"#Collections-synchronizedHashMap\" class=\"headerlink\" title=\"Collections.synchronizedHashMap\"></a>Collections.synchronizedHashMap</h5><p>Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;String,String&gt;());<br>用的是SynchronizedMap这个方法，给HashMap我们手动加锁，它的源码自己做了一个Object，然后每次都是SynchronizedObject，严格来讲他和那个Hashtable效率上区别不大。</p>\n<h4 id=\"ConcurrentMap-接口\"><a href=\"#ConcurrentMap-接口\" class=\"headerlink\" title=\"ConcurrentMap 接口\"></a>ConcurrentMap 接口</h4><h5 id=\"ConcurrentHashMap-amp-ConcurrentSkipListMap\"><a href=\"#ConcurrentHashMap-amp-ConcurrentSkipListMap\" class=\"headerlink\" title=\"ConcurrentHashMap &amp; ConcurrentSkipListMap\"></a>ConcurrentHashMap &amp; ConcurrentSkipListMap</h5><p>ConcurrentHashMap是多线程里面真正用的，提高效率主要提高在读上面，由于它往里插的时候内部又做了各种各样的判断，本来是链表的，到8之后又变成了红黑树，然后里面又做了各种各样的 CAS 的判断，所以他往里插的速度是要更低一些的。<br>ConcurrentSkipListMap 通过<strong>跳表</strong>来实现的高并发容器并且这个Map是有排序的;<br>这两个的区别一个是有序的一个是无序的，同时都支持并发的操作</p>\n<h4 id=\"CopyOnWrite\"><a href=\"#CopyOnWrite\" class=\"headerlink\" title=\"CopyOnWrite\"></a>CopyOnWrite</h4><h6 id=\"CopyOnWriteArrayList-amp-CopyOnWriteArraySet-amp-CopyOnWriteMap\"><a href=\"#CopyOnWriteArrayList-amp-CopyOnWriteArraySet-amp-CopyOnWriteMap\" class=\"headerlink\" title=\"CopyOnWriteArrayList &amp; CopyOnWriteArraySet &amp; CopyOnWriteMap\"></a>CopyOnWriteArrayList &amp; CopyOnWriteArraySet &amp; CopyOnWriteMap</h6><p>写时复制，当Write的时候我们要进行复制。这个原码非常简单，当我们需要往里面加元素的时候，把里面的元素得复制出来，再添加一个位置存放新元素。 而且在写的时个有加锁，但在读的时候没有锁。在写的时候特别少，读的时候很多的情况下，在这个时候就可以考虑CopyOnWrite这种方式来提高效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;CopyOnWriteMap.put方法</span><br><span class=\"line\">public V put(K key, V value) &#123;</span><br><span class=\"line\">    synchronized(this) &#123;</span><br><span class=\"line\">        Map&lt;K, V&gt; newMap &#x3D; new HashMap(this.internalMap);</span><br><span class=\"line\">        V val &#x3D; newMap.put(key, value);</span><br><span class=\"line\">        this.internalMap &#x3D; newMap;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;CopyOnWriteArrayList.add</span><br><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    synchronized (lock) &#123;</span><br><span class=\"line\">        Object[] es &#x3D; getArray();</span><br><span class=\"line\">        int len &#x3D; es.length;</span><br><span class=\"line\">        es &#x3D; Arrays.copyOf(es, len + 1);</span><br><span class=\"line\">        es[len] &#x3D; e;</span><br><span class=\"line\">        setArray(es);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;CopyOnWriteArraySet 中实际是由CopyOnWriteArrayList存放的，在add的时候直接调用的CopyOnWriteArrayList.addIfAbsent(...)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BlockingQueue-接口\"><a href=\"#BlockingQueue-接口\" class=\"headerlink\" title=\"BlockingQueue 接口\"></a>BlockingQueue 接口</h4><p>BlockingQueue的概念重点是在Blocking上，Blocking阻塞，Queue队列，是阻塞队列。<br>BlockingQueue在 Queue的基础上又添加了两个方法，这两个方法一个叫put，一个叫take。这两个方法是真真正正的实现了阻塞。put往里装如果满了的话我这个线程会阻塞住，take往外取如果空了的话线程会阻塞住。所 以这个BlockingQueue就实现了生产者消费者里面的那个容器。</p>\n<h5 id=\"LinkedBlockingQueue\"><a href=\"#LinkedBlockingQueue\" class=\"headerlink\" title=\"LinkedBlockingQueue\"></a>LinkedBlockingQueue</h5><p>用链表实现的BlockingQueue，是一个无界队列</p>\n<h5 id=\"ArrayBlockingqueue\"><a href=\"#ArrayBlockingqueue\" class=\"headerlink\" title=\"ArrayBlockingqueue\"></a>ArrayBlockingqueue</h5><p>ArrayBlockingQueue是有界的，可以指定它一个固定的值10，它容器就是10，那么当你往里面扔容器的时候，一旦他满了这个put方法就会阻塞住。然后你可以看看用add方法满了之后他会报异常。 offer用返回值来判断到底加没加成功，offer还有另外一个写法你可以指定一个时间尝试着往里面加1秒钟，1秒钟之后如果加不进去它就返回了.</p>\n<h5 id=\"DelayQueue\"><a href=\"#DelayQueue\" class=\"headerlink\" title=\"DelayQueue\"></a>DelayQueue</h5><p>DelayQueue可以实现在时间上的排序，这个DelayQueue能实现按照在里面等待的时间来进行排序。</p>\n<h5 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h5><p>SynchronousQueue容量为0，就是这个东西它不是用来装内容的，SynchronousQueue是专门用来两 个线程之间传内容的，给线程下达任务。<br>这个Queue和其他的很重要的区别就是 你不能往里头装东西，只能用来阻塞式的put调用，要求是前面得有人等着拿这个东西的时候你才可以 往里装，但容量为0，其实说白了就是我要递到另外一个的手里才可以。</p>\n<h5 id=\"TransferQueue\"><a href=\"#TransferQueue\" class=\"headerlink\" title=\"TransferQueue\"></a>TransferQueue</h5><p>TransferQueue传递，实际上是前面这各种各样Queue的一个组合，它可以给线程来传递任务，以此同时不像是SynchronousQueue只能传递一个，TransferQueue做成列表可以传好多个。比较牛X的是它添加了一个方法叫transfer，如果我们用put就相当于一个线程来了往里一装它就走了。transfer就是装完在这等着，阻塞等有人把它取走我这个线程才回去干我自己的事情。<br>一般使用场景:是我做了一件事情，我这个事情要求有一个结果，有了这个结果之后我可以继续进行我下面的这个事情的时候，比方说 我付了钱，这个订单我付账完成了，但是我一直要等这个付账的结果完成才可以给客户反馈。  </p>\n<h4 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h4><p>PriorityQueue特点是它内部你往里装的时候并不是按顺序往里装的，而是内部进行了一个排序。</p>"},{"title":"多线程 - 线程","date":"2020-02-16T14:05:29.000Z","toc":true,"_content":"线程: 作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程\n### 一、创建线程的几种方式：\n1. 继承Thread，并重写该类的run方法\n<!--more-->\n\n```java\npublic class MyThread extends Thread{\n\n    @Override\n    public void run(){\n        System.out.println(Thread.currentThread().getName()+\" 是继承写法。\");\n    }\n\n    public static void main(String[] args){\n        MyThread thread = new MyThread();\n        thread.setName(\"extends thread\");\n        thread.start();\n    }\n\n}\n```\n\n2. 通过Runnable接口创建线程类,创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\n```java\npublic class MyThread implements Runnable {\n\n    @Override\n    public void run(){\n        System.out.println(Thread.currentThread().getName()+\" 写法。\");\n    }\n\n    public static void main(String[] args){\n        Thread t = new Thread(new MyThread(),\"implements Runnable\");\n        t.start();\n    }\n\n}\n```\n\n3. 通过Callable和Future创建线程\n    - 创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。\n    - 创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。\n    - 使用FutureTask对象作为Thread对象的target创建并启动新线程。\n    - 调用FutureTask对象的get()方法来获得子线程执行结束后的返回值\n```java\npublic class MyCallableThread implements Callable<Integer> {\n\n    @Override\n    public Integer call(){\n        System.out.println(Thread.currentThread().getName()+\" 写法。\");\n        return 1;\n    }\n\n    public static void main(String[] args){\n        FutureTask<Integer> task = new FutureTask<Integer>(new MyCallableThread());\n        new Thread(task,\"implements Callable\").start();\n        try {\n            System.out.println(\"有返回值：\" + task.get());\n        } catch (InterruptedException e){\n            e.printStackTrace();\n        } catch (ExecutionException e){\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```\n\n\n### 二、线程操作的几个方法  \n* start: 启动一个新的线程,start方法必须子线程第一个调用的方法，start不能够重复调用，新线程会调用runnable接口提供的run方法\n* run: run方法是子线程的执行体，子线程从进入run方法开始直至run方法执行接收意味着子线程的任务执行接收， 在主线程直接调用run方法是不能创建子线程，只是普通方法调用\n* sleep: 睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活由睡眠时间而定，等睡眠到规定的时间自动复活.\n* Yield: 就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头，还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管\n* join: 意思就是在自己当前线程加入你调用Join的线程()，本线程等待。等调用的线程运行完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运行完毕继续t1运行(自己join自己没有意义)\n  \nwait() 和 notify() 方法说明几点：\n1. 调用notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中**随机**选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。\n2. 除了notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。\n3. wait()法需要释放锁，所以必须在synchronized中使用，否则会抛出异常 IllegalMonitorStateException\n4. notify()方法也必须在synchronized中使用，并且应该指定对象 \n5. synchronized()、wait()、notify()对象必须一致，一个synchronized()代码块中只能有一个线程调\n\n### 三、线程六种状态  \n1. 初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。\n2. 运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。\n线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。\n3. 阻塞(BLOCKED)：表示线程阻塞于锁。\n4. 等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。\n5. 超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。\n6. 终止(TERMINATED)：表示该线程已经执行完毕。\n![线程状态转换图](https://casparthh.github.io/2020/02/16/thread/status.jpg)\n\n*线程什么状态时候会被挂起?挂起是否也是一个状态?  \nRunning的时候，在一个cpu上会跑很多个线程，cpu会隔一段时间执行这个线程一下，在隔一段时间执行那个线程一下，这个是cpu内部的一个调度，从running扔回去就叫线程被挂起。\n\n### 四、synchronized  \n多个线程去访问同一个资源的时候对这个资源上锁  \n\n* synchronized 使用方法和特性\n    - 在同步代码外嵌套synchronized(Object/Class)\n    - synchronized方法和synchronized(this)执行这段代码它是等值的\n    - 每次都定义个一个锁的对象Object o 把它new出来，那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是 synchronized(this)锁定当前对象就行\n    - 静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象\n    - 类锁和对象锁互不干扰，只有当监视的是同一个class（Class对象）的锁或同一个对象实例的锁才发生互斥\n    - 可重入，一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁\n    - 程序在执行过程中，如果出现异常，默认情况锁会被释放所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适， * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常\n    - 如果锁的是new出来的对象，在某一种特定的不小心的情况下你把o变成了别的对象了，这个时候线程的并发就会出问题。锁是在对象的头上两位来作为代表的，你这线程本来大家都去访问这两位了，结果突然把 这把锁变成别的对象，去访问别的对象的两位了，这俩之间就没有任何关系了。因此，以对象作为锁的 时候不让它发生改变，加final。\n\n### 五、锁升级的概念  \n原来要去找操作系统，要找内核去申请这把锁，到后期做了对 synchronized的一些改进，他的效率比原来要改变了不少，改进的地方。当我们使用synchronized的 时候HotSpot的实现是这样的:  \n上来之后第一个去访问某把锁的线程 比如sync (Object) ，来了之后先在 这个Object的头上面markword记录这个线程。(如果只有第一个线程访问的时候实际上是没有给这个 Object加锁的，在内部实现的时候，只是记录这个线程的ID(偏向锁))。    \n偏向锁如果有线程争用的话，就升级为自旋锁，概念就是(有一个哥们儿在蹲马桶 ，另外来了一个哥 们，他就在旁边儿等着，他不会跑到cpu的就绪队列里去，而就在这等着占用cpu，用一个while的循环 在这儿转圈玩儿， 很多圈之后不行的话就再一次进行升级)。    \n自旋锁转圈十次之后，升级为重量级锁，重量级锁就是去操作系统那里去申请资源。这是一个锁升级的过程。  \n\n### 六、volatile   \n使一个变量在多个线程中可见，保证线程的可见性，同时防止指令重排序。线程可见性在CPU的级别是用缓存一直性来保 证的;禁止指令重排序CPU级别是你禁止不了的，那是人家内部运行的过程，提高效率的。但是在 虚拟机级别你家volatile之后呢，这个指令重排序就可以禁止。严格来讲，还要去深究它的内部的 话，它是加了读屏障和写屏障，这个是CPU的一个原语。  \nA B线程都用到一个变量，java默认是A线程中保留一份copy,这样如果B线程修改了该变量，则A线程未必知道，使用volatile关键字，会让所有线程都会读到变量的修改值  \n并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized  \n\n### 七、CAS 比较和交换（Conmpare And Swap)\n它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。  \n凡是以Atomic开头的都是用CAS这种操作来保证线程安全的这么一些个类。AtomicInteger的意思就是里面包了一个Int类型，这个int类型的自增 count++ 是线程安全的，还有拿值等等是线程安全的，由于我们在工作开发中经常性的有那种需求，一个值所有的线程共同访问它往 上递增 ，所以jdk专门提供了这样的一些类。  \n它的内部调用，就会跑到Unsafe类去(不安全的)，Unsafe中对CAS的实现是C++写的。也就是说AtomicInteger它的内部是调用了 Unsafe这个类里面的方法CompareAndSetI(CAS)。这个比较并且设定的意思是什么呢，我原来想改变某一个值0 ，我想把它变成1，但是其中我想做到线程安全，就只能加锁synchronized ，不然线程就不安全。我现在可以用另外一种操作来替代这把锁，就是cas操作，你可以把它想象成一个方法，这个方法有三个参数，cas(V，Expected，NewValue)。  \nV第一个参数是要改的那个值;Expected第二个参数是期望当前的这个值会是几;NewValue要设定的新值。当前这个线程想改这个值的时候我期望你这值就是0，你不能是个1，如果是1就说明我这值不对，然后想把你变成1。  \n当你判断的时候，发现是我期望的值，还没有进行新值设定的时候值发生了改变怎么办，cas是cpu的原语支持，也就是说cas操作是cpu指令级别上的支持，中间不能被打断。  \n \nABA问题：  \n假如说你有一个值，我拿到这个值是1，想把它变成2，我拿到1用cas操作，期望值是1，准备变成2，这个对象Object，在这个过程中，没有一个线程改过我肯定是可以更改的，但是 如果有一个线程先把这个1变成了2后来又变回1，中间值更改过，它不会影响我这个cas下面操作，这就是ABA问题。 这种问题怎么解决。如果是int类型的，最终值是你期望的，也没有关系，这种没关系可以不去管这个问题。如果你确实想管这个问题可以加版本号，做任何一个值的修改，修改完之后加一，后面检查的时候连带版本号一起检查。  \n\n### 八、Atomic 类  \nAtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的  \n多线程对一个数进行递增方法:\n1. 一个long类型的数，递增的时候我们加锁; \n2. 使用AtomicLong可以让它不断的往上递增;\n3. LongAdder;\n```java\npublic class Incrementer {\n    static Long counter1 = new Long(0L);\n    static AtomicLong counter2 = new AtomicLong(0L);\n    static LongAdder counter3 = new LongAdder();\n    final static Object o = new Object();\n\n    public static void main(String[] args) {\n        \n        //synchronized\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    synchronized (o) {  //去掉锁之后结果就有问题\n                    counter1= counter1+1;\n                    }\n                }\n            }).start();\n        }\n\n        //AtomicLong\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    counter2.incrementAndGet();\n                }\n            }).start();\n        }\n\n        //LongAdder\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    counter3.increment();\n                }\n            }).start();\n        }\n\n\n        try {\n            //简单处理，休眠主线程等上面的计算线程完成。\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        System.out.println(counter1);\n        System.out.println(counter2);\n        System.out.println(counter3);\n\n    }\n}\n```\n\n### 九、基于CAS的一些新类型的锁\n#### 1. RenentrantLock 可重入锁\n* ReentrantLock是可以替代synchronized的,\n* 需要手动枷锁，手动解锁、可以出现多个不同的等待队列\n* ReentrantLock有一些功能还是要比synchronized强大的，强大的地方，你可以使用tryLock进行尝试 锁定，不管锁定与否，方法都将继续执行，synchronized如果搞不定的话他肯定就阻塞了，但是用 ReentrantLock你自己就可以决定你到底要不要wait。\n* 原来写synchronized的地方换 写lock.lock()，加完锁之后需要注意的是记得lock.unlock()解锁，由于synchronized是自动解锁的，大括号执行完就结束了。lock就不行，lock必须得手动解锁，手动解锁一定要写在try...finally里面保证最好一定要解锁，不然的话上锁之后中间执行的过程有问题了，死在那了，别人就永远也拿不到这把锁了。\n* ReentrantLock还可以用lock.lockInterruptibly()这个类，对interrupt()方法做出相应，可以被打断的加锁，如果以这种方式加锁的话我们可以调用一个t2.interrupt(); 打断线程2的等待。\n* ReentrantLock还可以指定为公平锁，公平锁的意思是当我们new一个ReentrantLock你可以传一个参数为true，这个true表示公平锁，公平锁的意思是谁等在前面就先让谁执行，而不是说谁后来了之后就马上让谁执行。如果说这个锁不公平，来了一个线程上来就抢，它是有可能先抢到的。（是否公平锁分别有NonfairSync & FairSync 两个不同的实现）\n* 除了synchronized之外，多数内部都是用的cas。AQS的实际上它内部用的是 park和unpark，也不是全都用的cas,他还是做了一个锁升级的概念，只不过这个锁升级做的比较隐秘， 在等待这个队列的时候如果你拿不到还是进入一个阻塞的状态，前面至少有一个cas的状态，他不像原先就直接进入阻塞状态了。（参考后面的源码阅读部分）\n```java\npublic class ReentrantLockTest {\n    static Integer i = new Integer(0);\n    static ReentrantLock lock = new ReentrantLock();\n\n    public static void main(String[] args) {\n        for (int j = 0; j < 10000; j++) {\n            new Thread(() -> {\n                for (int k = 0; k < 100 ; k++) {\n                    lock.lock();\n                    try {\n                        i++;\n                    } finally {\n                        // 必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁(重要的事情说三遍)\n                        // 使用syn锁定的话如果遇到异常，jvm会手动释放锁，但是lock必须手动释放锁\n                        lock.unlock();\n                    }\n                }\n            }).start();\n        }\n\n        try {\n            //简单处理，休眠主线程等上面的计算线程完成。\n            TimeUnit.SECONDS.sleep(5);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(i);\n    }\n}\n```\n\n* ReentrantLock 非公平锁原码阅读\n```\n     ReentrantLock lock = new ReentrantLock();\n     lock.lock();  //从断点跟踪\n     \n     public void lock() {\n         sync.acquire(1);\n     }\n     \n     public final void acquire(int arg) {\n         if (!tryAcquire(arg) &&\n             acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n             selfInterrupt();\n     }\n     \n     final boolean nonfairTryAcquire(int acquires) {\n         final Thread current = Thread.currentThread();\n         int c = getState(); //the current value of synchronization state.\n         if (c == 0) {\n            //如果当前对象没有锁，直接设置一个排它锁\n             if (compareAndSetState(0, acquires)) {\n                 setExclusiveOwnerThread(current);\n                 return true;\n             }\n         }\n         else if (current == getExclusiveOwnerThread()) {\n            // 如果当前持有锁的是同一个线程，则设置为可重入\n             int nextc = c + acquires;\n             if (nextc < 0) // overflow\n                 throw new Error(\"Maximum lock count exceeded\");\n             setState(nextc);\n             return true;\n         }\n         return false; //没拿到锁，返回fallse\n     }\n     \n     \n    \n     private Node addWaiter(Node mode) {\n         //mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared, \n         //now 一个共享锁或排它锁节点\n         Node node = new Node(mode);  \n        \n         //取出队列中最后一个节点，设置为该新节点的上一个节点。并返回新节点。\n         //如果最后一个节点为空，初使化一个同步队列\n         for (;;) {\n             Node oldTail = tail;\n             if (oldTail != null) {\n                 node.setPrevRelaxed(oldTail);\n                 if (compareAndSetTail(oldTail, node)) {\n                     oldTail.next = node;\n                     return node;\n                 }\n             } else {\n                 initializeSyncQueue();\n             }\n         }\n    }\n    \n    final boolean acquireQueued(final Node node, int arg) {\n        boolean interrupted = false;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                //取出前面新new 节点，判断上一个节点，是不是头部节点，如果是的话，直接再次尝试拿锁。\n                //如果拿锁成功，那新节点，就是头部节点\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    return interrupted;\n                }\n                //判断是否继续自旋拿锁，还是park\n                if (shouldParkAfterFailedAcquire(p, node))\n                    interrupted |= parkAndCheckInterrupt();\n            }\n        } catch (Throwable t) {\n            cancelAcquire(node);\n            if (interrupted)\n                selfInterrupt();\n            throw t;\n        }\n    }\n \n```\n\n#### 2.CountDownLatch  \n倒数，Latch是门栓的意思(倒数的一个门栓，5、4、3、2、1数到了，我这个门栓就开 了)\n刚前面的递增方法，用的休眠主线程等计算线程完成后，再打印结果，这并不好，我们用CountDownLatch 改造下：\n```java\npublic class Incrementer {\n    \n    static Long counter1 = Long.valueOf(0);\n    static CountDownLatch latch = new CountDownLatch(10000);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    synchronized (Incrementer.class) {  //去掉锁之后结果就有问题\n                        counter1++;\n                        latch.countDown();\n                    }\n                    try {\n                        TimeUnit.MILLISECONDS.sleep(10);\n                        //添加休眠，方便对比结果。\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n\n        System.out.println(\"创建线程完成,等待结果。\");\n        try {\n            latch.await(); //这里会阻塞住，等latch 倒数到0的时候，才会继续执行\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(counter1);\n    }\n}\n```\n\n#### 3. CyclicBarrier  \n循环栅栏，这有一个栅栏，什么时候人满了就把栅栏推倒， 哗啦哗啦的都放出去，出去之后扎栅栏又重新起来，再来人，满了，推倒之后又继续。\n```java\npublic class BusDispatcher {\n\n    static CountDownLatch latch = new CountDownLatch(100);\n    static volatile int num = 0;\n    static CyclicBarrier barrier = new CyclicBarrier(10, ()->{\n        System.out.println(Thread.currentThread().getName()+\" - 人满了发车。。。。。\");\n    });\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100; i++) {\n            new Thread(()->{\n                try {\n                    System.out.println(\"第\"+(++num)+\"个人上车\");\n                    latch.countDown();\n                    barrier.await();\n                } catch (InterruptedException e){\n                    e.printStackTrace();\n                } catch (BrokenBarrierException e){\n                    e.printStackTrace();\n                }\n            }).start();\n        }\n        try {\n            latch.await();\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(\"人车调度任务完成。\");\n    }\n}\n```\n\n#### 4. Phaser  \nPhaser它就更像是结合了CountDownLatch和CyclicBarrier，翻译一下叫阶段。  \nPhaser是按照不同的阶段来对线程进行执行，就是它本身是维护着一个阶段这样的一个成员变量，当前 我是执行到那个阶段，是第0个，还是第1个阶段啊等等，每个阶段不同的时候这个线程都可以往前走， 有的线程走到某个阶段就停了，有的线程一直会走到结束。你的程序中如果说用到分好几个阶段执行 ， 而且有的人必须得几个人共同参与的一种情形的情况下可能会用到这个Phaser。  \n```java\npublic class PhaserTest {\n\n    static GamePhaser phaser = new GamePhaser(3);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            new Thread(() -> {\n                sleepSeconds(1);\n                System.out.println(Thread.currentThread().getName()+\" 到\");\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第一个游戏。。。\");\n                sleepSeconds(2);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第二个游戏。。。\");\n                sleepSeconds(3);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第三个游戏。。。\");\n                sleepSeconds(4);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第四个游戏。。。\");\n                sleepSeconds(5);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"准备离开。。。\");\n                sleepSeconds(2);\n                phaser.arriveAndAwaitAdvance();\n            },\"00\"+(i+1)).start();\n        }\n    }\n\n    private static void sleepSeconds(int seconds) {\n        try {\n            TimeUnit.SECONDS.sleep(seconds);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    static class GamePhaser extends Phaser {\n\n        public GamePhaser(int parties) {\n            super(parties);\n        }\n\n        /**\n         * @param phase             第几个阶段，\n         * @param registeredParties 当前有多少线程参与\n         * @return if this phaser should terminate, 是否要结束phaser\n         */\n        @Override\n        protected boolean onAdvance(int phase, int registeredParties) {\n            switch (phase) {\n                case 0:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"人到齐了开始玩第一个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 1:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"开始玩第二个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 2:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"开始玩第三个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 3:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"开始玩第四个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 4:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"游戏结束了，谢谢参与 ^-^\");\n                    System.out.println(\"\");\n                    return true;\n                default:\n                    return true;\n            }\n        }\n    }\n}\n```\n\n#### 5. ReadWriteLock\n这个ReadWriteLock 是读写锁。读写锁的概念其实就是共享锁和排他锁，读锁就是共享锁，写锁就是排他锁。  \n```java\npublic class ReadWriteLockTest {\n\n    static ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n    static Lock readLock = readWriteLock.readLock();\n    static Lock writeLock = readWriteLock.writeLock();\n\n    static int value = 0;\n\n    public static void main(String[] arges){\n        for (int i = 0; i < 10; i++) {\n            //读线程不用阻塞，可以并发完成工作\n            new Thread(()->{\n                readLock.lock();\n                try {\n                    ReadWriteLockTest.read();\n                } finally {\n                    //记得Reentrant\n                    readLock.unlock();\n                }\n            }).start();\n        }\n\n        //写线程会阻塞，需要排序完成任务\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                writeLock.lock();\n                try {\n                    ReadWriteLockTest.write(1);\n                } finally {\n                    writeLock.unlock();\n                }\n            }).start();\n        }\n    }\n\n    public static void read(){\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e){\n          e.printStackTrace();\n        }\n        System.out.println(\"read value =\" + value);\n    }\n\n    public static void write(int num){\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        value += num;\n        System.out.println(\"write value =\" + value);\n    }\n\n}\n```\n\n#### 6. Semaphore\nSemaphore 含义就是限流，比如说流水线人不能全去上洗手间吧，所以得限制，每个上洗手间的人必须要领到洗手卡才能去，没有卡的人得等着前面的人回来，并归还了卡。\n默认Semaphore是非公平的，new Semaphore(2, true)第二个值传true才是设置公平  \n```java\npublic class SemaphoreTest {\n\n    //定义限制数量\n    static Semaphore semaphore = new Semaphore(2, true);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                try {\n                    System.out.println(Thread.currentThread().getName()+\"想上厕所,排队领洗手卡。。。\");\n                    semaphore.acquire(1);\n                    System.out.println(\"时间（秒）:\"+System.currentTimeMillis()/1000+\"，\"+Thread.currentThread().getName()+\"等到洗手卡了，上厕所ing。。。\");\n                    TimeUnit.SECONDS.sleep(4);\n                }catch (InterruptedException e){\n                    e.printStackTrace();\n                } finally {\n                    //用完了一定要记得归还release, 不然后边的人就没得用了。\n                    semaphore.release(1);\n                }\n            },\"姓名\"+(1+i)).start();\n\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            }catch (InterruptedException e){\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n#### 7. Exchanger\n交换器，俩人之间互相交换个数据用的，这里收到的消息得是成对的，否则 Exchanger 一直在等待有人来交换。\n```java\npublic class ExchangerTest {\n\n    static Exchanger<String> exchanger = new Exchanger<String>();\n\n    public static void main(String[] args) {\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 001\").start();\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 002\").start();\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 003\").start();\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 004\").start();\n    }\n}\n```\n\n### 十、LockSuport\n*在JDK1.6中的java.util.concurrent的子包locks中引了LockSupport这个API，LockSupport是一个比较底层的工具类，用来创建锁和其他同步工具类的基本线程阻塞原语。java锁和同步器框架的核心 AQS: AbstractQueuedSynchronizer，就是通过调用 LockSupport.park()和 LockSupport.unpark()的方法，来实现线程的阻塞和唤醒的。\n\nLockSuport的几个特点\n1. LockSupport不需要synchornized加锁就可以实现线程的阻塞和唤醒 \n2. LockSupport.unpartk()可以先于LockSupport.park()执行，并且线程不会阻塞 \n3. 如果一个线程处于等待状态，连续调用了两次park()方法，就会使该线程永远无法被唤醒\n4. park()和unpark()方法的实现是由Unsefa类提供的，而Unsefa类是由C和C++语言完成的，它主要通过一个变量作为一个标识，变量值在0，1之间来回切换，当这个变量大于0的时候线程就获得了“令牌”，其实park()和unpark()方法就是在改变这个变量的值，来达到线程的阻塞和唤醒的\n```java\n// LockSuport 要求用线程顺序打印A1B2C3....Z26\npublic class PrintFactory {\n\n    static char[] letters = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};\n    static int[] nums = {1, 2, 3, 4, 5, 6, 7};\n    static Thread letterPrinter = new Thread(LetterThread::print);\n    static Thread numPrinter = new Thread(NumThread::print);\n\n    public static void main(String[] args) {\n        letterPrinter.start();\n        numPrinter.start();\n    }\n\n\n    static class LetterThread {\n        public static void print() {\n            for (int i = 0; i < letters.length; i++) {\n                System.out.print(letters[i]);\n                LockSupport.unpark(numPrinter);\n                if(i < letters.length -1){\n                    LockSupport.park();\n                }\n\n            }\n        }\n    }\n\n    static class NumThread {\n        public static void print() {\n            LockSupport.park();\n            for (int i = 0; i < nums.length; i++) {\n                System.out.print(nums[i]);\n                LockSupport.unpark(letterPrinter);\n                if(i < letters.length -1){\n                    LockSupport.park();\n                }\n            }\n        }\n    }\n\n}\n```\n\n### 十一、Java的四种引用 强、软、弱、虚\n* 比如Object o = new Object()，这就是普通的引用，也就是强引用，只要有一个应用指向这个对象，那么垃圾回收器一定不会回收它。\n* 软引用 SoftReference<byte[]> m = new SoftReference<>(new byte[1024102410])   \n  当有一个对象(字节数组)被一个软引用所指向的时候，只有系统内存不够 用的时候，才会回收它(字节数组)\n* 弱引用 WeakReference m = new WeakReference<>(new M())\n  只要遭遇到gc就会回收\n* 虚引用 PhantomReference<M> phantomReference = new PhantomReference<>(new M(), QUEUE);\n  对于虚引用它就干一件事，它就是管理堆外内存的， \n  首先第一点，这个虚引用的构造方法至少都是两个参数的， \n  第二个参数还必须是一个队列，这个虚引用基本没用，就是说不是给你用的，那么它是给谁用的呢?是给写JVM(虚拟机)的人用的  \n\n### 十二、JMH\nJMH -java Microbenchmark Harness\n微基准测试，它是测的某一个方法的性能。支持命令行或IDEA开发工具运行，idea运行需要添加插件。直接在Idea插件查找JMH安装。安装好后就可以像Junit一样写测试。\n官网 http://openjdk.java.net/projects/code-tools/jmh/\nMaven 引用：\n```xml\n<!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core -->\n<dependency>\n    <groupId>org.openjdk.jmh</groupId>\n    <artifactId>jmh-core</artifactId>\n    <version>1.21</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess -->\n<dependency>\n    <groupId>org.openjdk.jmh</groupId>\n    <artifactId>jmh-generator-annprocess</artifactId>\n    <version>1.21</version>\n    <scope>test</scope>\n</dependency>\n```\n使用示例,代码写在test目录下，类似junit测试：\n```\n@Benchmark\n@Warmup(iteration=1, time=3)  //在专业测试里面首先要进行预热，预热多少次，预热多少时间\n@Fork(5)  //用多少个线程去执行我们的程序 \n@BenchmarkMode(Mode.Throughput)  //是对基准测试的一个模式，这个模式用的最多的是 Throughput吞吐量\n@Measurement(iteration=1, time=3) //是整个测试要测试多少遍，调用这个方法要调用多少次\npublic void test() {\n    //.... 调用测试方法\n}\n```\n\n### 十三、Disrupter\n主页：http://lmax-exchange.github.io/disruptor/\n\n源码：https://github.com/LMAX-Exchange/disruptor\n\nGettingStarted: https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started\n\napi: http://lmax-exchange.github.io/disruptor/docs/index.html\n\nmaven: https://mvnrepository.com/artifact/com.lmax/disruptor\n\nifeve：http://ifeve.com/disruptor/\n\nDisruptor 开源的并发框架，并获得2011 Duke’s 程序框架创新奖，能够在无锁的情况下实现网络的Queue并发操作。\n* 如果把它用作MQ的话，**单机**最快的MQ，性能非常的高，主要是它里 用的全都是CAS, 另外把各种各样的性能开发到了极致。\n* Disruptor就是在内存里，Disruptor简单理解就是内存里用于存放元素的一个高效率的队列。\n* Disruptor叫无锁、高并发、环形Buffer，直接覆盖(不用清除)旧的数据，降低GC频率，用于生产者消费者模式\n* RingBuffer是一个环形队列，和其他队列不一样的是他是一个环形队列，环形的Buffer。一般情况下我们的容器是一个队列，不管你是用链表实现还是用数组实现的，它会是一个队列，那么这个队列生产者这边使劲往里塞，消费者这边使劲往外拿，但Disruptor的核心是一个环形的buffer。\n* RingBuffer的序号，指向下一个可用的元素\n* 采用数组实现，没有首尾指针对比ConcurrentLinkedQueue，用数组实现的速度更快  \n  假如长度为8，当添加到第12个元素的时候在哪个序号上呢?用12%8  \n  决定当Buffer被填满的时候到底是覆盖还是等待，由Produce决定 长度设为2的n次幂，利于二进制计算，例如:12%8=12&(8-1)\n\n#### 等待策略\n* (常用)BlockingWaitStrategy:通过线程堵塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。\n* BusySpinWaitStrategy:线程一直自旋等待，可能比较耗cpu \n* LiteBlockingWaitStrategy:线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在 signalNeeded.getAndSet，如果两个线程同时访问一个访问waitfor，一个访问signalAll时，可以减少lock加锁次数 \n* LiteTimeoutBlockingWaitStrategy:与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛出异常 \n* PhasedBackoffWaitStrategy:根据时间参数和传入的等待策略来决定使用那种等待策略 \n* TimeoutBlockingWaitStrategy:相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛出异常\n* (常用)YieldingWaitStrategy:尝试100次，然后Thread.yield()让出cpu \n* (常用)SleepingWaitStrategy:sleep\n\n\n","source":"_posts/2020-02-16-thread.md","raw":"---\ntitle: 多线程 - 线程\ndate: 2020-02-16 22:05:29\ntoc: true\ncategories:\n- 技术笔记\ntags: \n- Thread\n---\n线程: 作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程\n### 一、创建线程的几种方式：\n1. 继承Thread，并重写该类的run方法\n<!--more-->\n\n```java\npublic class MyThread extends Thread{\n\n    @Override\n    public void run(){\n        System.out.println(Thread.currentThread().getName()+\" 是继承写法。\");\n    }\n\n    public static void main(String[] args){\n        MyThread thread = new MyThread();\n        thread.setName(\"extends thread\");\n        thread.start();\n    }\n\n}\n```\n\n2. 通过Runnable接口创建线程类,创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\n```java\npublic class MyThread implements Runnable {\n\n    @Override\n    public void run(){\n        System.out.println(Thread.currentThread().getName()+\" 写法。\");\n    }\n\n    public static void main(String[] args){\n        Thread t = new Thread(new MyThread(),\"implements Runnable\");\n        t.start();\n    }\n\n}\n```\n\n3. 通过Callable和Future创建线程\n    - 创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。\n    - 创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。\n    - 使用FutureTask对象作为Thread对象的target创建并启动新线程。\n    - 调用FutureTask对象的get()方法来获得子线程执行结束后的返回值\n```java\npublic class MyCallableThread implements Callable<Integer> {\n\n    @Override\n    public Integer call(){\n        System.out.println(Thread.currentThread().getName()+\" 写法。\");\n        return 1;\n    }\n\n    public static void main(String[] args){\n        FutureTask<Integer> task = new FutureTask<Integer>(new MyCallableThread());\n        new Thread(task,\"implements Callable\").start();\n        try {\n            System.out.println(\"有返回值：\" + task.get());\n        } catch (InterruptedException e){\n            e.printStackTrace();\n        } catch (ExecutionException e){\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```\n\n\n### 二、线程操作的几个方法  \n* start: 启动一个新的线程,start方法必须子线程第一个调用的方法，start不能够重复调用，新线程会调用runnable接口提供的run方法\n* run: run方法是子线程的执行体，子线程从进入run方法开始直至run方法执行接收意味着子线程的任务执行接收， 在主线程直接调用run方法是不能创建子线程，只是普通方法调用\n* sleep: 睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活由睡眠时间而定，等睡眠到规定的时间自动复活.\n* Yield: 就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头，还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管\n* join: 意思就是在自己当前线程加入你调用Join的线程()，本线程等待。等调用的线程运行完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运行完毕继续t1运行(自己join自己没有意义)\n  \nwait() 和 notify() 方法说明几点：\n1. 调用notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中**随机**选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。\n2. 除了notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。\n3. wait()法需要释放锁，所以必须在synchronized中使用，否则会抛出异常 IllegalMonitorStateException\n4. notify()方法也必须在synchronized中使用，并且应该指定对象 \n5. synchronized()、wait()、notify()对象必须一致，一个synchronized()代码块中只能有一个线程调\n\n### 三、线程六种状态  \n1. 初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。\n2. 运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。\n线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。\n3. 阻塞(BLOCKED)：表示线程阻塞于锁。\n4. 等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。\n5. 超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。\n6. 终止(TERMINATED)：表示该线程已经执行完毕。\n![线程状态转换图](https://casparthh.github.io/2020/02/16/thread/status.jpg)\n\n*线程什么状态时候会被挂起?挂起是否也是一个状态?  \nRunning的时候，在一个cpu上会跑很多个线程，cpu会隔一段时间执行这个线程一下，在隔一段时间执行那个线程一下，这个是cpu内部的一个调度，从running扔回去就叫线程被挂起。\n\n### 四、synchronized  \n多个线程去访问同一个资源的时候对这个资源上锁  \n\n* synchronized 使用方法和特性\n    - 在同步代码外嵌套synchronized(Object/Class)\n    - synchronized方法和synchronized(this)执行这段代码它是等值的\n    - 每次都定义个一个锁的对象Object o 把它new出来，那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是 synchronized(this)锁定当前对象就行\n    - 静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象\n    - 类锁和对象锁互不干扰，只有当监视的是同一个class（Class对象）的锁或同一个对象实例的锁才发生互斥\n    - 可重入，一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁\n    - 程序在执行过程中，如果出现异常，默认情况锁会被释放所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适， * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常\n    - 如果锁的是new出来的对象，在某一种特定的不小心的情况下你把o变成了别的对象了，这个时候线程的并发就会出问题。锁是在对象的头上两位来作为代表的，你这线程本来大家都去访问这两位了，结果突然把 这把锁变成别的对象，去访问别的对象的两位了，这俩之间就没有任何关系了。因此，以对象作为锁的 时候不让它发生改变，加final。\n\n### 五、锁升级的概念  \n原来要去找操作系统，要找内核去申请这把锁，到后期做了对 synchronized的一些改进，他的效率比原来要改变了不少，改进的地方。当我们使用synchronized的 时候HotSpot的实现是这样的:  \n上来之后第一个去访问某把锁的线程 比如sync (Object) ，来了之后先在 这个Object的头上面markword记录这个线程。(如果只有第一个线程访问的时候实际上是没有给这个 Object加锁的，在内部实现的时候，只是记录这个线程的ID(偏向锁))。    \n偏向锁如果有线程争用的话，就升级为自旋锁，概念就是(有一个哥们儿在蹲马桶 ，另外来了一个哥 们，他就在旁边儿等着，他不会跑到cpu的就绪队列里去，而就在这等着占用cpu，用一个while的循环 在这儿转圈玩儿， 很多圈之后不行的话就再一次进行升级)。    \n自旋锁转圈十次之后，升级为重量级锁，重量级锁就是去操作系统那里去申请资源。这是一个锁升级的过程。  \n\n### 六、volatile   \n使一个变量在多个线程中可见，保证线程的可见性，同时防止指令重排序。线程可见性在CPU的级别是用缓存一直性来保 证的;禁止指令重排序CPU级别是你禁止不了的，那是人家内部运行的过程，提高效率的。但是在 虚拟机级别你家volatile之后呢，这个指令重排序就可以禁止。严格来讲，还要去深究它的内部的 话，它是加了读屏障和写屏障，这个是CPU的一个原语。  \nA B线程都用到一个变量，java默认是A线程中保留一份copy,这样如果B线程修改了该变量，则A线程未必知道，使用volatile关键字，会让所有线程都会读到变量的修改值  \n并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized  \n\n### 七、CAS 比较和交换（Conmpare And Swap)\n它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。  \n凡是以Atomic开头的都是用CAS这种操作来保证线程安全的这么一些个类。AtomicInteger的意思就是里面包了一个Int类型，这个int类型的自增 count++ 是线程安全的，还有拿值等等是线程安全的，由于我们在工作开发中经常性的有那种需求，一个值所有的线程共同访问它往 上递增 ，所以jdk专门提供了这样的一些类。  \n它的内部调用，就会跑到Unsafe类去(不安全的)，Unsafe中对CAS的实现是C++写的。也就是说AtomicInteger它的内部是调用了 Unsafe这个类里面的方法CompareAndSetI(CAS)。这个比较并且设定的意思是什么呢，我原来想改变某一个值0 ，我想把它变成1，但是其中我想做到线程安全，就只能加锁synchronized ，不然线程就不安全。我现在可以用另外一种操作来替代这把锁，就是cas操作，你可以把它想象成一个方法，这个方法有三个参数，cas(V，Expected，NewValue)。  \nV第一个参数是要改的那个值;Expected第二个参数是期望当前的这个值会是几;NewValue要设定的新值。当前这个线程想改这个值的时候我期望你这值就是0，你不能是个1，如果是1就说明我这值不对，然后想把你变成1。  \n当你判断的时候，发现是我期望的值，还没有进行新值设定的时候值发生了改变怎么办，cas是cpu的原语支持，也就是说cas操作是cpu指令级别上的支持，中间不能被打断。  \n \nABA问题：  \n假如说你有一个值，我拿到这个值是1，想把它变成2，我拿到1用cas操作，期望值是1，准备变成2，这个对象Object，在这个过程中，没有一个线程改过我肯定是可以更改的，但是 如果有一个线程先把这个1变成了2后来又变回1，中间值更改过，它不会影响我这个cas下面操作，这就是ABA问题。 这种问题怎么解决。如果是int类型的，最终值是你期望的，也没有关系，这种没关系可以不去管这个问题。如果你确实想管这个问题可以加版本号，做任何一个值的修改，修改完之后加一，后面检查的时候连带版本号一起检查。  \n\n### 八、Atomic 类  \nAtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的  \n多线程对一个数进行递增方法:\n1. 一个long类型的数，递增的时候我们加锁; \n2. 使用AtomicLong可以让它不断的往上递增;\n3. LongAdder;\n```java\npublic class Incrementer {\n    static Long counter1 = new Long(0L);\n    static AtomicLong counter2 = new AtomicLong(0L);\n    static LongAdder counter3 = new LongAdder();\n    final static Object o = new Object();\n\n    public static void main(String[] args) {\n        \n        //synchronized\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    synchronized (o) {  //去掉锁之后结果就有问题\n                    counter1= counter1+1;\n                    }\n                }\n            }).start();\n        }\n\n        //AtomicLong\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    counter2.incrementAndGet();\n                }\n            }).start();\n        }\n\n        //LongAdder\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    counter3.increment();\n                }\n            }).start();\n        }\n\n\n        try {\n            //简单处理，休眠主线程等上面的计算线程完成。\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        System.out.println(counter1);\n        System.out.println(counter2);\n        System.out.println(counter3);\n\n    }\n}\n```\n\n### 九、基于CAS的一些新类型的锁\n#### 1. RenentrantLock 可重入锁\n* ReentrantLock是可以替代synchronized的,\n* 需要手动枷锁，手动解锁、可以出现多个不同的等待队列\n* ReentrantLock有一些功能还是要比synchronized强大的，强大的地方，你可以使用tryLock进行尝试 锁定，不管锁定与否，方法都将继续执行，synchronized如果搞不定的话他肯定就阻塞了，但是用 ReentrantLock你自己就可以决定你到底要不要wait。\n* 原来写synchronized的地方换 写lock.lock()，加完锁之后需要注意的是记得lock.unlock()解锁，由于synchronized是自动解锁的，大括号执行完就结束了。lock就不行，lock必须得手动解锁，手动解锁一定要写在try...finally里面保证最好一定要解锁，不然的话上锁之后中间执行的过程有问题了，死在那了，别人就永远也拿不到这把锁了。\n* ReentrantLock还可以用lock.lockInterruptibly()这个类，对interrupt()方法做出相应，可以被打断的加锁，如果以这种方式加锁的话我们可以调用一个t2.interrupt(); 打断线程2的等待。\n* ReentrantLock还可以指定为公平锁，公平锁的意思是当我们new一个ReentrantLock你可以传一个参数为true，这个true表示公平锁，公平锁的意思是谁等在前面就先让谁执行，而不是说谁后来了之后就马上让谁执行。如果说这个锁不公平，来了一个线程上来就抢，它是有可能先抢到的。（是否公平锁分别有NonfairSync & FairSync 两个不同的实现）\n* 除了synchronized之外，多数内部都是用的cas。AQS的实际上它内部用的是 park和unpark，也不是全都用的cas,他还是做了一个锁升级的概念，只不过这个锁升级做的比较隐秘， 在等待这个队列的时候如果你拿不到还是进入一个阻塞的状态，前面至少有一个cas的状态，他不像原先就直接进入阻塞状态了。（参考后面的源码阅读部分）\n```java\npublic class ReentrantLockTest {\n    static Integer i = new Integer(0);\n    static ReentrantLock lock = new ReentrantLock();\n\n    public static void main(String[] args) {\n        for (int j = 0; j < 10000; j++) {\n            new Thread(() -> {\n                for (int k = 0; k < 100 ; k++) {\n                    lock.lock();\n                    try {\n                        i++;\n                    } finally {\n                        // 必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁(重要的事情说三遍)\n                        // 使用syn锁定的话如果遇到异常，jvm会手动释放锁，但是lock必须手动释放锁\n                        lock.unlock();\n                    }\n                }\n            }).start();\n        }\n\n        try {\n            //简单处理，休眠主线程等上面的计算线程完成。\n            TimeUnit.SECONDS.sleep(5);\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(i);\n    }\n}\n```\n\n* ReentrantLock 非公平锁原码阅读\n```\n     ReentrantLock lock = new ReentrantLock();\n     lock.lock();  //从断点跟踪\n     \n     public void lock() {\n         sync.acquire(1);\n     }\n     \n     public final void acquire(int arg) {\n         if (!tryAcquire(arg) &&\n             acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n             selfInterrupt();\n     }\n     \n     final boolean nonfairTryAcquire(int acquires) {\n         final Thread current = Thread.currentThread();\n         int c = getState(); //the current value of synchronization state.\n         if (c == 0) {\n            //如果当前对象没有锁，直接设置一个排它锁\n             if (compareAndSetState(0, acquires)) {\n                 setExclusiveOwnerThread(current);\n                 return true;\n             }\n         }\n         else if (current == getExclusiveOwnerThread()) {\n            // 如果当前持有锁的是同一个线程，则设置为可重入\n             int nextc = c + acquires;\n             if (nextc < 0) // overflow\n                 throw new Error(\"Maximum lock count exceeded\");\n             setState(nextc);\n             return true;\n         }\n         return false; //没拿到锁，返回fallse\n     }\n     \n     \n    \n     private Node addWaiter(Node mode) {\n         //mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared, \n         //now 一个共享锁或排它锁节点\n         Node node = new Node(mode);  \n        \n         //取出队列中最后一个节点，设置为该新节点的上一个节点。并返回新节点。\n         //如果最后一个节点为空，初使化一个同步队列\n         for (;;) {\n             Node oldTail = tail;\n             if (oldTail != null) {\n                 node.setPrevRelaxed(oldTail);\n                 if (compareAndSetTail(oldTail, node)) {\n                     oldTail.next = node;\n                     return node;\n                 }\n             } else {\n                 initializeSyncQueue();\n             }\n         }\n    }\n    \n    final boolean acquireQueued(final Node node, int arg) {\n        boolean interrupted = false;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                //取出前面新new 节点，判断上一个节点，是不是头部节点，如果是的话，直接再次尝试拿锁。\n                //如果拿锁成功，那新节点，就是头部节点\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    return interrupted;\n                }\n                //判断是否继续自旋拿锁，还是park\n                if (shouldParkAfterFailedAcquire(p, node))\n                    interrupted |= parkAndCheckInterrupt();\n            }\n        } catch (Throwable t) {\n            cancelAcquire(node);\n            if (interrupted)\n                selfInterrupt();\n            throw t;\n        }\n    }\n \n```\n\n#### 2.CountDownLatch  \n倒数，Latch是门栓的意思(倒数的一个门栓，5、4、3、2、1数到了，我这个门栓就开 了)\n刚前面的递增方法，用的休眠主线程等计算线程完成后，再打印结果，这并不好，我们用CountDownLatch 改造下：\n```java\npublic class Incrementer {\n    \n    static Long counter1 = Long.valueOf(0);\n    static CountDownLatch latch = new CountDownLatch(10000);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 100; j++) {\n                    synchronized (Incrementer.class) {  //去掉锁之后结果就有问题\n                        counter1++;\n                        latch.countDown();\n                    }\n                    try {\n                        TimeUnit.MILLISECONDS.sleep(10);\n                        //添加休眠，方便对比结果。\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n\n        System.out.println(\"创建线程完成,等待结果。\");\n        try {\n            latch.await(); //这里会阻塞住，等latch 倒数到0的时候，才会继续执行\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(counter1);\n    }\n}\n```\n\n#### 3. CyclicBarrier  \n循环栅栏，这有一个栅栏，什么时候人满了就把栅栏推倒， 哗啦哗啦的都放出去，出去之后扎栅栏又重新起来，再来人，满了，推倒之后又继续。\n```java\npublic class BusDispatcher {\n\n    static CountDownLatch latch = new CountDownLatch(100);\n    static volatile int num = 0;\n    static CyclicBarrier barrier = new CyclicBarrier(10, ()->{\n        System.out.println(Thread.currentThread().getName()+\" - 人满了发车。。。。。\");\n    });\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100; i++) {\n            new Thread(()->{\n                try {\n                    System.out.println(\"第\"+(++num)+\"个人上车\");\n                    latch.countDown();\n                    barrier.await();\n                } catch (InterruptedException e){\n                    e.printStackTrace();\n                } catch (BrokenBarrierException e){\n                    e.printStackTrace();\n                }\n            }).start();\n        }\n        try {\n            latch.await();\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        System.out.println(\"人车调度任务完成。\");\n    }\n}\n```\n\n#### 4. Phaser  \nPhaser它就更像是结合了CountDownLatch和CyclicBarrier，翻译一下叫阶段。  \nPhaser是按照不同的阶段来对线程进行执行，就是它本身是维护着一个阶段这样的一个成员变量，当前 我是执行到那个阶段，是第0个，还是第1个阶段啊等等，每个阶段不同的时候这个线程都可以往前走， 有的线程走到某个阶段就停了，有的线程一直会走到结束。你的程序中如果说用到分好几个阶段执行 ， 而且有的人必须得几个人共同参与的一种情形的情况下可能会用到这个Phaser。  \n```java\npublic class PhaserTest {\n\n    static GamePhaser phaser = new GamePhaser(3);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            new Thread(() -> {\n                sleepSeconds(1);\n                System.out.println(Thread.currentThread().getName()+\" 到\");\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第一个游戏。。。\");\n                sleepSeconds(2);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第二个游戏。。。\");\n                sleepSeconds(3);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第三个游戏。。。\");\n                sleepSeconds(4);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"玩第四个游戏。。。\");\n                sleepSeconds(5);\n                phaser.arriveAndAwaitAdvance();\n\n                System.out.println(Thread.currentThread().getName()+\"准备离开。。。\");\n                sleepSeconds(2);\n                phaser.arriveAndAwaitAdvance();\n            },\"00\"+(i+1)).start();\n        }\n    }\n\n    private static void sleepSeconds(int seconds) {\n        try {\n            TimeUnit.SECONDS.sleep(seconds);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    static class GamePhaser extends Phaser {\n\n        public GamePhaser(int parties) {\n            super(parties);\n        }\n\n        /**\n         * @param phase             第几个阶段，\n         * @param registeredParties 当前有多少线程参与\n         * @return if this phaser should terminate, 是否要结束phaser\n         */\n        @Override\n        protected boolean onAdvance(int phase, int registeredParties) {\n            switch (phase) {\n                case 0:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"人到齐了开始玩第一个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 1:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"开始玩第二个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 2:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"开始玩第三个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 3:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"开始玩第四个游戏^-^\");\n                    System.out.println(\"\");\n                    return false;\n                case 4:\n                    System.out.println(\"registeredParties:\" + registeredParties);\n                    System.out.println(\"完成第\" + phase + \"阶段， 当前时间(秒)\" + System.currentTimeMillis() / 1000);\n                    System.out.println(\"游戏结束了，谢谢参与 ^-^\");\n                    System.out.println(\"\");\n                    return true;\n                default:\n                    return true;\n            }\n        }\n    }\n}\n```\n\n#### 5. ReadWriteLock\n这个ReadWriteLock 是读写锁。读写锁的概念其实就是共享锁和排他锁，读锁就是共享锁，写锁就是排他锁。  \n```java\npublic class ReadWriteLockTest {\n\n    static ReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n    static Lock readLock = readWriteLock.readLock();\n    static Lock writeLock = readWriteLock.writeLock();\n\n    static int value = 0;\n\n    public static void main(String[] arges){\n        for (int i = 0; i < 10; i++) {\n            //读线程不用阻塞，可以并发完成工作\n            new Thread(()->{\n                readLock.lock();\n                try {\n                    ReadWriteLockTest.read();\n                } finally {\n                    //记得Reentrant\n                    readLock.unlock();\n                }\n            }).start();\n        }\n\n        //写线程会阻塞，需要排序完成任务\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                writeLock.lock();\n                try {\n                    ReadWriteLockTest.write(1);\n                } finally {\n                    writeLock.unlock();\n                }\n            }).start();\n        }\n    }\n\n    public static void read(){\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e){\n          e.printStackTrace();\n        }\n        System.out.println(\"read value =\" + value);\n    }\n\n    public static void write(int num){\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e){\n            e.printStackTrace();\n        }\n        value += num;\n        System.out.println(\"write value =\" + value);\n    }\n\n}\n```\n\n#### 6. Semaphore\nSemaphore 含义就是限流，比如说流水线人不能全去上洗手间吧，所以得限制，每个上洗手间的人必须要领到洗手卡才能去，没有卡的人得等着前面的人回来，并归还了卡。\n默认Semaphore是非公平的，new Semaphore(2, true)第二个值传true才是设置公平  \n```java\npublic class SemaphoreTest {\n\n    //定义限制数量\n    static Semaphore semaphore = new Semaphore(2, true);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            new Thread(()->{\n                try {\n                    System.out.println(Thread.currentThread().getName()+\"想上厕所,排队领洗手卡。。。\");\n                    semaphore.acquire(1);\n                    System.out.println(\"时间（秒）:\"+System.currentTimeMillis()/1000+\"，\"+Thread.currentThread().getName()+\"等到洗手卡了，上厕所ing。。。\");\n                    TimeUnit.SECONDS.sleep(4);\n                }catch (InterruptedException e){\n                    e.printStackTrace();\n                } finally {\n                    //用完了一定要记得归还release, 不然后边的人就没得用了。\n                    semaphore.release(1);\n                }\n            },\"姓名\"+(1+i)).start();\n\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            }catch (InterruptedException e){\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n#### 7. Exchanger\n交换器，俩人之间互相交换个数据用的，这里收到的消息得是成对的，否则 Exchanger 一直在等待有人来交换。\n```java\npublic class ExchangerTest {\n\n    static Exchanger<String> exchanger = new Exchanger<String>();\n\n    public static void main(String[] args) {\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 001\").start();\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 002\").start();\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 003\").start();\n\n        new Thread(() -> {\n            try {\n                String contents = exchanger.exchange(Thread.currentThread().getName());\n                System.out.println(Thread.currentThread().getName() + \" 收到消息：\" + contents);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"thread 004\").start();\n    }\n}\n```\n\n### 十、LockSuport\n*在JDK1.6中的java.util.concurrent的子包locks中引了LockSupport这个API，LockSupport是一个比较底层的工具类，用来创建锁和其他同步工具类的基本线程阻塞原语。java锁和同步器框架的核心 AQS: AbstractQueuedSynchronizer，就是通过调用 LockSupport.park()和 LockSupport.unpark()的方法，来实现线程的阻塞和唤醒的。\n\nLockSuport的几个特点\n1. LockSupport不需要synchornized加锁就可以实现线程的阻塞和唤醒 \n2. LockSupport.unpartk()可以先于LockSupport.park()执行，并且线程不会阻塞 \n3. 如果一个线程处于等待状态，连续调用了两次park()方法，就会使该线程永远无法被唤醒\n4. park()和unpark()方法的实现是由Unsefa类提供的，而Unsefa类是由C和C++语言完成的，它主要通过一个变量作为一个标识，变量值在0，1之间来回切换，当这个变量大于0的时候线程就获得了“令牌”，其实park()和unpark()方法就是在改变这个变量的值，来达到线程的阻塞和唤醒的\n```java\n// LockSuport 要求用线程顺序打印A1B2C3....Z26\npublic class PrintFactory {\n\n    static char[] letters = {'a', 'b', 'c', 'd', 'e', 'f', 'g'};\n    static int[] nums = {1, 2, 3, 4, 5, 6, 7};\n    static Thread letterPrinter = new Thread(LetterThread::print);\n    static Thread numPrinter = new Thread(NumThread::print);\n\n    public static void main(String[] args) {\n        letterPrinter.start();\n        numPrinter.start();\n    }\n\n\n    static class LetterThread {\n        public static void print() {\n            for (int i = 0; i < letters.length; i++) {\n                System.out.print(letters[i]);\n                LockSupport.unpark(numPrinter);\n                if(i < letters.length -1){\n                    LockSupport.park();\n                }\n\n            }\n        }\n    }\n\n    static class NumThread {\n        public static void print() {\n            LockSupport.park();\n            for (int i = 0; i < nums.length; i++) {\n                System.out.print(nums[i]);\n                LockSupport.unpark(letterPrinter);\n                if(i < letters.length -1){\n                    LockSupport.park();\n                }\n            }\n        }\n    }\n\n}\n```\n\n### 十一、Java的四种引用 强、软、弱、虚\n* 比如Object o = new Object()，这就是普通的引用，也就是强引用，只要有一个应用指向这个对象，那么垃圾回收器一定不会回收它。\n* 软引用 SoftReference<byte[]> m = new SoftReference<>(new byte[1024102410])   \n  当有一个对象(字节数组)被一个软引用所指向的时候，只有系统内存不够 用的时候，才会回收它(字节数组)\n* 弱引用 WeakReference m = new WeakReference<>(new M())\n  只要遭遇到gc就会回收\n* 虚引用 PhantomReference<M> phantomReference = new PhantomReference<>(new M(), QUEUE);\n  对于虚引用它就干一件事，它就是管理堆外内存的， \n  首先第一点，这个虚引用的构造方法至少都是两个参数的， \n  第二个参数还必须是一个队列，这个虚引用基本没用，就是说不是给你用的，那么它是给谁用的呢?是给写JVM(虚拟机)的人用的  \n\n### 十二、JMH\nJMH -java Microbenchmark Harness\n微基准测试，它是测的某一个方法的性能。支持命令行或IDEA开发工具运行，idea运行需要添加插件。直接在Idea插件查找JMH安装。安装好后就可以像Junit一样写测试。\n官网 http://openjdk.java.net/projects/code-tools/jmh/\nMaven 引用：\n```xml\n<!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core -->\n<dependency>\n    <groupId>org.openjdk.jmh</groupId>\n    <artifactId>jmh-core</artifactId>\n    <version>1.21</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess -->\n<dependency>\n    <groupId>org.openjdk.jmh</groupId>\n    <artifactId>jmh-generator-annprocess</artifactId>\n    <version>1.21</version>\n    <scope>test</scope>\n</dependency>\n```\n使用示例,代码写在test目录下，类似junit测试：\n```\n@Benchmark\n@Warmup(iteration=1, time=3)  //在专业测试里面首先要进行预热，预热多少次，预热多少时间\n@Fork(5)  //用多少个线程去执行我们的程序 \n@BenchmarkMode(Mode.Throughput)  //是对基准测试的一个模式，这个模式用的最多的是 Throughput吞吐量\n@Measurement(iteration=1, time=3) //是整个测试要测试多少遍，调用这个方法要调用多少次\npublic void test() {\n    //.... 调用测试方法\n}\n```\n\n### 十三、Disrupter\n主页：http://lmax-exchange.github.io/disruptor/\n\n源码：https://github.com/LMAX-Exchange/disruptor\n\nGettingStarted: https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started\n\napi: http://lmax-exchange.github.io/disruptor/docs/index.html\n\nmaven: https://mvnrepository.com/artifact/com.lmax/disruptor\n\nifeve：http://ifeve.com/disruptor/\n\nDisruptor 开源的并发框架，并获得2011 Duke’s 程序框架创新奖，能够在无锁的情况下实现网络的Queue并发操作。\n* 如果把它用作MQ的话，**单机**最快的MQ，性能非常的高，主要是它里 用的全都是CAS, 另外把各种各样的性能开发到了极致。\n* Disruptor就是在内存里，Disruptor简单理解就是内存里用于存放元素的一个高效率的队列。\n* Disruptor叫无锁、高并发、环形Buffer，直接覆盖(不用清除)旧的数据，降低GC频率，用于生产者消费者模式\n* RingBuffer是一个环形队列，和其他队列不一样的是他是一个环形队列，环形的Buffer。一般情况下我们的容器是一个队列，不管你是用链表实现还是用数组实现的，它会是一个队列，那么这个队列生产者这边使劲往里塞，消费者这边使劲往外拿，但Disruptor的核心是一个环形的buffer。\n* RingBuffer的序号，指向下一个可用的元素\n* 采用数组实现，没有首尾指针对比ConcurrentLinkedQueue，用数组实现的速度更快  \n  假如长度为8，当添加到第12个元素的时候在哪个序号上呢?用12%8  \n  决定当Buffer被填满的时候到底是覆盖还是等待，由Produce决定 长度设为2的n次幂，利于二进制计算，例如:12%8=12&(8-1)\n\n#### 等待策略\n* (常用)BlockingWaitStrategy:通过线程堵塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。\n* BusySpinWaitStrategy:线程一直自旋等待，可能比较耗cpu \n* LiteBlockingWaitStrategy:线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在 signalNeeded.getAndSet，如果两个线程同时访问一个访问waitfor，一个访问signalAll时，可以减少lock加锁次数 \n* LiteTimeoutBlockingWaitStrategy:与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛出异常 \n* PhasedBackoffWaitStrategy:根据时间参数和传入的等待策略来决定使用那种等待策略 \n* TimeoutBlockingWaitStrategy:相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛出异常\n* (常用)YieldingWaitStrategy:尝试100次，然后Thread.yield()让出cpu \n* (常用)SleepingWaitStrategy:sleep\n\n\n","slug":"thread","published":1,"updated":"2020-03-02T23:44:53.201Z","_id":"ck6ztaqua00065xc9627o43h0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>线程: 作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程</p>\n<h3 id=\"一、创建线程的几种方式：\"><a href=\"#一、创建线程的几种方式：\" class=\"headerlink\" title=\"一、创建线程的几种方式：\"></a>一、创建线程的几种方式：</h3><ol>\n<li>继承Thread，并重写该类的run方法<a id=\"more\"></a>\n\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 是继承写法。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.setName(<span class=\"string\">\"extends thread\"</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>通过Runnable接口创建线程类,创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 写法。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThread(),<span class=\"string\">\"implements Runnable\"</span>);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过Callable和Future创建线程</p>\n<ul>\n<li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</li>\n<li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li>\n<li>使用FutureTask对象作为Thread对象的target创建并启动新线程。</li>\n<li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCallableThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 写法。\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> FutureTask&lt;Integer&gt;(<span class=\"keyword\">new</span> MyCallableThread());</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(task,<span class=\"string\">\"implements Callable\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"有返回值：\"</span> + task.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、线程操作的几个方法\"><a href=\"#二、线程操作的几个方法\" class=\"headerlink\" title=\"二、线程操作的几个方法\"></a>二、线程操作的几个方法</h3><ul>\n<li>start: 启动一个新的线程,start方法必须子线程第一个调用的方法，start不能够重复调用，新线程会调用runnable接口提供的run方法</li>\n<li>run: run方法是子线程的执行体，子线程从进入run方法开始直至run方法执行接收意味着子线程的任务执行接收， 在主线程直接调用run方法是不能创建子线程，只是普通方法调用</li>\n<li>sleep: 睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活由睡眠时间而定，等睡眠到规定的时间自动复活.</li>\n<li>Yield: 就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头，还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管</li>\n<li>join: 意思就是在自己当前线程加入你调用Join的线程()，本线程等待。等调用的线程运行完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运行完毕继续t1运行(自己join自己没有意义)</li>\n</ul>\n<p>wait() 和 notify() 方法说明几点：</p>\n<ol>\n<li>调用notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中<strong>随机</strong>选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</li>\n<li>除了notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</li>\n<li>wait()法需要释放锁，所以必须在synchronized中使用，否则会抛出异常 IllegalMonitorStateException</li>\n<li>notify()方法也必须在synchronized中使用，并且应该指定对象 </li>\n<li>synchronized()、wait()、notify()对象必须一致，一个synchronized()代码块中只能有一个线程调</li>\n</ol>\n<h3 id=\"三、线程六种状态\"><a href=\"#三、线程六种状态\" class=\"headerlink\" title=\"三、线程六种状态\"></a>三、线程六种状态</h3><ol>\n<li>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li>\n<li>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</li>\n<li>阻塞(BLOCKED)：表示线程阻塞于锁。</li>\n<li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li>\n<li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li>\n<li>终止(TERMINATED)：表示该线程已经执行完毕。<br><img src=\"https://casparthh.github.io/2020/02/16/thread/status.jpg\" alt=\"线程状态转换图\"></li>\n</ol>\n<p>*线程什么状态时候会被挂起?挂起是否也是一个状态?<br>Running的时候，在一个cpu上会跑很多个线程，cpu会隔一段时间执行这个线程一下，在隔一段时间执行那个线程一下，这个是cpu内部的一个调度，从running扔回去就叫线程被挂起。</p>\n<h3 id=\"四、synchronized\"><a href=\"#四、synchronized\" class=\"headerlink\" title=\"四、synchronized\"></a>四、synchronized</h3><p>多个线程去访问同一个资源的时候对这个资源上锁  </p>\n<ul>\n<li>synchronized 使用方法和特性<ul>\n<li>在同步代码外嵌套synchronized(Object/Class)</li>\n<li>synchronized方法和synchronized(this)执行这段代码它是等值的</li>\n<li>每次都定义个一个锁的对象Object o 把它new出来，那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是 synchronized(this)锁定当前对象就行</li>\n<li>静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象</li>\n<li>类锁和对象锁互不干扰，只有当监视的是同一个class（Class对象）的锁或同一个对象实例的锁才发生互斥</li>\n<li>可重入，一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁</li>\n<li>程序在执行过程中，如果出现异常，默认情况锁会被释放所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适， * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常</li>\n<li>如果锁的是new出来的对象，在某一种特定的不小心的情况下你把o变成了别的对象了，这个时候线程的并发就会出问题。锁是在对象的头上两位来作为代表的，你这线程本来大家都去访问这两位了，结果突然把 这把锁变成别的对象，去访问别的对象的两位了，这俩之间就没有任何关系了。因此，以对象作为锁的 时候不让它发生改变，加final。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、锁升级的概念\"><a href=\"#五、锁升级的概念\" class=\"headerlink\" title=\"五、锁升级的概念\"></a>五、锁升级的概念</h3><p>原来要去找操作系统，要找内核去申请这把锁，到后期做了对 synchronized的一些改进，他的效率比原来要改变了不少，改进的地方。当我们使用synchronized的 时候HotSpot的实现是这样的:<br>上来之后第一个去访问某把锁的线程 比如sync (Object) ，来了之后先在 这个Object的头上面markword记录这个线程。(如果只有第一个线程访问的时候实际上是没有给这个 Object加锁的，在内部实现的时候，只是记录这个线程的ID(偏向锁))。<br>偏向锁如果有线程争用的话，就升级为自旋锁，概念就是(有一个哥们儿在蹲马桶 ，另外来了一个哥 们，他就在旁边儿等着，他不会跑到cpu的就绪队列里去，而就在这等着占用cpu，用一个while的循环 在这儿转圈玩儿， 很多圈之后不行的话就再一次进行升级)。<br>自旋锁转圈十次之后，升级为重量级锁，重量级锁就是去操作系统那里去申请资源。这是一个锁升级的过程。  </p>\n<h3 id=\"六、volatile\"><a href=\"#六、volatile\" class=\"headerlink\" title=\"六、volatile\"></a>六、volatile</h3><p>使一个变量在多个线程中可见，保证线程的可见性，同时防止指令重排序。线程可见性在CPU的级别是用缓存一直性来保 证的;禁止指令重排序CPU级别是你禁止不了的，那是人家内部运行的过程，提高效率的。但是在 虚拟机级别你家volatile之后呢，这个指令重排序就可以禁止。严格来讲，还要去深究它的内部的 话，它是加了读屏障和写屏障，这个是CPU的一个原语。<br>A B线程都用到一个变量，java默认是A线程中保留一份copy,这样如果B线程修改了该变量，则A线程未必知道，使用volatile关键字，会让所有线程都会读到变量的修改值<br>并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized  </p>\n<h3 id=\"七、CAS-比较和交换（Conmpare-And-Swap\"><a href=\"#七、CAS-比较和交换（Conmpare-And-Swap\" class=\"headerlink\" title=\"七、CAS 比较和交换（Conmpare And Swap)\"></a>七、CAS 比较和交换（Conmpare And Swap)</h3><p>它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。<br>凡是以Atomic开头的都是用CAS这种操作来保证线程安全的这么一些个类。AtomicInteger的意思就是里面包了一个Int类型，这个int类型的自增 count++ 是线程安全的，还有拿值等等是线程安全的，由于我们在工作开发中经常性的有那种需求，一个值所有的线程共同访问它往 上递增 ，所以jdk专门提供了这样的一些类。<br>它的内部调用，就会跑到Unsafe类去(不安全的)，Unsafe中对CAS的实现是C++写的。也就是说AtomicInteger它的内部是调用了 Unsafe这个类里面的方法CompareAndSetI(CAS)。这个比较并且设定的意思是什么呢，我原来想改变某一个值0 ，我想把它变成1，但是其中我想做到线程安全，就只能加锁synchronized ，不然线程就不安全。我现在可以用另外一种操作来替代这把锁，就是cas操作，你可以把它想象成一个方法，这个方法有三个参数，cas(V，Expected，NewValue)。<br>V第一个参数是要改的那个值;Expected第二个参数是期望当前的这个值会是几;NewValue要设定的新值。当前这个线程想改这个值的时候我期望你这值就是0，你不能是个1，如果是1就说明我这值不对，然后想把你变成1。<br>当你判断的时候，发现是我期望的值，还没有进行新值设定的时候值发生了改变怎么办，cas是cpu的原语支持，也就是说cas操作是cpu指令级别上的支持，中间不能被打断。  </p>\n<p>ABA问题：<br>假如说你有一个值，我拿到这个值是1，想把它变成2，我拿到1用cas操作，期望值是1，准备变成2，这个对象Object，在这个过程中，没有一个线程改过我肯定是可以更改的，但是 如果有一个线程先把这个1变成了2后来又变回1，中间值更改过，它不会影响我这个cas下面操作，这就是ABA问题。 这种问题怎么解决。如果是int类型的，最终值是你期望的，也没有关系，这种没关系可以不去管这个问题。如果你确实想管这个问题可以加版本号，做任何一个值的修改，修改完之后加一，后面检查的时候连带版本号一起检查。  </p>\n<h3 id=\"八、Atomic-类\"><a href=\"#八、Atomic-类\" class=\"headerlink\" title=\"八、Atomic 类\"></a>八、Atomic 类</h3><p>AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的<br>多线程对一个数进行递增方法:</p>\n<ol>\n<li>一个long类型的数，递增的时候我们加锁; </li>\n<li>使用AtomicLong可以让它不断的往上递增;</li>\n<li>LongAdder;<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Incrementer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Long counter1 = <span class=\"keyword\">new</span> Long(<span class=\"number\">0L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> AtomicLong counter2 = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> LongAdder counter3 = <span class=\"keyword\">new</span> LongAdder();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//synchronized</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (o) &#123;  <span class=\"comment\">//去掉锁之后结果就有问题</span></span><br><span class=\"line\">                    counter1= counter1+<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//AtomicLong</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    counter2.incrementAndGet();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//LongAdder</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    counter3.increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//简单处理，休眠主线程等上面的计算线程完成。</span></span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(counter1);</span><br><span class=\"line\">        System.out.println(counter2);</span><br><span class=\"line\">        System.out.println(counter3);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"九、基于CAS的一些新类型的锁\"><a href=\"#九、基于CAS的一些新类型的锁\" class=\"headerlink\" title=\"九、基于CAS的一些新类型的锁\"></a>九、基于CAS的一些新类型的锁</h3><h4 id=\"1-RenentrantLock-可重入锁\"><a href=\"#1-RenentrantLock-可重入锁\" class=\"headerlink\" title=\"1. RenentrantLock 可重入锁\"></a>1. RenentrantLock 可重入锁</h4><ul>\n<li><p>ReentrantLock是可以替代synchronized的,</p>\n</li>\n<li><p>需要手动枷锁，手动解锁、可以出现多个不同的等待队列</p>\n</li>\n<li><p>ReentrantLock有一些功能还是要比synchronized强大的，强大的地方，你可以使用tryLock进行尝试 锁定，不管锁定与否，方法都将继续执行，synchronized如果搞不定的话他肯定就阻塞了，但是用 ReentrantLock你自己就可以决定你到底要不要wait。</p>\n</li>\n<li><p>原来写synchronized的地方换 写lock.lock()，加完锁之后需要注意的是记得lock.unlock()解锁，由于synchronized是自动解锁的，大括号执行完就结束了。lock就不行，lock必须得手动解锁，手动解锁一定要写在try…finally里面保证最好一定要解锁，不然的话上锁之后中间执行的过程有问题了，死在那了，别人就永远也拿不到这把锁了。</p>\n</li>\n<li><p>ReentrantLock还可以用lock.lockInterruptibly()这个类，对interrupt()方法做出相应，可以被打断的加锁，如果以这种方式加锁的话我们可以调用一个t2.interrupt(); 打断线程2的等待。</p>\n</li>\n<li><p>ReentrantLock还可以指定为公平锁，公平锁的意思是当我们new一个ReentrantLock你可以传一个参数为true，这个true表示公平锁，公平锁的意思是谁等在前面就先让谁执行，而不是说谁后来了之后就马上让谁执行。如果说这个锁不公平，来了一个线程上来就抢，它是有可能先抢到的。（是否公平锁分别有NonfairSync &amp; FairSync 两个不同的实现）</p>\n</li>\n<li><p>除了synchronized之外，多数内部都是用的cas。AQS的实际上它内部用的是 park和unpark，也不是全都用的cas,他还是做了一个锁升级的概念，只不过这个锁升级做的比较隐秘， 在等待这个队列的时候如果你拿不到还是进入一个阻塞的状态，前面至少有一个cas的状态，他不像原先就直接进入阻塞状态了。（参考后面的源码阅读部分）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Integer i = <span class=\"keyword\">new</span> Integer(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10000</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">100</span> ; k++) &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁(重要的事情说三遍)</span></span><br><span class=\"line\">                        <span class=\"comment\">// 使用syn锁定的话如果遇到异常，jvm会手动释放锁，但是lock必须手动释放锁</span></span><br><span class=\"line\">                        lock.unlock();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//简单处理，休眠主线程等上面的计算线程完成。</span></span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReentrantLock 非公平锁原码阅读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ReentrantLock lock &#x3D; new ReentrantLock();</span><br><span class=\"line\"> lock.lock();  &#x2F;&#x2F;从断点跟踪</span><br><span class=\"line\"> </span><br><span class=\"line\"> public void lock() &#123;</span><br><span class=\"line\">     sync.acquire(1);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> public final void acquire(int arg) &#123;</span><br><span class=\"line\">     if (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">         selfInterrupt();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class=\"line\">     final Thread current &#x3D; Thread.currentThread();</span><br><span class=\"line\">     int c &#x3D; getState(); &#x2F;&#x2F;the current value of synchronization state.</span><br><span class=\"line\">     if (c &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;如果当前对象没有锁，直接设置一个排它锁</span><br><span class=\"line\">         if (compareAndSetState(0, acquires)) &#123;</span><br><span class=\"line\">             setExclusiveOwnerThread(current);</span><br><span class=\"line\">             return true;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     else if (current &#x3D;&#x3D; getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 如果当前持有锁的是同一个线程，则设置为可重入</span><br><span class=\"line\">         int nextc &#x3D; c + acquires;</span><br><span class=\"line\">         if (nextc &lt; 0) &#x2F;&#x2F; overflow</span><br><span class=\"line\">             throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class=\"line\">         setState(nextc);</span><br><span class=\"line\">         return true;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return false; &#x2F;&#x2F;没拿到锁，返回fallse</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> private Node addWaiter(Node mode) &#123;</span><br><span class=\"line\">     &#x2F;&#x2F;mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared, </span><br><span class=\"line\">     &#x2F;&#x2F;now 一个共享锁或排它锁节点</span><br><span class=\"line\">     Node node &#x3D; new Node(mode);  </span><br><span class=\"line\">    </span><br><span class=\"line\">     &#x2F;&#x2F;取出队列中最后一个节点，设置为该新节点的上一个节点。并返回新节点。</span><br><span class=\"line\">     &#x2F;&#x2F;如果最后一个节点为空，初使化一个同步队列</span><br><span class=\"line\">     for (;;) &#123;</span><br><span class=\"line\">         Node oldTail &#x3D; tail;</span><br><span class=\"line\">         if (oldTail !&#x3D; null) &#123;</span><br><span class=\"line\">             node.setPrevRelaxed(oldTail);</span><br><span class=\"line\">             if (compareAndSetTail(oldTail, node)) &#123;</span><br><span class=\"line\">                 oldTail.next &#x3D; node;</span><br><span class=\"line\">                 return node;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; else &#123;</span><br><span class=\"line\">             initializeSyncQueue();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class=\"line\">    boolean interrupted &#x3D; false;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        for (;;) &#123;</span><br><span class=\"line\">            final Node p &#x3D; node.predecessor();</span><br><span class=\"line\">            &#x2F;&#x2F;取出前面新new 节点，判断上一个节点，是不是头部节点，如果是的话，直接再次尝试拿锁。</span><br><span class=\"line\">            &#x2F;&#x2F;如果拿锁成功，那新节点，就是头部节点</span><br><span class=\"line\">            if (p &#x3D;&#x3D; head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next &#x3D; null; &#x2F;&#x2F; help GC</span><br><span class=\"line\">                return interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;判断是否继续自旋拿锁，还是park</span><br><span class=\"line\">            if (shouldParkAfterFailedAcquire(p, node))</span><br><span class=\"line\">                interrupted |&#x3D; parkAndCheckInterrupt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">        cancelAcquire(node);</span><br><span class=\"line\">        if (interrupted)</span><br><span class=\"line\">            selfInterrupt();</span><br><span class=\"line\">        throw t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"2-CountDownLatch\"><a href=\"#2-CountDownLatch\" class=\"headerlink\" title=\"2.CountDownLatch\"></a>2.CountDownLatch</h4><p>倒数，Latch是门栓的意思(倒数的一个门栓，5、4、3、2、1数到了，我这个门栓就开 了)<br>刚前面的递增方法，用的休眠主线程等计算线程完成后，再打印结果，这并不好，我们用CountDownLatch 改造下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Incrementer</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> Long counter1 = Long.valueOf(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (Incrementer<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;  <span class=\"comment\">//去掉锁之后结果就有问题</span></span><br><span class=\"line\">                        counter1++;</span><br><span class=\"line\">                        latch.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//添加休眠，方便对比结果。</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建线程完成,等待结果。\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            latch.await(); <span class=\"comment\">//这里会阻塞住，等latch 倒数到0的时候，才会继续执行</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(counter1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-CyclicBarrier\"><a href=\"#3-CyclicBarrier\" class=\"headerlink\" title=\"3. CyclicBarrier\"></a>3. CyclicBarrier</h4><p>循环栅栏，这有一个栅栏，什么时候人满了就把栅栏推倒， 哗啦哗啦的都放出去，出去之后扎栅栏又重新起来，再来人，满了，推倒之后又继续。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusDispatcher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">10</span>, ()-&gt;&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" - 人满了发车。。。。。\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"第\"</span>+(++num)+<span class=\"string\">\"个人上车\"</span>);</span><br><span class=\"line\">                    latch.countDown();</span><br><span class=\"line\">                    barrier.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            latch.await();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"人车调度任务完成。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Phaser\"><a href=\"#4-Phaser\" class=\"headerlink\" title=\"4. Phaser\"></a>4. Phaser</h4><p>Phaser它就更像是结合了CountDownLatch和CyclicBarrier，翻译一下叫阶段。<br>Phaser是按照不同的阶段来对线程进行执行，就是它本身是维护着一个阶段这样的一个成员变量，当前 我是执行到那个阶段，是第0个，还是第1个阶段啊等等，每个阶段不同的时候这个线程都可以往前走， 有的线程走到某个阶段就停了，有的线程一直会走到结束。你的程序中如果说用到分好几个阶段执行 ， 而且有的人必须得几个人共同参与的一种情形的情况下可能会用到这个Phaser。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhaserTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> GamePhaser phaser = <span class=\"keyword\">new</span> GamePhaser(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 到\"</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第一个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">2</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第二个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">3</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第三个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">4</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第四个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">5</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"准备离开。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">2</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"00\"</span>+(i+<span class=\"number\">1</span>)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleepSeconds</span><span class=\"params\">(<span class=\"keyword\">int</span> seconds)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePhaser</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phaser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePhaser</span><span class=\"params\">(<span class=\"keyword\">int</span> parties)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(parties);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> phase             第几个阶段，</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> registeredParties 当前有多少线程参与</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> if this phaser should terminate, 是否要结束phaser</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onAdvance</span><span class=\"params\">(<span class=\"keyword\">int</span> phase, <span class=\"keyword\">int</span> registeredParties)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (phase) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"人到齐了开始玩第一个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"开始玩第二个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"开始玩第三个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"开始玩第四个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"游戏结束了，谢谢参与 ^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-ReadWriteLock\"><a href=\"#5-ReadWriteLock\" class=\"headerlink\" title=\"5. ReadWriteLock\"></a>5. ReadWriteLock</h4><p>这个ReadWriteLock 是读写锁。读写锁的概念其实就是共享锁和排他锁，读锁就是共享锁，写锁就是排他锁。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadWriteLockTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> ReadWriteLock readWriteLock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Lock readLock = readWriteLock.readLock();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arges)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//读线程不用阻塞，可以并发完成工作</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                readLock.lock();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ReadWriteLockTest.read();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//记得Reentrant</span></span><br><span class=\"line\">                    readLock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//写线程会阻塞，需要排序完成任务</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                writeLock.lock();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ReadWriteLockTest.write(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    writeLock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"read value =\"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value += num;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"write value =\"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Semaphore\"><a href=\"#6-Semaphore\" class=\"headerlink\" title=\"6. Semaphore\"></a>6. Semaphore</h4><p>Semaphore 含义就是限流，比如说流水线人不能全去上洗手间吧，所以得限制，每个上洗手间的人必须要领到洗手卡才能去，没有卡的人得等着前面的人回来，并归还了卡。<br>默认Semaphore是非公平的，new Semaphore(2, true)第二个值传true才是设置公平  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义限制数量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">2</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"想上厕所,排队领洗手卡。。。\"</span>);</span><br><span class=\"line\">                    semaphore.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"时间（秒）:\"</span>+System.currentTimeMillis()/<span class=\"number\">1000</span>+<span class=\"string\">\"，\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"等到洗手卡了，上厕所ing。。。\"</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//用完了一定要记得归还release, 不然后边的人就没得用了。</span></span><br><span class=\"line\">                    semaphore.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"姓名\"</span>+(<span class=\"number\">1</span>+i)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Exchanger\"><a href=\"#7-Exchanger\" class=\"headerlink\" title=\"7. Exchanger\"></a>7. Exchanger</h4><p>交换器，俩人之间互相交换个数据用的，这里收到的消息得是成对的，否则 Exchanger 一直在等待有人来交换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExchangerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Exchanger&lt;String&gt; exchanger = <span class=\"keyword\">new</span> Exchanger&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 001\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 002\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 003\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 004\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十、LockSuport\"><a href=\"#十、LockSuport\" class=\"headerlink\" title=\"十、LockSuport\"></a>十、LockSuport</h3><p>*在JDK1.6中的java.util.concurrent的子包locks中引了LockSupport这个API，LockSupport是一个比较底层的工具类，用来创建锁和其他同步工具类的基本线程阻塞原语。java锁和同步器框架的核心 AQS: AbstractQueuedSynchronizer，就是通过调用 LockSupport.park()和 LockSupport.unpark()的方法，来实现线程的阻塞和唤醒的。</p>\n<p>LockSuport的几个特点</p>\n<ol>\n<li>LockSupport不需要synchornized加锁就可以实现线程的阻塞和唤醒 </li>\n<li>LockSupport.unpartk()可以先于LockSupport.park()执行，并且线程不会阻塞 </li>\n<li>如果一个线程处于等待状态，连续调用了两次park()方法，就会使该线程永远无法被唤醒</li>\n<li>park()和unpark()方法的实现是由Unsefa类提供的，而Unsefa类是由C和C++语言完成的，它主要通过一个变量作为一个标识，变量值在0，1之间来回切换，当这个变量大于0的时候线程就获得了“令牌”，其实park()和unpark()方法就是在改变这个变量的值，来达到线程的阻塞和唤醒的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// LockSuport 要求用线程顺序打印A1B2C3....Z26</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span>[] letters = &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread letterPrinter = <span class=\"keyword\">new</span> Thread(LetterThread::print);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread numPrinter = <span class=\"keyword\">new</span> Thread(NumThread::print);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        letterPrinter.start();</span><br><span class=\"line\">        numPrinter.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LetterThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class=\"line\">                System.out.print(letters[i]);</span><br><span class=\"line\">                LockSupport.unpark(numPrinter);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &lt; letters.length -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    LockSupport.park();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">                System.out.print(nums[i]);</span><br><span class=\"line\">                LockSupport.unpark(letterPrinter);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &lt; letters.length -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    LockSupport.park();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"十一、Java的四种引用-强、软、弱、虚\"><a href=\"#十一、Java的四种引用-强、软、弱、虚\" class=\"headerlink\" title=\"十一、Java的四种引用 强、软、弱、虚\"></a>十一、Java的四种引用 强、软、弱、虚</h3><ul>\n<li>比如Object o = new Object()，这就是普通的引用，也就是强引用，只要有一个应用指向这个对象，那么垃圾回收器一定不会回收它。</li>\n<li>软引用 SoftReference&lt;byte[]&gt; m = new SoftReference&lt;&gt;(new byte[1024102410])<br>当有一个对象(字节数组)被一个软引用所指向的时候，只有系统内存不够 用的时候，才会回收它(字节数组)</li>\n<li>弱引用 WeakReference m = new WeakReference&lt;&gt;(new M())<br>只要遭遇到gc就会回收</li>\n<li>虚引用 PhantomReference<M> phantomReference = new PhantomReference&lt;&gt;(new M(), QUEUE);<br>对于虚引用它就干一件事，它就是管理堆外内存的，<br>首先第一点，这个虚引用的构造方法至少都是两个参数的，<br>第二个参数还必须是一个队列，这个虚引用基本没用，就是说不是给你用的，那么它是给谁用的呢?是给写JVM(虚拟机)的人用的  </M></li>\n</ul>\n<h3 id=\"十二、JMH\"><a href=\"#十二、JMH\" class=\"headerlink\" title=\"十二、JMH\"></a>十二、JMH</h3><p>JMH -java Microbenchmark Harness<br>微基准测试，它是测的某一个方法的性能。支持命令行或IDEA开发工具运行，idea运行需要添加插件。直接在Idea插件查找JMH安装。安装好后就可以像Junit一样写测试。<br>官网 <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\" target=\"_blank\" rel=\"noopener\">http://openjdk.java.net/projects/code-tools/jmh/</a><br>Maven 引用：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.openjdk.jmh<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jmh-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.openjdk.jmh<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jmh-generator-annprocess<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用示例,代码写在test目录下，类似junit测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Benchmark</span><br><span class=\"line\">@Warmup(iteration&#x3D;1, time&#x3D;3)  &#x2F;&#x2F;在专业测试里面首先要进行预热，预热多少次，预热多少时间</span><br><span class=\"line\">@Fork(5)  &#x2F;&#x2F;用多少个线程去执行我们的程序 </span><br><span class=\"line\">@BenchmarkMode(Mode.Throughput)  &#x2F;&#x2F;是对基准测试的一个模式，这个模式用的最多的是 Throughput吞吐量</span><br><span class=\"line\">@Measurement(iteration&#x3D;1, time&#x3D;3) &#x2F;&#x2F;是整个测试要测试多少遍，调用这个方法要调用多少次</span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;.... 调用测试方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十三、Disrupter\"><a href=\"#十三、Disrupter\" class=\"headerlink\" title=\"十三、Disrupter\"></a>十三、Disrupter</h3><p>主页：<a href=\"http://lmax-exchange.github.io/disruptor/\" target=\"_blank\" rel=\"noopener\">http://lmax-exchange.github.io/disruptor/</a></p>\n<p>源码：<a href=\"https://github.com/LMAX-Exchange/disruptor\">https://github.com/LMAX-Exchange/disruptor</a></p>\n<p>GettingStarted: <a href=\"https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started\">https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started</a></p>\n<p>api: <a href=\"http://lmax-exchange.github.io/disruptor/docs/index.html\" target=\"_blank\" rel=\"noopener\">http://lmax-exchange.github.io/disruptor/docs/index.html</a></p>\n<p>maven: <a href=\"https://mvnrepository.com/artifact/com.lmax/disruptor\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com/artifact/com.lmax/disruptor</a></p>\n<p>ifeve：<a href=\"http://ifeve.com/disruptor/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/disruptor/</a></p>\n<p>Disruptor 开源的并发框架，并获得2011 Duke’s 程序框架创新奖，能够在无锁的情况下实现网络的Queue并发操作。</p>\n<ul>\n<li>如果把它用作MQ的话，<strong>单机</strong>最快的MQ，性能非常的高，主要是它里 用的全都是CAS, 另外把各种各样的性能开发到了极致。</li>\n<li>Disruptor就是在内存里，Disruptor简单理解就是内存里用于存放元素的一个高效率的队列。</li>\n<li>Disruptor叫无锁、高并发、环形Buffer，直接覆盖(不用清除)旧的数据，降低GC频率，用于生产者消费者模式</li>\n<li>RingBuffer是一个环形队列，和其他队列不一样的是他是一个环形队列，环形的Buffer。一般情况下我们的容器是一个队列，不管你是用链表实现还是用数组实现的，它会是一个队列，那么这个队列生产者这边使劲往里塞，消费者这边使劲往外拿，但Disruptor的核心是一个环形的buffer。</li>\n<li>RingBuffer的序号，指向下一个可用的元素</li>\n<li>采用数组实现，没有首尾指针对比ConcurrentLinkedQueue，用数组实现的速度更快<br>假如长度为8，当添加到第12个元素的时候在哪个序号上呢?用12%8<br>决定当Buffer被填满的时候到底是覆盖还是等待，由Produce决定 长度设为2的n次幂，利于二进制计算，例如:12%8=12&amp;(8-1)</li>\n</ul>\n<h4 id=\"等待策略\"><a href=\"#等待策略\" class=\"headerlink\" title=\"等待策略\"></a>等待策略</h4><ul>\n<li>(常用)BlockingWaitStrategy:通过线程堵塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。</li>\n<li>BusySpinWaitStrategy:线程一直自旋等待，可能比较耗cpu </li>\n<li>LiteBlockingWaitStrategy:线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在 signalNeeded.getAndSet，如果两个线程同时访问一个访问waitfor，一个访问signalAll时，可以减少lock加锁次数 </li>\n<li>LiteTimeoutBlockingWaitStrategy:与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛出异常 </li>\n<li>PhasedBackoffWaitStrategy:根据时间参数和传入的等待策略来决定使用那种等待策略 </li>\n<li>TimeoutBlockingWaitStrategy:相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛出异常</li>\n<li>(常用)YieldingWaitStrategy:尝试100次，然后Thread.yield()让出cpu </li>\n<li>(常用)SleepingWaitStrategy:sleep</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>线程: 作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程</p>\n<h3 id=\"一、创建线程的几种方式：\"><a href=\"#一、创建线程的几种方式：\" class=\"headerlink\" title=\"一、创建线程的几种方式：\"></a>一、创建线程的几种方式：</h3><ol>\n<li>继承Thread，并重写该类的run方法</li></ol>","more":"\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 是继承写法。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.setName(<span class=\"string\">\"extends thread\"</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>通过Runnable接口创建线程类,创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 写法。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Thread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThread(),<span class=\"string\">\"implements Runnable\"</span>);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过Callable和Future创建线程</p>\n<ul>\n<li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</li>\n<li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li>\n<li>使用FutureTask对象作为Thread对象的target创建并启动新线程。</li>\n<li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCallableThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 写法。\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> FutureTask&lt;Integer&gt;(<span class=\"keyword\">new</span> MyCallableThread());</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(task,<span class=\"string\">\"implements Callable\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"有返回值：\"</span> + task.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、线程操作的几个方法\"><a href=\"#二、线程操作的几个方法\" class=\"headerlink\" title=\"二、线程操作的几个方法\"></a>二、线程操作的几个方法</h3><ul>\n<li>start: 启动一个新的线程,start方法必须子线程第一个调用的方法，start不能够重复调用，新线程会调用runnable接口提供的run方法</li>\n<li>run: run方法是子线程的执行体，子线程从进入run方法开始直至run方法执行接收意味着子线程的任务执行接收， 在主线程直接调用run方法是不能创建子线程，只是普通方法调用</li>\n<li>sleep: 睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活由睡眠时间而定，等睡眠到规定的时间自动复活.</li>\n<li>Yield: 就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头，还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管</li>\n<li>join: 意思就是在自己当前线程加入你调用Join的线程()，本线程等待。等调用的线程运行完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运行完毕继续t1运行(自己join自己没有意义)</li>\n</ul>\n<p>wait() 和 notify() 方法说明几点：</p>\n<ol>\n<li>调用notify() 方法导致解除阻塞的线程是从因调用该对象的 wait() 方法而阻塞的线程中<strong>随机</strong>选取的，我们无法预料哪一个线程将会被选择，所以编程时要特别小心，避免因这种不确定性而产生问题。</li>\n<li>除了notify()，还有一个方法 notifyAll() 也可起到类似作用，唯一的区别在于，调用 notifyAll() 方法将把因调用该对象的 wait() 方法而阻塞的所有线程一次性全部解除阻塞。当然，只有获得锁的那一个线程才能进入可执行状态。</li>\n<li>wait()法需要释放锁，所以必须在synchronized中使用，否则会抛出异常 IllegalMonitorStateException</li>\n<li>notify()方法也必须在synchronized中使用，并且应该指定对象 </li>\n<li>synchronized()、wait()、notify()对象必须一致，一个synchronized()代码块中只能有一个线程调</li>\n</ol>\n<h3 id=\"三、线程六种状态\"><a href=\"#三、线程六种状态\" class=\"headerlink\" title=\"三、线程六种状态\"></a>三、线程六种状态</h3><ol>\n<li>初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li>\n<li>运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</li>\n<li>阻塞(BLOCKED)：表示线程阻塞于锁。</li>\n<li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li>\n<li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li>\n<li>终止(TERMINATED)：表示该线程已经执行完毕。<br><img src=\"https://casparthh.github.io/2020/02/16/thread/status.jpg\" alt=\"线程状态转换图\"></li>\n</ol>\n<p>*线程什么状态时候会被挂起?挂起是否也是一个状态?<br>Running的时候，在一个cpu上会跑很多个线程，cpu会隔一段时间执行这个线程一下，在隔一段时间执行那个线程一下，这个是cpu内部的一个调度，从running扔回去就叫线程被挂起。</p>\n<h3 id=\"四、synchronized\"><a href=\"#四、synchronized\" class=\"headerlink\" title=\"四、synchronized\"></a>四、synchronized</h3><p>多个线程去访问同一个资源的时候对这个资源上锁  </p>\n<ul>\n<li>synchronized 使用方法和特性<ul>\n<li>在同步代码外嵌套synchronized(Object/Class)</li>\n<li>synchronized方法和synchronized(this)执行这段代码它是等值的</li>\n<li>每次都定义个一个锁的对象Object o 把它new出来，那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是 synchronized(this)锁定当前对象就行</li>\n<li>静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象</li>\n<li>类锁和对象锁互不干扰，只有当监视的是同一个class（Class对象）的锁或同一个对象实例的锁才发生互斥</li>\n<li>可重入，一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁</li>\n<li>程序在执行过程中，如果出现异常，默认情况锁会被释放所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适， * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。因此要非常小心的处理同步业务逻辑中的异常</li>\n<li>如果锁的是new出来的对象，在某一种特定的不小心的情况下你把o变成了别的对象了，这个时候线程的并发就会出问题。锁是在对象的头上两位来作为代表的，你这线程本来大家都去访问这两位了，结果突然把 这把锁变成别的对象，去访问别的对象的两位了，这俩之间就没有任何关系了。因此，以对象作为锁的 时候不让它发生改变，加final。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、锁升级的概念\"><a href=\"#五、锁升级的概念\" class=\"headerlink\" title=\"五、锁升级的概念\"></a>五、锁升级的概念</h3><p>原来要去找操作系统，要找内核去申请这把锁，到后期做了对 synchronized的一些改进，他的效率比原来要改变了不少，改进的地方。当我们使用synchronized的 时候HotSpot的实现是这样的:<br>上来之后第一个去访问某把锁的线程 比如sync (Object) ，来了之后先在 这个Object的头上面markword记录这个线程。(如果只有第一个线程访问的时候实际上是没有给这个 Object加锁的，在内部实现的时候，只是记录这个线程的ID(偏向锁))。<br>偏向锁如果有线程争用的话，就升级为自旋锁，概念就是(有一个哥们儿在蹲马桶 ，另外来了一个哥 们，他就在旁边儿等着，他不会跑到cpu的就绪队列里去，而就在这等着占用cpu，用一个while的循环 在这儿转圈玩儿， 很多圈之后不行的话就再一次进行升级)。<br>自旋锁转圈十次之后，升级为重量级锁，重量级锁就是去操作系统那里去申请资源。这是一个锁升级的过程。  </p>\n<h3 id=\"六、volatile\"><a href=\"#六、volatile\" class=\"headerlink\" title=\"六、volatile\"></a>六、volatile</h3><p>使一个变量在多个线程中可见，保证线程的可见性，同时防止指令重排序。线程可见性在CPU的级别是用缓存一直性来保 证的;禁止指令重排序CPU级别是你禁止不了的，那是人家内部运行的过程，提高效率的。但是在 虚拟机级别你家volatile之后呢，这个指令重排序就可以禁止。严格来讲，还要去深究它的内部的 话，它是加了读屏障和写屏障，这个是CPU的一个原语。<br>A B线程都用到一个变量，java默认是A线程中保留一份copy,这样如果B线程修改了该变量，则A线程未必知道，使用volatile关键字，会让所有线程都会读到变量的修改值<br>并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized  </p>\n<h3 id=\"七、CAS-比较和交换（Conmpare-And-Swap\"><a href=\"#七、CAS-比较和交换（Conmpare-And-Swap\" class=\"headerlink\" title=\"七、CAS 比较和交换（Conmpare And Swap)\"></a>七、CAS 比较和交换（Conmpare And Swap)</h3><p>它将内存位置的内容与给定值进行比较，只有在相同的情况下，将该内存位置的内容修改为新的给定值。 这是作为单个原子操作完成的。 原子性保证新值基于最新信息计算; 如果该值在同一时间被另一个线程更新，则写入将失败。<br>凡是以Atomic开头的都是用CAS这种操作来保证线程安全的这么一些个类。AtomicInteger的意思就是里面包了一个Int类型，这个int类型的自增 count++ 是线程安全的，还有拿值等等是线程安全的，由于我们在工作开发中经常性的有那种需求，一个值所有的线程共同访问它往 上递增 ，所以jdk专门提供了这样的一些类。<br>它的内部调用，就会跑到Unsafe类去(不安全的)，Unsafe中对CAS的实现是C++写的。也就是说AtomicInteger它的内部是调用了 Unsafe这个类里面的方法CompareAndSetI(CAS)。这个比较并且设定的意思是什么呢，我原来想改变某一个值0 ，我想把它变成1，但是其中我想做到线程安全，就只能加锁synchronized ，不然线程就不安全。我现在可以用另外一种操作来替代这把锁，就是cas操作，你可以把它想象成一个方法，这个方法有三个参数，cas(V，Expected，NewValue)。<br>V第一个参数是要改的那个值;Expected第二个参数是期望当前的这个值会是几;NewValue要设定的新值。当前这个线程想改这个值的时候我期望你这值就是0，你不能是个1，如果是1就说明我这值不对，然后想把你变成1。<br>当你判断的时候，发现是我期望的值，还没有进行新值设定的时候值发生了改变怎么办，cas是cpu的原语支持，也就是说cas操作是cpu指令级别上的支持，中间不能被打断。  </p>\n<p>ABA问题：<br>假如说你有一个值，我拿到这个值是1，想把它变成2，我拿到1用cas操作，期望值是1，准备变成2，这个对象Object，在这个过程中，没有一个线程改过我肯定是可以更改的，但是 如果有一个线程先把这个1变成了2后来又变回1，中间值更改过，它不会影响我这个cas下面操作，这就是ABA问题。 这种问题怎么解决。如果是int类型的，最终值是你期望的，也没有关系，这种没关系可以不去管这个问题。如果你确实想管这个问题可以加版本号，做任何一个值的修改，修改完之后加一，后面检查的时候连带版本号一起检查。  </p>\n<h3 id=\"八、Atomic-类\"><a href=\"#八、Atomic-类\" class=\"headerlink\" title=\"八、Atomic 类\"></a>八、Atomic 类</h3><p>AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的<br>多线程对一个数进行递增方法:</p>\n<ol>\n<li>一个long类型的数，递增的时候我们加锁; </li>\n<li>使用AtomicLong可以让它不断的往上递增;</li>\n<li>LongAdder;<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Incrementer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Long counter1 = <span class=\"keyword\">new</span> Long(<span class=\"number\">0L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> AtomicLong counter2 = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> LongAdder counter3 = <span class=\"keyword\">new</span> LongAdder();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//synchronized</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (o) &#123;  <span class=\"comment\">//去掉锁之后结果就有问题</span></span><br><span class=\"line\">                    counter1= counter1+<span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//AtomicLong</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    counter2.incrementAndGet();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//LongAdder</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    counter3.increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//简单处理，休眠主线程等上面的计算线程完成。</span></span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(counter1);</span><br><span class=\"line\">        System.out.println(counter2);</span><br><span class=\"line\">        System.out.println(counter3);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"九、基于CAS的一些新类型的锁\"><a href=\"#九、基于CAS的一些新类型的锁\" class=\"headerlink\" title=\"九、基于CAS的一些新类型的锁\"></a>九、基于CAS的一些新类型的锁</h3><h4 id=\"1-RenentrantLock-可重入锁\"><a href=\"#1-RenentrantLock-可重入锁\" class=\"headerlink\" title=\"1. RenentrantLock 可重入锁\"></a>1. RenentrantLock 可重入锁</h4><ul>\n<li><p>ReentrantLock是可以替代synchronized的,</p>\n</li>\n<li><p>需要手动枷锁，手动解锁、可以出现多个不同的等待队列</p>\n</li>\n<li><p>ReentrantLock有一些功能还是要比synchronized强大的，强大的地方，你可以使用tryLock进行尝试 锁定，不管锁定与否，方法都将继续执行，synchronized如果搞不定的话他肯定就阻塞了，但是用 ReentrantLock你自己就可以决定你到底要不要wait。</p>\n</li>\n<li><p>原来写synchronized的地方换 写lock.lock()，加完锁之后需要注意的是记得lock.unlock()解锁，由于synchronized是自动解锁的，大括号执行完就结束了。lock就不行，lock必须得手动解锁，手动解锁一定要写在try…finally里面保证最好一定要解锁，不然的话上锁之后中间执行的过程有问题了，死在那了，别人就永远也拿不到这把锁了。</p>\n</li>\n<li><p>ReentrantLock还可以用lock.lockInterruptibly()这个类，对interrupt()方法做出相应，可以被打断的加锁，如果以这种方式加锁的话我们可以调用一个t2.interrupt(); 打断线程2的等待。</p>\n</li>\n<li><p>ReentrantLock还可以指定为公平锁，公平锁的意思是当我们new一个ReentrantLock你可以传一个参数为true，这个true表示公平锁，公平锁的意思是谁等在前面就先让谁执行，而不是说谁后来了之后就马上让谁执行。如果说这个锁不公平，来了一个线程上来就抢，它是有可能先抢到的。（是否公平锁分别有NonfairSync &amp; FairSync 两个不同的实现）</p>\n</li>\n<li><p>除了synchronized之外，多数内部都是用的cas。AQS的实际上它内部用的是 park和unpark，也不是全都用的cas,他还是做了一个锁升级的概念，只不过这个锁升级做的比较隐秘， 在等待这个队列的时候如果你拿不到还是进入一个阻塞的状态，前面至少有一个cas的状态，他不像原先就直接进入阻塞状态了。（参考后面的源码阅读部分）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Integer i = <span class=\"keyword\">new</span> Integer(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10000</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">100</span> ; k++) &#123;</span><br><span class=\"line\">                    lock.lock();</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁,必须要必须要必须要手动释放锁(重要的事情说三遍)</span></span><br><span class=\"line\">                        <span class=\"comment\">// 使用syn锁定的话如果遇到异常，jvm会手动释放锁，但是lock必须手动释放锁</span></span><br><span class=\"line\">                        lock.unlock();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//简单处理，休眠主线程等上面的计算线程完成。</span></span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ReentrantLock 非公平锁原码阅读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ReentrantLock lock &#x3D; new ReentrantLock();</span><br><span class=\"line\"> lock.lock();  &#x2F;&#x2F;从断点跟踪</span><br><span class=\"line\"> </span><br><span class=\"line\"> public void lock() &#123;</span><br><span class=\"line\">     sync.acquire(1);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> public final void acquire(int arg) &#123;</span><br><span class=\"line\">     if (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">         selfInterrupt();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> final boolean nonfairTryAcquire(int acquires) &#123;</span><br><span class=\"line\">     final Thread current &#x3D; Thread.currentThread();</span><br><span class=\"line\">     int c &#x3D; getState(); &#x2F;&#x2F;the current value of synchronization state.</span><br><span class=\"line\">     if (c &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;如果当前对象没有锁，直接设置一个排它锁</span><br><span class=\"line\">         if (compareAndSetState(0, acquires)) &#123;</span><br><span class=\"line\">             setExclusiveOwnerThread(current);</span><br><span class=\"line\">             return true;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     else if (current &#x3D;&#x3D; getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 如果当前持有锁的是同一个线程，则设置为可重入</span><br><span class=\"line\">         int nextc &#x3D; c + acquires;</span><br><span class=\"line\">         if (nextc &lt; 0) &#x2F;&#x2F; overflow</span><br><span class=\"line\">             throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class=\"line\">         setState(nextc);</span><br><span class=\"line\">         return true;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return false; &#x2F;&#x2F;没拿到锁，返回fallse</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> private Node addWaiter(Node mode) &#123;</span><br><span class=\"line\">     &#x2F;&#x2F;mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared, </span><br><span class=\"line\">     &#x2F;&#x2F;now 一个共享锁或排它锁节点</span><br><span class=\"line\">     Node node &#x3D; new Node(mode);  </span><br><span class=\"line\">    </span><br><span class=\"line\">     &#x2F;&#x2F;取出队列中最后一个节点，设置为该新节点的上一个节点。并返回新节点。</span><br><span class=\"line\">     &#x2F;&#x2F;如果最后一个节点为空，初使化一个同步队列</span><br><span class=\"line\">     for (;;) &#123;</span><br><span class=\"line\">         Node oldTail &#x3D; tail;</span><br><span class=\"line\">         if (oldTail !&#x3D; null) &#123;</span><br><span class=\"line\">             node.setPrevRelaxed(oldTail);</span><br><span class=\"line\">             if (compareAndSetTail(oldTail, node)) &#123;</span><br><span class=\"line\">                 oldTail.next &#x3D; node;</span><br><span class=\"line\">                 return node;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; else &#123;</span><br><span class=\"line\">             initializeSyncQueue();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class=\"line\">    boolean interrupted &#x3D; false;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        for (;;) &#123;</span><br><span class=\"line\">            final Node p &#x3D; node.predecessor();</span><br><span class=\"line\">            &#x2F;&#x2F;取出前面新new 节点，判断上一个节点，是不是头部节点，如果是的话，直接再次尝试拿锁。</span><br><span class=\"line\">            &#x2F;&#x2F;如果拿锁成功，那新节点，就是头部节点</span><br><span class=\"line\">            if (p &#x3D;&#x3D; head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next &#x3D; null; &#x2F;&#x2F; help GC</span><br><span class=\"line\">                return interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;判断是否继续自旋拿锁，还是park</span><br><span class=\"line\">            if (shouldParkAfterFailedAcquire(p, node))</span><br><span class=\"line\">                interrupted |&#x3D; parkAndCheckInterrupt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">        cancelAcquire(node);</span><br><span class=\"line\">        if (interrupted)</span><br><span class=\"line\">            selfInterrupt();</span><br><span class=\"line\">        throw t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"2-CountDownLatch\"><a href=\"#2-CountDownLatch\" class=\"headerlink\" title=\"2.CountDownLatch\"></a>2.CountDownLatch</h4><p>倒数，Latch是门栓的意思(倒数的一个门栓，5、4、3、2、1数到了，我这个门栓就开 了)<br>刚前面的递增方法，用的休眠主线程等计算线程完成后，再打印结果，这并不好，我们用CountDownLatch 改造下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Incrementer</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> Long counter1 = Long.valueOf(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (Incrementer<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;  <span class=\"comment\">//去掉锁之后结果就有问题</span></span><br><span class=\"line\">                        counter1++;</span><br><span class=\"line\">                        latch.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeUnit.MILLISECONDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//添加休眠，方便对比结果。</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"创建线程完成,等待结果。\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            latch.await(); <span class=\"comment\">//这里会阻塞住，等latch 倒数到0的时候，才会继续执行</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(counter1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-CyclicBarrier\"><a href=\"#3-CyclicBarrier\" class=\"headerlink\" title=\"3. CyclicBarrier\"></a>3. CyclicBarrier</h4><p>循环栅栏，这有一个栅栏，什么时候人满了就把栅栏推倒， 哗啦哗啦的都放出去，出去之后扎栅栏又重新起来，再来人，满了，推倒之后又继续。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusDispatcher</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CyclicBarrier barrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">10</span>, ()-&gt;&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" - 人满了发车。。。。。\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"第\"</span>+(++num)+<span class=\"string\">\"个人上车\"</span>);</span><br><span class=\"line\">                    latch.countDown();</span><br><span class=\"line\">                    barrier.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            latch.await();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"人车调度任务完成。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Phaser\"><a href=\"#4-Phaser\" class=\"headerlink\" title=\"4. Phaser\"></a>4. Phaser</h4><p>Phaser它就更像是结合了CountDownLatch和CyclicBarrier，翻译一下叫阶段。<br>Phaser是按照不同的阶段来对线程进行执行，就是它本身是维护着一个阶段这样的一个成员变量，当前 我是执行到那个阶段，是第0个，还是第1个阶段啊等等，每个阶段不同的时候这个线程都可以往前走， 有的线程走到某个阶段就停了，有的线程一直会走到结束。你的程序中如果说用到分好几个阶段执行 ， 而且有的人必须得几个人共同参与的一种情形的情况下可能会用到这个Phaser。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhaserTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> GamePhaser phaser = <span class=\"keyword\">new</span> GamePhaser(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">1</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" 到\"</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第一个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">2</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第二个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">3</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第三个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">4</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"玩第四个游戏。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">5</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"准备离开。。。\"</span>);</span><br><span class=\"line\">                sleepSeconds(<span class=\"number\">2</span>);</span><br><span class=\"line\">                phaser.arriveAndAwaitAdvance();</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"00\"</span>+(i+<span class=\"number\">1</span>)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleepSeconds</span><span class=\"params\">(<span class=\"keyword\">int</span> seconds)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(seconds);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GamePhaser</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phaser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GamePhaser</span><span class=\"params\">(<span class=\"keyword\">int</span> parties)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(parties);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> phase             第几个阶段，</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> registeredParties 当前有多少线程参与</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> if this phaser should terminate, 是否要结束phaser</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onAdvance</span><span class=\"params\">(<span class=\"keyword\">int</span> phase, <span class=\"keyword\">int</span> registeredParties)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (phase) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"人到齐了开始玩第一个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"开始玩第二个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"开始玩第三个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"开始玩第四个游戏^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"registeredParties:\"</span> + registeredParties);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"完成第\"</span> + phase + <span class=\"string\">\"阶段， 当前时间(秒)\"</span> + System.currentTimeMillis() / <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"游戏结束了，谢谢参与 ^-^\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-ReadWriteLock\"><a href=\"#5-ReadWriteLock\" class=\"headerlink\" title=\"5. ReadWriteLock\"></a>5. ReadWriteLock</h4><p>这个ReadWriteLock 是读写锁。读写锁的概念其实就是共享锁和排他锁，读锁就是共享锁，写锁就是排他锁。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadWriteLockTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> ReadWriteLock readWriteLock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Lock readLock = readWriteLock.readLock();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arges)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//读线程不用阻塞，可以并发完成工作</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                readLock.lock();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ReadWriteLockTest.read();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//记得Reentrant</span></span><br><span class=\"line\">                    readLock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//写线程会阻塞，需要排序完成任务</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                writeLock.lock();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    ReadWriteLockTest.write(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    writeLock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">          e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"read value =\"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value += num;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"write value =\"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-Semaphore\"><a href=\"#6-Semaphore\" class=\"headerlink\" title=\"6. Semaphore\"></a>6. Semaphore</h4><p>Semaphore 含义就是限流，比如说流水线人不能全去上洗手间吧，所以得限制，每个上洗手间的人必须要领到洗手卡才能去，没有卡的人得等着前面的人回来，并归还了卡。<br>默认Semaphore是非公平的，new Semaphore(2, true)第二个值传true才是设置公平  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SemaphoreTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义限制数量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">2</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"想上厕所,排队领洗手卡。。。\"</span>);</span><br><span class=\"line\">                    semaphore.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"时间（秒）:\"</span>+System.currentTimeMillis()/<span class=\"number\">1000</span>+<span class=\"string\">\"，\"</span>+Thread.currentThread().getName()+<span class=\"string\">\"等到洗手卡了，上厕所ing。。。\"</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//用完了一定要记得归还release, 不然后边的人就没得用了。</span></span><br><span class=\"line\">                    semaphore.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,<span class=\"string\">\"姓名\"</span>+(<span class=\"number\">1</span>+i)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Exchanger\"><a href=\"#7-Exchanger\" class=\"headerlink\" title=\"7. Exchanger\"></a>7. Exchanger</h4><p>交换器，俩人之间互相交换个数据用的，这里收到的消息得是成对的，否则 Exchanger 一直在等待有人来交换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExchangerTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Exchanger&lt;String&gt; exchanger = <span class=\"keyword\">new</span> Exchanger&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 001\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 002\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 003\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String contents = exchanger.exchange(Thread.currentThread().getName());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" 收到消息：\"</span> + contents);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">\"thread 004\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十、LockSuport\"><a href=\"#十、LockSuport\" class=\"headerlink\" title=\"十、LockSuport\"></a>十、LockSuport</h3><p>*在JDK1.6中的java.util.concurrent的子包locks中引了LockSupport这个API，LockSupport是一个比较底层的工具类，用来创建锁和其他同步工具类的基本线程阻塞原语。java锁和同步器框架的核心 AQS: AbstractQueuedSynchronizer，就是通过调用 LockSupport.park()和 LockSupport.unpark()的方法，来实现线程的阻塞和唤醒的。</p>\n<p>LockSuport的几个特点</p>\n<ol>\n<li>LockSupport不需要synchornized加锁就可以实现线程的阻塞和唤醒 </li>\n<li>LockSupport.unpartk()可以先于LockSupport.park()执行，并且线程不会阻塞 </li>\n<li>如果一个线程处于等待状态，连续调用了两次park()方法，就会使该线程永远无法被唤醒</li>\n<li>park()和unpark()方法的实现是由Unsefa类提供的，而Unsefa类是由C和C++语言完成的，它主要通过一个变量作为一个标识，变量值在0，1之间来回切换，当这个变量大于0的时候线程就获得了“令牌”，其实park()和unpark()方法就是在改变这个变量的值，来达到线程的阻塞和唤醒的<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// LockSuport 要求用线程顺序打印A1B2C3....Z26</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span>[] letters = &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] nums = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread letterPrinter = <span class=\"keyword\">new</span> Thread(LetterThread::print);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Thread numPrinter = <span class=\"keyword\">new</span> Thread(NumThread::print);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        letterPrinter.start();</span><br><span class=\"line\">        numPrinter.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LetterThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class=\"line\">                System.out.print(letters[i]);</span><br><span class=\"line\">                LockSupport.unpark(numPrinter);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &lt; letters.length -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    LockSupport.park();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumThread</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">                System.out.print(nums[i]);</span><br><span class=\"line\">                LockSupport.unpark(letterPrinter);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &lt; letters.length -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    LockSupport.park();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"十一、Java的四种引用-强、软、弱、虚\"><a href=\"#十一、Java的四种引用-强、软、弱、虚\" class=\"headerlink\" title=\"十一、Java的四种引用 强、软、弱、虚\"></a>十一、Java的四种引用 强、软、弱、虚</h3><ul>\n<li>比如Object o = new Object()，这就是普通的引用，也就是强引用，只要有一个应用指向这个对象，那么垃圾回收器一定不会回收它。</li>\n<li>软引用 SoftReference&lt;byte[]&gt; m = new SoftReference&lt;&gt;(new byte[1024102410])<br>当有一个对象(字节数组)被一个软引用所指向的时候，只有系统内存不够 用的时候，才会回收它(字节数组)</li>\n<li>弱引用 WeakReference m = new WeakReference&lt;&gt;(new M())<br>只要遭遇到gc就会回收</li>\n<li>虚引用 PhantomReference<M> phantomReference = new PhantomReference&lt;&gt;(new M(), QUEUE);<br>对于虚引用它就干一件事，它就是管理堆外内存的，<br>首先第一点，这个虚引用的构造方法至少都是两个参数的，<br>第二个参数还必须是一个队列，这个虚引用基本没用，就是说不是给你用的，那么它是给谁用的呢?是给写JVM(虚拟机)的人用的  </M></li>\n</ul>\n<h3 id=\"十二、JMH\"><a href=\"#十二、JMH\" class=\"headerlink\" title=\"十二、JMH\"></a>十二、JMH</h3><p>JMH -java Microbenchmark Harness<br>微基准测试，它是测的某一个方法的性能。支持命令行或IDEA开发工具运行，idea运行需要添加插件。直接在Idea插件查找JMH安装。安装好后就可以像Junit一样写测试。<br>官网 <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\" target=\"_blank\" rel=\"noopener\">http://openjdk.java.net/projects/code-tools/jmh/</a><br>Maven 引用：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.openjdk.jmh<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jmh-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.openjdk.jmh<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jmh-generator-annprocess<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用示例,代码写在test目录下，类似junit测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Benchmark</span><br><span class=\"line\">@Warmup(iteration&#x3D;1, time&#x3D;3)  &#x2F;&#x2F;在专业测试里面首先要进行预热，预热多少次，预热多少时间</span><br><span class=\"line\">@Fork(5)  &#x2F;&#x2F;用多少个线程去执行我们的程序 </span><br><span class=\"line\">@BenchmarkMode(Mode.Throughput)  &#x2F;&#x2F;是对基准测试的一个模式，这个模式用的最多的是 Throughput吞吐量</span><br><span class=\"line\">@Measurement(iteration&#x3D;1, time&#x3D;3) &#x2F;&#x2F;是整个测试要测试多少遍，调用这个方法要调用多少次</span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;.... 调用测试方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十三、Disrupter\"><a href=\"#十三、Disrupter\" class=\"headerlink\" title=\"十三、Disrupter\"></a>十三、Disrupter</h3><p>主页：<a href=\"http://lmax-exchange.github.io/disruptor/\" target=\"_blank\" rel=\"noopener\">http://lmax-exchange.github.io/disruptor/</a></p>\n<p>源码：<a href=\"https://github.com/LMAX-Exchange/disruptor\">https://github.com/LMAX-Exchange/disruptor</a></p>\n<p>GettingStarted: <a href=\"https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started\">https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started</a></p>\n<p>api: <a href=\"http://lmax-exchange.github.io/disruptor/docs/index.html\" target=\"_blank\" rel=\"noopener\">http://lmax-exchange.github.io/disruptor/docs/index.html</a></p>\n<p>maven: <a href=\"https://mvnrepository.com/artifact/com.lmax/disruptor\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com/artifact/com.lmax/disruptor</a></p>\n<p>ifeve：<a href=\"http://ifeve.com/disruptor/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/disruptor/</a></p>\n<p>Disruptor 开源的并发框架，并获得2011 Duke’s 程序框架创新奖，能够在无锁的情况下实现网络的Queue并发操作。</p>\n<ul>\n<li>如果把它用作MQ的话，<strong>单机</strong>最快的MQ，性能非常的高，主要是它里 用的全都是CAS, 另外把各种各样的性能开发到了极致。</li>\n<li>Disruptor就是在内存里，Disruptor简单理解就是内存里用于存放元素的一个高效率的队列。</li>\n<li>Disruptor叫无锁、高并发、环形Buffer，直接覆盖(不用清除)旧的数据，降低GC频率，用于生产者消费者模式</li>\n<li>RingBuffer是一个环形队列，和其他队列不一样的是他是一个环形队列，环形的Buffer。一般情况下我们的容器是一个队列，不管你是用链表实现还是用数组实现的，它会是一个队列，那么这个队列生产者这边使劲往里塞，消费者这边使劲往外拿，但Disruptor的核心是一个环形的buffer。</li>\n<li>RingBuffer的序号，指向下一个可用的元素</li>\n<li>采用数组实现，没有首尾指针对比ConcurrentLinkedQueue，用数组实现的速度更快<br>假如长度为8，当添加到第12个元素的时候在哪个序号上呢?用12%8<br>决定当Buffer被填满的时候到底是覆盖还是等待，由Produce决定 长度设为2的n次幂，利于二进制计算，例如:12%8=12&amp;(8-1)</li>\n</ul>\n<h4 id=\"等待策略\"><a href=\"#等待策略\" class=\"headerlink\" title=\"等待策略\"></a>等待策略</h4><ul>\n<li>(常用)BlockingWaitStrategy:通过线程堵塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。</li>\n<li>BusySpinWaitStrategy:线程一直自旋等待，可能比较耗cpu </li>\n<li>LiteBlockingWaitStrategy:线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在 signalNeeded.getAndSet，如果两个线程同时访问一个访问waitfor，一个访问signalAll时，可以减少lock加锁次数 </li>\n<li>LiteTimeoutBlockingWaitStrategy:与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛出异常 </li>\n<li>PhasedBackoffWaitStrategy:根据时间参数和传入的等待策略来决定使用那种等待策略 </li>\n<li>TimeoutBlockingWaitStrategy:相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛出异常</li>\n<li>(常用)YieldingWaitStrategy:尝试100次，然后Thread.yield()让出cpu </li>\n<li>(常用)SleepingWaitStrategy:sleep</li>\n</ul>"},{"title":"JVM - 类加载 & 初始化","date":"2020-02-22T06:22:56.000Z","_content":"![JVM ClassLoader](https://casparthh.github.io/2020/02/22/ClassLoader/ClassLoader.png)\n","source":"_posts/2020-02-22-ClassLoader.md","raw":"---\ntitle: JVM - 类加载 & 初始化\ndate: 2020-02-22 14:22:56\ncategories:\n- 技术笔记\ntags: \n- JVM\n---\n![JVM ClassLoader](https://casparthh.github.io/2020/02/22/ClassLoader/ClassLoader.png)\n","slug":"ClassLoader","published":1,"updated":"2020-02-23T08:47:14.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6ztaqub00075xc942v45u7d","content":"<p><img src=\"https://casparthh.github.io/2020/02/22/ClassLoader/ClassLoader.png\" alt=\"JVM ClassLoader\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://casparthh.github.io/2020/02/22/ClassLoader/ClassLoader.png\" alt=\"JVM ClassLoader\"></p>\n"},{"title":"JVM - GC和GC Tuning","date":"2020-02-22T08:20:37.000Z","toc":true,"_content":"### 一、GC的基础知识\n\n#### 什么是垃圾\n没有任何引用指向的一个对象或者多个对象（循环引用）\n\n#### 如何定位垃圾\n1. 引用计数（ReferenceCount）\n2. 根可达算法(RootSearching)\n\n#### 常见的垃圾回收算法\n1. 标记清除(mark sweep) - 位置不连续 产生碎片 效率偏低（两遍扫描）\n2. 拷贝算法 (copying) - 没有碎片，浪费空间\n3. 标记压缩(mark compact) - 没有碎片，效率偏低（两遍扫描，指针需要调整）\n<!--more-->\n\n#### JVM内存分代模型（用于分代垃圾回收算法）\n1. 部分垃圾回收器使用的模型\n   除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型  \n   G1是逻辑分代，物理不分代  \n   除此之外不仅逻辑分代，而且物理分代  \n2. 新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace\n   1. 永久代 元数据 - Class\n   2. 永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）\n   3. 字符串常量 1.7 - 永久代，1.8 - 堆\n   4. MethodArea逻辑概念 - 永久代、元数据\n3. 新生代 = Eden + 2个suvivor区 \n   1. YGC回收之后，大多数的对象会被回收，活着的进入s0\n   2. 再次YGC，活着的对象eden + s0 -> s1\n   3. 再次YGC，eden + s1 -> s0\n   4. 年龄足够 -> 老年代 （-XX:MaxTenuringThreshold=X X默认是15）\n   5. s区装不下 -> 老年代\n4. 老年代\n   1. 顽固分子\n   2. 老年代满了FGC Full GC\n   3. 内存分配担保，在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。\n5. GC Tuning (Generation)\n   1. 尽量减少FGC\n   2. MinorGC = YGC\n   3. MajorGC = FGC\n\n### 二、垃圾回收器及调优\n#### 常见的垃圾回收器\n![常用垃圾回收器](https://casparthh.github.io/2020/02/22/GC/gc.png)\n\n1. JDK诞生 Serial追随，为提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，并发垃圾回收是因为无法忍受STW。\n2. Serial：适用年轻代，串行回收\n3. PS(Parallel Scavenge) 适用年轻代，并行回收\n4. ParNew 适用年轻代，配合CMS的并行回收\n5. SerialOld 适用老年代\n6. ParallelOld 适用老年代，配合PS使用\n7. CMS(ConcurrentMarkSweep) 老年代,并发的，垃圾回收和应用程序同时运行，降低STW(Stop The World)的时间(200ms)  \n   CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定  \n   CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收  \n   算法：三色标记 + Incremental Update   \n   工作过程：初始标记，并发标记，重新标记，并发清理    \n   优点：并发收集，低停顿    \n   缺点：占用大量的CPU，无法处理浮动垃圾，出现Concurrent Mode Failure，空间碎片  \n   \n8. G1(10ms)\n   算法：三色标记 + SATB (snapshot-at-the-beginning)  \n   优势：并行与并发，分代收集，空间整合，可预测的停顿  \n   步骤：初使标记，并发标记，最终标记，筛选回收  \n9. ZGC (1ms)\n   算法：ColoredPointers + LoadBarrier\n10. Shenandoah\n    算法：ColoredPointers + WriteBarrier\n11. PS 和 PN区别的延伸阅读：\n    ▪[https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html](https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html)\n12. 垃圾收集器跟内存大小的关系\n    1. Serial 几十兆\n    2. PS 上百兆 - 几个G\n    3. CMS - 20G\n    4. G1 - 上百G\n    5. ZGC - 4T - 16T（JDK13）  \n13. 1.8默认的垃圾回收：PS + ParallelOld\n\n#### 常见垃圾回收器组合参数设定：(1.8)\n* -XX:+UseSerialGC = Serial New (DefNew) + Serial Old\n  * 小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器\n* -XX:+UseParNewGC = ParNew + SerialOld\n  * 这个组合已经很少用（在某些版本中已经废弃）\n* -XX:+UseConcurrentMarkSweepGC = ParNew + CMS + Serial Old\n* -XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】\n* -XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old\n* -XX:+UseG1GC = G1\n\n#### JVM调优第一步，了解JVM常用命令行参数\n* JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\n* HotSpot参数分类  \n    标准： - 开头，所有的HotSpot都支持  \n    非标准：-X 开头，特定版本HotSpot支持特定命令  \n    不稳定：-XX 开头，下个版本可能取消  \n    java -X  \n\n  1. 区分概念：内存泄漏memory leak，内存溢出out of memory\n  2. java -XX:+PrintCommandLineFlags -version 观查虚拟机配置\n  3. java -XX:+PrintFlagsInitial 默认参数值\n  4. java -XX:+PrintFlagsFinal 最终参数值\n  5. java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数\n  6. java -XX:+PrintFlagsFinal -version |grep GC\n\n#### 调优前的基础概念：\n1. 吞吐量：吞吐量（CPU用于运行用户代码的时间与CPU消耗的总时间的比值）用户代码时间 /（用户代码执行时间 + 垃圾回收时间）\n2. 响应时间：STW越短，响应时间越好\n\n所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量...\n\n问题：  \n科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）  \n响应时间：网站 GUI API （1.8 G1）  \n\n#### 什么是调优？\n1. 根据需求进行JVM规划和预调优\n2. 优化运行JVM运行环境（慢，卡顿）\n3. 解决JVM运行过程中出现的各种问题(OOM)\n\n#### 调优，从规划开始\n* 调优，从业务场景开始，没有业务场景的调优都是耍流氓\n* 无监控（压力测试，能看到结果），不调优\n\n* 步骤：\n  1. 熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）\n     1. 响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）\n     2. 吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]\n  2. 选择回收器组合\n  3. 计算内存需求（经验值）\n  4. 选定CPU（越高越好）\n  5. 设定年代大小、升级年龄\n  6. 设定日志参数\n     1. -Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause\n     2. 或者每天产生一个日志文件\n  7. 观察日志情况\n\n#### 解决JVM运行中的问题\n1. top命令观察问题：内存 & CPU 占用率。\n2. top -Hp 观察进程中的线程，哪个线程CPU和内存占比高\n3. jps(java process status) 参数 -mlv 定位具体java进程\n   jstack 定位线程状况，重点关注：WAITING BLOCKED\n   eg.\n   waiting on <0x0000000088ca3310> (a java.lang.Object)\n   假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁\n   怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE\n\n4. 为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称\n   怎么样自定义线程池里的线程名称？（自定义ThreadFactory）\n\n5. jinfo pid   \n   jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。\n\n6. jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）  \n   jstat -gc|gcnew|gcold|gcutil pid 500 10 : 每个500个毫秒打印GC的情况，共打印10次退出  \n   jstat -class pid   观察加载类的数量  \n   jstat -options       查看所有options  \n  \n7. jmap 一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本。\n   jmap -heap pid 打印heap的概要信息，GC使用的算法，heap（堆）的配置及JVM堆内存的使用情况.  \n   jmap -histo pid | head -200， 将实例对象最多的200个类  \n   jmap -histo:live pid  在*:live前会进行full gc，带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小\n   jmap -dump:format=b,file=xxx pid  \n    -dump 使用hprof二进制形式,输出jvm的heap内容到文件=.  live子选项是可选的，假如指定live选项,那么只输出活的对象到文件  \n    线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿，<font color='red'>线上慎用</font>（电商不适合用）\n    1：-XX:+HeapDumpOnOutOfMemoryError 设定了参数HeapDump，OOM的时候会自动产生堆转储文件\n    2：很多服务器备份（高可用），停掉这台服务器对其他服务器不影响\n    3：用在线定位\n\n8. 使用MAT / jhat /jvisualvm 进行dump文件分析\n    Jhat参考资料：https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html \n\n#### Arthas在线排查工具\n* 为什么需要在线排查？\n   在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 \n* 观察jvm信息\n* thread定位线程问题\n* dashboard 观察系统情况\n* heapdump + jhat分析\n* jad反编译  \n   动态代理生成类的问题定位  \n   第三方的类（观察代码）  \n   版本问题（确定自己最新提交的版本是不是被使用）  \n* redefine 热替换\n   目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性\n* sc  - search class\n* watch  - watch method\n\n### 三、常用参数\n#### GC算法的基础概念\n* Card Table\n  由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card\n  在结构上，Card Table用BitMap来实现\n\n#### GC常用参数\n* -Xmn -Xms -Xmx -Xss\n  年轻代 最小堆 最大堆 栈空间\n* -XX:+UseTLAB\n  使用TLAB(Thread Local Allocation Buffer)，默认打开\n* -XX:+PrintTLAB\n  打印TLAB的使用情况\n* -XX:TLABSize\n  设置TLAB大小\n* -XX:+DisableExplictGC\n  System.gc()不管用 ，FGC\n* -XX:+PrintGC\n* -XX:+PrintGCDetails\n* -XX:+PrintHeapAtGC\n* -XX:+PrintGCTimeStamps\n* -XX:+PrintGCApplicationConcurrentTime (低) 打印应用程序时间\n* -XX:+PrintGCApplicationStoppedTime （低） 打印暂停时长\n* -XX:+PrintReferenceGC （重要性低）记录回收了多少种不同引用类型的引用\n* -verbose:class 类加载详细过程\n* -XX:+PrintVMOptions\n* -XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial  必须会用\n* -Xloggc:/opt/log/gc.log\n* -XX:MaxTenuringThreshold 升代年龄，最大值15\n* -XX:PretenureSizeThreshold=1M //大对象直接存入老年代,默认值是0，意思是不管多大都是先在eden中分配内存\n* 锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 这些不建议设置\n\n\n#### Parallel常用参数\n* -XX:SurvivorRatio\n* -XX:+ParallelGCThreads 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同\n* -XX:+UseAdaptiveSizePolicy 自动选择各区大小比例\n\n#### CMS常用参数\n* -XX:+UseConcMarkSweepGC\n* -XX:ParallelCMSThreads CMS线程数量\n* -XX:CMSInitiatingOccupancyFraction  \n  使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）\n* -XX:+UseCMSCompactAtFullCollection\n  在FGC时进行压缩\n* -XX:CMSFullGCsBeforeCompaction\n  多少次FGC之后进行压缩\n* -XX:+CMSClassUnloadingEnabled\n* -XX:CMSInitiatingPermOccupancyFraction\n  达到什么比例时进行Perm回收\n* GCTimeRatio\n  设置GC时间占用程序运行时间的百分比\n* -XX:MaxGCPauseMillis\n  停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代\n* -XX:LargePageSizeInBytes=64m 内存分页\n\n#### G1常用参数\n* -XX:+UseG1GC\n* -XX:MaxGCPauseMillis\n  建议值，G1会尝试调整Young区的块数来达到这个值\n* -XX:GCPauseIntervalMillis\n  设置停顿间隔时间\n* -XX:+G1HeapRegionSize\n  分区大小，建议逐渐增大该值，1 2 4 8 16 32。\n  随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长\n  ZGC做了改进（动态区块大小）\n* G1NewSizePercent\n  新生代最小比例，默认为5%\n* G1MaxNewSizePercent\n  新生代最大比例，默认为60%\n* GCTimeRatio\n  GC时间建议比例，G1会根据这个值调整堆空间\n* ConcGCThreads\n  线程数量\n* InitiatingHeapOccupancyPercent\n  启动G1的堆空间占用比例\n\n### 四、参考资料\n1. https://docs.oracle.com/en/java/javase/13/\n2. https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\n3. http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp\n4. JVM调优参考文档：https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184\n5. https://www.oracle.com/technical-resources/articles/java/g1gc.html \n6. Arthas：https://github.com/alibaba/arthas\n   1. 启动arthas java -jar arthas-boot.jar\n   2. 绑定java进程\n   3. dashboard命令观察系统整体情况\n   4. help 查看帮助\n   5. help xx 查看具体命令帮助\n","source":"_posts/2020-02-22-GC.md","raw":"---\ntitle: JVM - GC和GC Tuning\ndate: 2020-02-22 16:20:37\ntoc: true\ncategories:\n- 技术笔记\ntags: \n- JVM\n---\n### 一、GC的基础知识\n\n#### 什么是垃圾\n没有任何引用指向的一个对象或者多个对象（循环引用）\n\n#### 如何定位垃圾\n1. 引用计数（ReferenceCount）\n2. 根可达算法(RootSearching)\n\n#### 常见的垃圾回收算法\n1. 标记清除(mark sweep) - 位置不连续 产生碎片 效率偏低（两遍扫描）\n2. 拷贝算法 (copying) - 没有碎片，浪费空间\n3. 标记压缩(mark compact) - 没有碎片，效率偏低（两遍扫描，指针需要调整）\n<!--more-->\n\n#### JVM内存分代模型（用于分代垃圾回收算法）\n1. 部分垃圾回收器使用的模型\n   除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型  \n   G1是逻辑分代，物理不分代  \n   除此之外不仅逻辑分代，而且物理分代  \n2. 新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace\n   1. 永久代 元数据 - Class\n   2. 永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）\n   3. 字符串常量 1.7 - 永久代，1.8 - 堆\n   4. MethodArea逻辑概念 - 永久代、元数据\n3. 新生代 = Eden + 2个suvivor区 \n   1. YGC回收之后，大多数的对象会被回收，活着的进入s0\n   2. 再次YGC，活着的对象eden + s0 -> s1\n   3. 再次YGC，eden + s1 -> s0\n   4. 年龄足够 -> 老年代 （-XX:MaxTenuringThreshold=X X默认是15）\n   5. s区装不下 -> 老年代\n4. 老年代\n   1. 顽固分子\n   2. 老年代满了FGC Full GC\n   3. 内存分配担保，在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。\n5. GC Tuning (Generation)\n   1. 尽量减少FGC\n   2. MinorGC = YGC\n   3. MajorGC = FGC\n\n### 二、垃圾回收器及调优\n#### 常见的垃圾回收器\n![常用垃圾回收器](https://casparthh.github.io/2020/02/22/GC/gc.png)\n\n1. JDK诞生 Serial追随，为提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，并发垃圾回收是因为无法忍受STW。\n2. Serial：适用年轻代，串行回收\n3. PS(Parallel Scavenge) 适用年轻代，并行回收\n4. ParNew 适用年轻代，配合CMS的并行回收\n5. SerialOld 适用老年代\n6. ParallelOld 适用老年代，配合PS使用\n7. CMS(ConcurrentMarkSweep) 老年代,并发的，垃圾回收和应用程序同时运行，降低STW(Stop The World)的时间(200ms)  \n   CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定  \n   CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收  \n   算法：三色标记 + Incremental Update   \n   工作过程：初始标记，并发标记，重新标记，并发清理    \n   优点：并发收集，低停顿    \n   缺点：占用大量的CPU，无法处理浮动垃圾，出现Concurrent Mode Failure，空间碎片  \n   \n8. G1(10ms)\n   算法：三色标记 + SATB (snapshot-at-the-beginning)  \n   优势：并行与并发，分代收集，空间整合，可预测的停顿  \n   步骤：初使标记，并发标记，最终标记，筛选回收  \n9. ZGC (1ms)\n   算法：ColoredPointers + LoadBarrier\n10. Shenandoah\n    算法：ColoredPointers + WriteBarrier\n11. PS 和 PN区别的延伸阅读：\n    ▪[https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html](https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html)\n12. 垃圾收集器跟内存大小的关系\n    1. Serial 几十兆\n    2. PS 上百兆 - 几个G\n    3. CMS - 20G\n    4. G1 - 上百G\n    5. ZGC - 4T - 16T（JDK13）  \n13. 1.8默认的垃圾回收：PS + ParallelOld\n\n#### 常见垃圾回收器组合参数设定：(1.8)\n* -XX:+UseSerialGC = Serial New (DefNew) + Serial Old\n  * 小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器\n* -XX:+UseParNewGC = ParNew + SerialOld\n  * 这个组合已经很少用（在某些版本中已经废弃）\n* -XX:+UseConcurrentMarkSweepGC = ParNew + CMS + Serial Old\n* -XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】\n* -XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old\n* -XX:+UseG1GC = G1\n\n#### JVM调优第一步，了解JVM常用命令行参数\n* JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\n* HotSpot参数分类  \n    标准： - 开头，所有的HotSpot都支持  \n    非标准：-X 开头，特定版本HotSpot支持特定命令  \n    不稳定：-XX 开头，下个版本可能取消  \n    java -X  \n\n  1. 区分概念：内存泄漏memory leak，内存溢出out of memory\n  2. java -XX:+PrintCommandLineFlags -version 观查虚拟机配置\n  3. java -XX:+PrintFlagsInitial 默认参数值\n  4. java -XX:+PrintFlagsFinal 最终参数值\n  5. java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数\n  6. java -XX:+PrintFlagsFinal -version |grep GC\n\n#### 调优前的基础概念：\n1. 吞吐量：吞吐量（CPU用于运行用户代码的时间与CPU消耗的总时间的比值）用户代码时间 /（用户代码执行时间 + 垃圾回收时间）\n2. 响应时间：STW越短，响应时间越好\n\n所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量...\n\n问题：  \n科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）  \n响应时间：网站 GUI API （1.8 G1）  \n\n#### 什么是调优？\n1. 根据需求进行JVM规划和预调优\n2. 优化运行JVM运行环境（慢，卡顿）\n3. 解决JVM运行过程中出现的各种问题(OOM)\n\n#### 调优，从规划开始\n* 调优，从业务场景开始，没有业务场景的调优都是耍流氓\n* 无监控（压力测试，能看到结果），不调优\n\n* 步骤：\n  1. 熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）\n     1. 响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）\n     2. 吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]\n  2. 选择回收器组合\n  3. 计算内存需求（经验值）\n  4. 选定CPU（越高越好）\n  5. 设定年代大小、升级年龄\n  6. 设定日志参数\n     1. -Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause\n     2. 或者每天产生一个日志文件\n  7. 观察日志情况\n\n#### 解决JVM运行中的问题\n1. top命令观察问题：内存 & CPU 占用率。\n2. top -Hp 观察进程中的线程，哪个线程CPU和内存占比高\n3. jps(java process status) 参数 -mlv 定位具体java进程\n   jstack 定位线程状况，重点关注：WAITING BLOCKED\n   eg.\n   waiting on <0x0000000088ca3310> (a java.lang.Object)\n   假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁\n   怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE\n\n4. 为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称\n   怎么样自定义线程池里的线程名称？（自定义ThreadFactory）\n\n5. jinfo pid   \n   jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。\n\n6. jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）  \n   jstat -gc|gcnew|gcold|gcutil pid 500 10 : 每个500个毫秒打印GC的情况，共打印10次退出  \n   jstat -class pid   观察加载类的数量  \n   jstat -options       查看所有options  \n  \n7. jmap 一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本。\n   jmap -heap pid 打印heap的概要信息，GC使用的算法，heap（堆）的配置及JVM堆内存的使用情况.  \n   jmap -histo pid | head -200， 将实例对象最多的200个类  \n   jmap -histo:live pid  在*:live前会进行full gc，带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小\n   jmap -dump:format=b,file=xxx pid  \n    -dump 使用hprof二进制形式,输出jvm的heap内容到文件=.  live子选项是可选的，假如指定live选项,那么只输出活的对象到文件  \n    线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿，<font color='red'>线上慎用</font>（电商不适合用）\n    1：-XX:+HeapDumpOnOutOfMemoryError 设定了参数HeapDump，OOM的时候会自动产生堆转储文件\n    2：很多服务器备份（高可用），停掉这台服务器对其他服务器不影响\n    3：用在线定位\n\n8. 使用MAT / jhat /jvisualvm 进行dump文件分析\n    Jhat参考资料：https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html \n\n#### Arthas在线排查工具\n* 为什么需要在线排查？\n   在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 \n* 观察jvm信息\n* thread定位线程问题\n* dashboard 观察系统情况\n* heapdump + jhat分析\n* jad反编译  \n   动态代理生成类的问题定位  \n   第三方的类（观察代码）  \n   版本问题（确定自己最新提交的版本是不是被使用）  \n* redefine 热替换\n   目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性\n* sc  - search class\n* watch  - watch method\n\n### 三、常用参数\n#### GC算法的基础概念\n* Card Table\n  由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card\n  在结构上，Card Table用BitMap来实现\n\n#### GC常用参数\n* -Xmn -Xms -Xmx -Xss\n  年轻代 最小堆 最大堆 栈空间\n* -XX:+UseTLAB\n  使用TLAB(Thread Local Allocation Buffer)，默认打开\n* -XX:+PrintTLAB\n  打印TLAB的使用情况\n* -XX:TLABSize\n  设置TLAB大小\n* -XX:+DisableExplictGC\n  System.gc()不管用 ，FGC\n* -XX:+PrintGC\n* -XX:+PrintGCDetails\n* -XX:+PrintHeapAtGC\n* -XX:+PrintGCTimeStamps\n* -XX:+PrintGCApplicationConcurrentTime (低) 打印应用程序时间\n* -XX:+PrintGCApplicationStoppedTime （低） 打印暂停时长\n* -XX:+PrintReferenceGC （重要性低）记录回收了多少种不同引用类型的引用\n* -verbose:class 类加载详细过程\n* -XX:+PrintVMOptions\n* -XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial  必须会用\n* -Xloggc:/opt/log/gc.log\n* -XX:MaxTenuringThreshold 升代年龄，最大值15\n* -XX:PretenureSizeThreshold=1M //大对象直接存入老年代,默认值是0，意思是不管多大都是先在eden中分配内存\n* 锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 这些不建议设置\n\n\n#### Parallel常用参数\n* -XX:SurvivorRatio\n* -XX:+ParallelGCThreads 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同\n* -XX:+UseAdaptiveSizePolicy 自动选择各区大小比例\n\n#### CMS常用参数\n* -XX:+UseConcMarkSweepGC\n* -XX:ParallelCMSThreads CMS线程数量\n* -XX:CMSInitiatingOccupancyFraction  \n  使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）\n* -XX:+UseCMSCompactAtFullCollection\n  在FGC时进行压缩\n* -XX:CMSFullGCsBeforeCompaction\n  多少次FGC之后进行压缩\n* -XX:+CMSClassUnloadingEnabled\n* -XX:CMSInitiatingPermOccupancyFraction\n  达到什么比例时进行Perm回收\n* GCTimeRatio\n  设置GC时间占用程序运行时间的百分比\n* -XX:MaxGCPauseMillis\n  停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代\n* -XX:LargePageSizeInBytes=64m 内存分页\n\n#### G1常用参数\n* -XX:+UseG1GC\n* -XX:MaxGCPauseMillis\n  建议值，G1会尝试调整Young区的块数来达到这个值\n* -XX:GCPauseIntervalMillis\n  设置停顿间隔时间\n* -XX:+G1HeapRegionSize\n  分区大小，建议逐渐增大该值，1 2 4 8 16 32。\n  随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长\n  ZGC做了改进（动态区块大小）\n* G1NewSizePercent\n  新生代最小比例，默认为5%\n* G1MaxNewSizePercent\n  新生代最大比例，默认为60%\n* GCTimeRatio\n  GC时间建议比例，G1会根据这个值调整堆空间\n* ConcGCThreads\n  线程数量\n* InitiatingHeapOccupancyPercent\n  启动G1的堆空间占用比例\n\n### 四、参考资料\n1. https://docs.oracle.com/en/java/javase/13/\n2. https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\n3. http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp\n4. JVM调优参考文档：https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184\n5. https://www.oracle.com/technical-resources/articles/java/g1gc.html \n6. Arthas：https://github.com/alibaba/arthas\n   1. 启动arthas java -jar arthas-boot.jar\n   2. 绑定java进程\n   3. dashboard命令观察系统整体情况\n   4. help 查看帮助\n   5. help xx 查看具体命令帮助\n","slug":"GC","published":1,"updated":"2020-03-03T07:04:49.266Z","_id":"ck6ztaqud000b5xc9424641r7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、GC的基础知识\"><a href=\"#一、GC的基础知识\" class=\"headerlink\" title=\"一、GC的基础知识\"></a>一、GC的基础知识</h3><h4 id=\"什么是垃圾\"><a href=\"#什么是垃圾\" class=\"headerlink\" title=\"什么是垃圾\"></a>什么是垃圾</h4><p>没有任何引用指向的一个对象或者多个对象（循环引用）</p>\n<h4 id=\"如何定位垃圾\"><a href=\"#如何定位垃圾\" class=\"headerlink\" title=\"如何定位垃圾\"></a>如何定位垃圾</h4><ol>\n<li>引用计数（ReferenceCount）</li>\n<li>根可达算法(RootSearching)</li>\n</ol>\n<h4 id=\"常见的垃圾回收算法\"><a href=\"#常见的垃圾回收算法\" class=\"headerlink\" title=\"常见的垃圾回收算法\"></a>常见的垃圾回收算法</h4><ol>\n<li>标记清除(mark sweep) - 位置不连续 产生碎片 效率偏低（两遍扫描）</li>\n<li>拷贝算法 (copying) - 没有碎片，浪费空间</li>\n<li>标记压缩(mark compact) - 没有碎片，效率偏低（两遍扫描，指针需要调整）<a id=\"more\"></a>\n\n</li>\n</ol>\n<h4 id=\"JVM内存分代模型（用于分代垃圾回收算法）\"><a href=\"#JVM内存分代模型（用于分代垃圾回收算法）\" class=\"headerlink\" title=\"JVM内存分代模型（用于分代垃圾回收算法）\"></a>JVM内存分代模型（用于分代垃圾回收算法）</h4><ol>\n<li>部分垃圾回收器使用的模型<br>除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型<br>G1是逻辑分代，物理不分代<br>除此之外不仅逻辑分代，而且物理分代  </li>\n<li>新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace<ol>\n<li>永久代 元数据 - Class</li>\n<li>永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li>\n<li>字符串常量 1.7 - 永久代，1.8 - 堆</li>\n<li>MethodArea逻辑概念 - 永久代、元数据</li>\n</ol>\n</li>\n<li>新生代 = Eden + 2个suvivor区 <ol>\n<li>YGC回收之后，大多数的对象会被回收，活着的进入s0</li>\n<li>再次YGC，活着的对象eden + s0 -&gt; s1</li>\n<li>再次YGC，eden + s1 -&gt; s0</li>\n<li>年龄足够 -&gt; 老年代 （-XX:MaxTenuringThreshold=X X默认是15）</li>\n<li>s区装不下 -&gt; 老年代</li>\n</ol>\n</li>\n<li>老年代<ol>\n<li>顽固分子</li>\n<li>老年代满了FGC Full GC</li>\n<li>内存分配担保，在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。</li>\n</ol>\n</li>\n<li>GC Tuning (Generation)<ol>\n<li>尽量减少FGC</li>\n<li>MinorGC = YGC</li>\n<li>MajorGC = FGC</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"二、垃圾回收器及调优\"><a href=\"#二、垃圾回收器及调优\" class=\"headerlink\" title=\"二、垃圾回收器及调优\"></a>二、垃圾回收器及调优</h3><h4 id=\"常见的垃圾回收器\"><a href=\"#常见的垃圾回收器\" class=\"headerlink\" title=\"常见的垃圾回收器\"></a>常见的垃圾回收器</h4><p><img src=\"https://casparthh.github.io/2020/02/22/GC/gc.png\" alt=\"常用垃圾回收器\"></p>\n<ol>\n<li><p>JDK诞生 Serial追随，为提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，并发垃圾回收是因为无法忍受STW。</p>\n</li>\n<li><p>Serial：适用年轻代，串行回收</p>\n</li>\n<li><p>PS(Parallel Scavenge) 适用年轻代，并行回收</p>\n</li>\n<li><p>ParNew 适用年轻代，配合CMS的并行回收</p>\n</li>\n<li><p>SerialOld 适用老年代</p>\n</li>\n<li><p>ParallelOld 适用老年代，配合PS使用</p>\n</li>\n<li><p>CMS(ConcurrentMarkSweep) 老年代,并发的，垃圾回收和应用程序同时运行，降低STW(Stop The World)的时间(200ms)<br>CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定<br>CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收<br>算法：三色标记 + Incremental Update<br>工作过程：初始标记，并发标记，重新标记，并发清理<br>优点：并发收集，低停顿<br>缺点：占用大量的CPU，无法处理浮动垃圾，出现Concurrent Mode Failure，空间碎片  </p>\n</li>\n<li><p>G1(10ms)<br>算法：三色标记 + SATB (snapshot-at-the-beginning)<br>优势：并行与并发，分代收集，空间整合，可预测的停顿<br>步骤：初使标记，并发标记，最终标记，筛选回收  </p>\n</li>\n<li><p>ZGC (1ms)<br>算法：ColoredPointers + LoadBarrier</p>\n</li>\n<li><p>Shenandoah<br>算法：ColoredPointers + WriteBarrier</p>\n</li>\n<li><p>PS 和 PN区别的延伸阅读：<br>▪<a href=\"https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html</a></p>\n</li>\n<li><p>垃圾收集器跟内存大小的关系</p>\n<ol>\n<li>Serial 几十兆</li>\n<li>PS 上百兆 - 几个G</li>\n<li>CMS - 20G</li>\n<li>G1 - 上百G</li>\n<li>ZGC - 4T - 16T（JDK13）  </li>\n</ol>\n</li>\n<li><p>1.8默认的垃圾回收：PS + ParallelOld</p>\n</li>\n</ol>\n<h4 id=\"常见垃圾回收器组合参数设定：-1-8\"><a href=\"#常见垃圾回收器组合参数设定：-1-8\" class=\"headerlink\" title=\"常见垃圾回收器组合参数设定：(1.8)\"></a>常见垃圾回收器组合参数设定：(1.8)</h4><ul>\n<li>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old<ul>\n<li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li>\n</ul>\n</li>\n<li>-XX:+UseParNewGC = ParNew + SerialOld<ul>\n<li>这个组合已经很少用（在某些版本中已经废弃）</li>\n</ul>\n</li>\n<li>-XX:+UseConcurrentMarkSweepGC = ParNew + CMS + Serial Old</li>\n<li>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</li>\n<li>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</li>\n<li>-XX:+UseG1GC = G1</li>\n</ul>\n<h4 id=\"JVM调优第一步，了解JVM常用命令行参数\"><a href=\"#JVM调优第一步，了解JVM常用命令行参数\" class=\"headerlink\" title=\"JVM调优第一步，了解JVM常用命令行参数\"></a>JVM调优第一步，了解JVM常用命令行参数</h4><ul>\n<li><p>JVM的命令行参数参考：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>\n</li>\n<li><p>HotSpot参数分类<br>  标准： - 开头，所有的HotSpot都支持<br>  非标准：-X 开头，特定版本HotSpot支持特定命令<br>  不稳定：-XX 开头，下个版本可能取消<br>  java -X  </p>\n<ol>\n<li>区分概念：内存泄漏memory leak，内存溢出out of memory</li>\n<li>java -XX:+PrintCommandLineFlags -version 观查虚拟机配置</li>\n<li>java -XX:+PrintFlagsInitial 默认参数值</li>\n<li>java -XX:+PrintFlagsFinal 最终参数值</li>\n<li>java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数</li>\n<li>java -XX:+PrintFlagsFinal -version |grep GC</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"调优前的基础概念：\"><a href=\"#调优前的基础概念：\" class=\"headerlink\" title=\"调优前的基础概念：\"></a>调优前的基础概念：</h4><ol>\n<li>吞吐量：吞吐量（CPU用于运行用户代码的时间与CPU消耗的总时间的比值）用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li>\n<li>响应时间：STW越短，响应时间越好</li>\n</ol>\n<p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p>\n<p>问题：<br>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）<br>响应时间：网站 GUI API （1.8 G1）  </p>\n<h4 id=\"什么是调优？\"><a href=\"#什么是调优？\" class=\"headerlink\" title=\"什么是调优？\"></a>什么是调优？</h4><ol>\n<li>根据需求进行JVM规划和预调优</li>\n<li>优化运行JVM运行环境（慢，卡顿）</li>\n<li>解决JVM运行过程中出现的各种问题(OOM)</li>\n</ol>\n<h4 id=\"调优，从规划开始\"><a href=\"#调优，从规划开始\" class=\"headerlink\" title=\"调优，从规划开始\"></a>调优，从规划开始</h4><ul>\n<li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p>\n</li>\n<li><p>无监控（压力测试，能看到结果），不调优</p>\n</li>\n<li><p>步骤：</p>\n<ol>\n<li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol>\n<li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li>\n<li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li>\n</ol>\n</li>\n<li>选择回收器组合</li>\n<li>计算内存需求（经验值）</li>\n<li>选定CPU（越高越好）</li>\n<li>设定年代大小、升级年龄</li>\n<li>设定日志参数<ol>\n<li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li>\n<li>或者每天产生一个日志文件</li>\n</ol>\n</li>\n<li>观察日志情况</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"解决JVM运行中的问题\"><a href=\"#解决JVM运行中的问题\" class=\"headerlink\" title=\"解决JVM运行中的问题\"></a>解决JVM运行中的问题</h4><ol>\n<li><p>top命令观察问题：内存 &amp; CPU 占用率。</p>\n</li>\n<li><p>top -Hp 观察进程中的线程，哪个线程CPU和内存占比高</p>\n</li>\n<li><p>jps(java process status) 参数 -mlv 定位具体java进程<br>jstack 定位线程状况，重点关注：WAITING BLOCKED<br>eg.<br>waiting on &lt;0x0000000088ca3310&gt; (a java.lang.Object)<br>假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁<br>怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE</xx></xx></p>\n</li>\n<li><p>为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称<br>怎么样自定义线程池里的线程名称？（自定义ThreadFactory）</p>\n</li>\n<li><p>jinfo pid<br>jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。</p>\n</li>\n<li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）<br>jstat -gc|gcnew|gcold|gcutil pid 500 10 : 每个500个毫秒打印GC的情况，共打印10次退出<br>jstat -class pid   观察加载类的数量<br>jstat -options       查看所有options  </p>\n</li>\n<li><p>jmap 一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本。<br>jmap -heap pid 打印heap的概要信息，GC使用的算法，heap（堆）的配置及JVM堆内存的使用情况.<br>jmap -histo pid | head -200， 将实例对象最多的200个类<br>jmap -histo:live pid  在*:live前会进行full gc，带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小<br>jmap -dump:format=b,file=xxx pid<br> -dump 使用hprof二进制形式,输出jvm的heap内容到文件=.  live子选项是可选的，假如指定live选项,那么只输出活的对象到文件<br> 线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿，<font color=\"red\">线上慎用</font>（电商不适合用）<br> 1：-XX:+HeapDumpOnOutOfMemoryError 设定了参数HeapDump，OOM的时候会自动产生堆转储文件<br> 2：很多服务器备份（高可用），停掉这台服务器对其他服务器不影响<br> 3：用在线定位</p>\n</li>\n<li><p>使用MAT / jhat /jvisualvm 进行dump文件分析<br> Jhat参考资料：<a href=\"https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a> </p>\n</li>\n</ol>\n<h4 id=\"Arthas在线排查工具\"><a href=\"#Arthas在线排查工具\" class=\"headerlink\" title=\"Arthas在线排查工具\"></a>Arthas在线排查工具</h4><ul>\n<li>为什么需要在线排查？<br> 在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 </li>\n<li>观察jvm信息</li>\n<li>thread定位线程问题</li>\n<li>dashboard 观察系统情况</li>\n<li>heapdump + jhat分析</li>\n<li>jad反编译<br> 动态代理生成类的问题定位<br> 第三方的类（观察代码）<br> 版本问题（确定自己最新提交的版本是不是被使用）  </li>\n<li>redefine 热替换<br> 目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性</li>\n<li>sc  - search class</li>\n<li>watch  - watch method</li>\n</ul>\n<h3 id=\"三、常用参数\"><a href=\"#三、常用参数\" class=\"headerlink\" title=\"三、常用参数\"></a>三、常用参数</h3><h4 id=\"GC算法的基础概念\"><a href=\"#GC算法的基础概念\" class=\"headerlink\" title=\"GC算法的基础概念\"></a>GC算法的基础概念</h4><ul>\n<li>Card Table<br>由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card<br>在结构上，Card Table用BitMap来实现</li>\n</ul>\n<h4 id=\"GC常用参数\"><a href=\"#GC常用参数\" class=\"headerlink\" title=\"GC常用参数\"></a>GC常用参数</h4><ul>\n<li>-Xmn -Xms -Xmx -Xss<br>年轻代 最小堆 最大堆 栈空间</li>\n<li>-XX:+UseTLAB<br>使用TLAB(Thread Local Allocation Buffer)，默认打开</li>\n<li>-XX:+PrintTLAB<br>打印TLAB的使用情况</li>\n<li>-XX:TLABSize<br>设置TLAB大小</li>\n<li>-XX:+DisableExplictGC<br>System.gc()不管用 ，FGC</li>\n<li>-XX:+PrintGC</li>\n<li>-XX:+PrintGCDetails</li>\n<li>-XX:+PrintHeapAtGC</li>\n<li>-XX:+PrintGCTimeStamps</li>\n<li>-XX:+PrintGCApplicationConcurrentTime (低) 打印应用程序时间</li>\n<li>-XX:+PrintGCApplicationStoppedTime （低） 打印暂停时长</li>\n<li>-XX:+PrintReferenceGC （重要性低）记录回收了多少种不同引用类型的引用</li>\n<li>-verbose:class 类加载详细过程</li>\n<li>-XX:+PrintVMOptions</li>\n<li>-XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial  必须会用</li>\n<li>-Xloggc:/opt/log/gc.log</li>\n<li>-XX:MaxTenuringThreshold 升代年龄，最大值15</li>\n<li>-XX:PretenureSizeThreshold=1M //大对象直接存入老年代,默认值是0，意思是不管多大都是先在eden中分配内存</li>\n<li>锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 这些不建议设置</li>\n</ul>\n<h4 id=\"Parallel常用参数\"><a href=\"#Parallel常用参数\" class=\"headerlink\" title=\"Parallel常用参数\"></a>Parallel常用参数</h4><ul>\n<li>-XX:SurvivorRatio</li>\n<li>-XX:+ParallelGCThreads 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</li>\n<li>-XX:+UseAdaptiveSizePolicy 自动选择各区大小比例</li>\n</ul>\n<h4 id=\"CMS常用参数\"><a href=\"#CMS常用参数\" class=\"headerlink\" title=\"CMS常用参数\"></a>CMS常用参数</h4><ul>\n<li>-XX:+UseConcMarkSweepGC</li>\n<li>-XX:ParallelCMSThreads CMS线程数量</li>\n<li>-XX:CMSInitiatingOccupancyFraction<br>使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li>\n<li>-XX:+UseCMSCompactAtFullCollection<br>在FGC时进行压缩</li>\n<li>-XX:CMSFullGCsBeforeCompaction<br>多少次FGC之后进行压缩</li>\n<li>-XX:+CMSClassUnloadingEnabled</li>\n<li>-XX:CMSInitiatingPermOccupancyFraction<br>达到什么比例时进行Perm回收</li>\n<li>GCTimeRatio<br>设置GC时间占用程序运行时间的百分比</li>\n<li>-XX:MaxGCPauseMillis<br>停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</li>\n<li>-XX:LargePageSizeInBytes=64m 内存分页</li>\n</ul>\n<h4 id=\"G1常用参数\"><a href=\"#G1常用参数\" class=\"headerlink\" title=\"G1常用参数\"></a>G1常用参数</h4><ul>\n<li>-XX:+UseG1GC</li>\n<li>-XX:MaxGCPauseMillis<br>建议值，G1会尝试调整Young区的块数来达到这个值</li>\n<li>-XX:GCPauseIntervalMillis<br>设置停顿间隔时间</li>\n<li>-XX:+G1HeapRegionSize<br>分区大小，建议逐渐增大该值，1 2 4 8 16 32。<br>随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长<br>ZGC做了改进（动态区块大小）</li>\n<li>G1NewSizePercent<br>新生代最小比例，默认为5%</li>\n<li>G1MaxNewSizePercent<br>新生代最大比例，默认为60%</li>\n<li>GCTimeRatio<br>GC时间建议比例，G1会根据这个值调整堆空间</li>\n<li>ConcGCThreads<br>线程数量</li>\n<li>InitiatingHeapOccupancyPercent<br>启动G1的堆空间占用比例</li>\n</ul>\n<h3 id=\"四、参考资料\"><a href=\"#四、参考资料\" class=\"headerlink\" title=\"四、参考资料\"></a>四、参考资料</h3><ol>\n<li><a href=\"https://docs.oracle.com/en/java/javase/13/\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li>\n<li><a href=\"http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></li>\n<li>JVM调优参考文档：<a href=\"https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184</a></li>\n<li><a href=\"https://www.oracle.com/technical-resources/articles/java/g1gc.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technical-resources/articles/java/g1gc.html</a> </li>\n<li>Arthas：<a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a><ol>\n<li>启动arthas java -jar arthas-boot.jar</li>\n<li>绑定java进程</li>\n<li>dashboard命令观察系统整体情况</li>\n<li>help 查看帮助</li>\n<li>help xx 查看具体命令帮助</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、GC的基础知识\"><a href=\"#一、GC的基础知识\" class=\"headerlink\" title=\"一、GC的基础知识\"></a>一、GC的基础知识</h3><h4 id=\"什么是垃圾\"><a href=\"#什么是垃圾\" class=\"headerlink\" title=\"什么是垃圾\"></a>什么是垃圾</h4><p>没有任何引用指向的一个对象或者多个对象（循环引用）</p>\n<h4 id=\"如何定位垃圾\"><a href=\"#如何定位垃圾\" class=\"headerlink\" title=\"如何定位垃圾\"></a>如何定位垃圾</h4><ol>\n<li>引用计数（ReferenceCount）</li>\n<li>根可达算法(RootSearching)</li>\n</ol>\n<h4 id=\"常见的垃圾回收算法\"><a href=\"#常见的垃圾回收算法\" class=\"headerlink\" title=\"常见的垃圾回收算法\"></a>常见的垃圾回收算法</h4><ol>\n<li>标记清除(mark sweep) - 位置不连续 产生碎片 效率偏低（两遍扫描）</li>\n<li>拷贝算法 (copying) - 没有碎片，浪费空间</li>\n<li>标记压缩(mark compact) - 没有碎片，效率偏低（两遍扫描，指针需要调整）</li></ol>","more":"\n\n<h4 id=\"JVM内存分代模型（用于分代垃圾回收算法）\"><a href=\"#JVM内存分代模型（用于分代垃圾回收算法）\" class=\"headerlink\" title=\"JVM内存分代模型（用于分代垃圾回收算法）\"></a>JVM内存分代模型（用于分代垃圾回收算法）</h4><ol>\n<li>部分垃圾回收器使用的模型<br>除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型<br>G1是逻辑分代，物理不分代<br>除此之外不仅逻辑分代，而且物理分代  </li>\n<li>新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace<ol>\n<li>永久代 元数据 - Class</li>\n<li>永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li>\n<li>字符串常量 1.7 - 永久代，1.8 - 堆</li>\n<li>MethodArea逻辑概念 - 永久代、元数据</li>\n</ol>\n</li>\n<li>新生代 = Eden + 2个suvivor区 <ol>\n<li>YGC回收之后，大多数的对象会被回收，活着的进入s0</li>\n<li>再次YGC，活着的对象eden + s0 -&gt; s1</li>\n<li>再次YGC，eden + s1 -&gt; s0</li>\n<li>年龄足够 -&gt; 老年代 （-XX:MaxTenuringThreshold=X X默认是15）</li>\n<li>s区装不下 -&gt; 老年代</li>\n</ol>\n</li>\n<li>老年代<ol>\n<li>顽固分子</li>\n<li>老年代满了FGC Full GC</li>\n<li>内存分配担保，在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。</li>\n</ol>\n</li>\n<li>GC Tuning (Generation)<ol>\n<li>尽量减少FGC</li>\n<li>MinorGC = YGC</li>\n<li>MajorGC = FGC</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"二、垃圾回收器及调优\"><a href=\"#二、垃圾回收器及调优\" class=\"headerlink\" title=\"二、垃圾回收器及调优\"></a>二、垃圾回收器及调优</h3><h4 id=\"常见的垃圾回收器\"><a href=\"#常见的垃圾回收器\" class=\"headerlink\" title=\"常见的垃圾回收器\"></a>常见的垃圾回收器</h4><p><img src=\"https://casparthh.github.io/2020/02/22/GC/gc.png\" alt=\"常用垃圾回收器\"></p>\n<ol>\n<li><p>JDK诞生 Serial追随，为提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，并发垃圾回收是因为无法忍受STW。</p>\n</li>\n<li><p>Serial：适用年轻代，串行回收</p>\n</li>\n<li><p>PS(Parallel Scavenge) 适用年轻代，并行回收</p>\n</li>\n<li><p>ParNew 适用年轻代，配合CMS的并行回收</p>\n</li>\n<li><p>SerialOld 适用老年代</p>\n</li>\n<li><p>ParallelOld 适用老年代，配合PS使用</p>\n</li>\n<li><p>CMS(ConcurrentMarkSweep) 老年代,并发的，垃圾回收和应用程序同时运行，降低STW(Stop The World)的时间(200ms)<br>CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定<br>CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收<br>算法：三色标记 + Incremental Update<br>工作过程：初始标记，并发标记，重新标记，并发清理<br>优点：并发收集，低停顿<br>缺点：占用大量的CPU，无法处理浮动垃圾，出现Concurrent Mode Failure，空间碎片  </p>\n</li>\n<li><p>G1(10ms)<br>算法：三色标记 + SATB (snapshot-at-the-beginning)<br>优势：并行与并发，分代收集，空间整合，可预测的停顿<br>步骤：初使标记，并发标记，最终标记，筛选回收  </p>\n</li>\n<li><p>ZGC (1ms)<br>算法：ColoredPointers + LoadBarrier</p>\n</li>\n<li><p>Shenandoah<br>算法：ColoredPointers + WriteBarrier</p>\n</li>\n<li><p>PS 和 PN区别的延伸阅读：<br>▪<a href=\"https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html</a></p>\n</li>\n<li><p>垃圾收集器跟内存大小的关系</p>\n<ol>\n<li>Serial 几十兆</li>\n<li>PS 上百兆 - 几个G</li>\n<li>CMS - 20G</li>\n<li>G1 - 上百G</li>\n<li>ZGC - 4T - 16T（JDK13）  </li>\n</ol>\n</li>\n<li><p>1.8默认的垃圾回收：PS + ParallelOld</p>\n</li>\n</ol>\n<h4 id=\"常见垃圾回收器组合参数设定：-1-8\"><a href=\"#常见垃圾回收器组合参数设定：-1-8\" class=\"headerlink\" title=\"常见垃圾回收器组合参数设定：(1.8)\"></a>常见垃圾回收器组合参数设定：(1.8)</h4><ul>\n<li>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old<ul>\n<li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li>\n</ul>\n</li>\n<li>-XX:+UseParNewGC = ParNew + SerialOld<ul>\n<li>这个组合已经很少用（在某些版本中已经废弃）</li>\n</ul>\n</li>\n<li>-XX:+UseConcurrentMarkSweepGC = ParNew + CMS + Serial Old</li>\n<li>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</li>\n<li>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</li>\n<li>-XX:+UseG1GC = G1</li>\n</ul>\n<h4 id=\"JVM调优第一步，了解JVM常用命令行参数\"><a href=\"#JVM调优第一步，了解JVM常用命令行参数\" class=\"headerlink\" title=\"JVM调优第一步，了解JVM常用命令行参数\"></a>JVM调优第一步，了解JVM常用命令行参数</h4><ul>\n<li><p>JVM的命令行参数参考：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>\n</li>\n<li><p>HotSpot参数分类<br>  标准： - 开头，所有的HotSpot都支持<br>  非标准：-X 开头，特定版本HotSpot支持特定命令<br>  不稳定：-XX 开头，下个版本可能取消<br>  java -X  </p>\n<ol>\n<li>区分概念：内存泄漏memory leak，内存溢出out of memory</li>\n<li>java -XX:+PrintCommandLineFlags -version 观查虚拟机配置</li>\n<li>java -XX:+PrintFlagsInitial 默认参数值</li>\n<li>java -XX:+PrintFlagsFinal 最终参数值</li>\n<li>java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数</li>\n<li>java -XX:+PrintFlagsFinal -version |grep GC</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"调优前的基础概念：\"><a href=\"#调优前的基础概念：\" class=\"headerlink\" title=\"调优前的基础概念：\"></a>调优前的基础概念：</h4><ol>\n<li>吞吐量：吞吐量（CPU用于运行用户代码的时间与CPU消耗的总时间的比值）用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li>\n<li>响应时间：STW越短，响应时间越好</li>\n</ol>\n<p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p>\n<p>问题：<br>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）<br>响应时间：网站 GUI API （1.8 G1）  </p>\n<h4 id=\"什么是调优？\"><a href=\"#什么是调优？\" class=\"headerlink\" title=\"什么是调优？\"></a>什么是调优？</h4><ol>\n<li>根据需求进行JVM规划和预调优</li>\n<li>优化运行JVM运行环境（慢，卡顿）</li>\n<li>解决JVM运行过程中出现的各种问题(OOM)</li>\n</ol>\n<h4 id=\"调优，从规划开始\"><a href=\"#调优，从规划开始\" class=\"headerlink\" title=\"调优，从规划开始\"></a>调优，从规划开始</h4><ul>\n<li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p>\n</li>\n<li><p>无监控（压力测试，能看到结果），不调优</p>\n</li>\n<li><p>步骤：</p>\n<ol>\n<li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol>\n<li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li>\n<li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li>\n</ol>\n</li>\n<li>选择回收器组合</li>\n<li>计算内存需求（经验值）</li>\n<li>选定CPU（越高越好）</li>\n<li>设定年代大小、升级年龄</li>\n<li>设定日志参数<ol>\n<li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li>\n<li>或者每天产生一个日志文件</li>\n</ol>\n</li>\n<li>观察日志情况</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"解决JVM运行中的问题\"><a href=\"#解决JVM运行中的问题\" class=\"headerlink\" title=\"解决JVM运行中的问题\"></a>解决JVM运行中的问题</h4><ol>\n<li><p>top命令观察问题：内存 &amp; CPU 占用率。</p>\n</li>\n<li><p>top -Hp 观察进程中的线程，哪个线程CPU和内存占比高</p>\n</li>\n<li><p>jps(java process status) 参数 -mlv 定位具体java进程<br>jstack 定位线程状况，重点关注：WAITING BLOCKED<br>eg.<br>waiting on &lt;0x0000000088ca3310&gt; (a java.lang.Object)<br>假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁<br>怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE</xx></xx></p>\n</li>\n<li><p>为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称<br>怎么样自定义线程池里的线程名称？（自定义ThreadFactory）</p>\n</li>\n<li><p>jinfo pid<br>jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。</p>\n</li>\n<li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）<br>jstat -gc|gcnew|gcold|gcutil pid 500 10 : 每个500个毫秒打印GC的情况，共打印10次退出<br>jstat -class pid   观察加载类的数量<br>jstat -options       查看所有options  </p>\n</li>\n<li><p>jmap 一个可以输出所有内存中对象的工具，甚至可以将VM 中的heap，以二进制输出成文本。<br>jmap -heap pid 打印heap的概要信息，GC使用的算法，heap（堆）的配置及JVM堆内存的使用情况.<br>jmap -histo pid | head -200， 将实例对象最多的200个类<br>jmap -histo:live pid  在*:live前会进行full gc，带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小<br>jmap -dump:format=b,file=xxx pid<br> -dump 使用hprof二进制形式,输出jvm的heap内容到文件=.  live子选项是可选的，假如指定live选项,那么只输出活的对象到文件<br> 线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿，<font color=\"red\">线上慎用</font>（电商不适合用）<br> 1：-XX:+HeapDumpOnOutOfMemoryError 设定了参数HeapDump，OOM的时候会自动产生堆转储文件<br> 2：很多服务器备份（高可用），停掉这台服务器对其他服务器不影响<br> 3：用在线定位</p>\n</li>\n<li><p>使用MAT / jhat /jvisualvm 进行dump文件分析<br> Jhat参考资料：<a href=\"https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a> </p>\n</li>\n</ol>\n<h4 id=\"Arthas在线排查工具\"><a href=\"#Arthas在线排查工具\" class=\"headerlink\" title=\"Arthas在线排查工具\"></a>Arthas在线排查工具</h4><ul>\n<li>为什么需要在线排查？<br> 在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 </li>\n<li>观察jvm信息</li>\n<li>thread定位线程问题</li>\n<li>dashboard 观察系统情况</li>\n<li>heapdump + jhat分析</li>\n<li>jad反编译<br> 动态代理生成类的问题定位<br> 第三方的类（观察代码）<br> 版本问题（确定自己最新提交的版本是不是被使用）  </li>\n<li>redefine 热替换<br> 目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性</li>\n<li>sc  - search class</li>\n<li>watch  - watch method</li>\n</ul>\n<h3 id=\"三、常用参数\"><a href=\"#三、常用参数\" class=\"headerlink\" title=\"三、常用参数\"></a>三、常用参数</h3><h4 id=\"GC算法的基础概念\"><a href=\"#GC算法的基础概念\" class=\"headerlink\" title=\"GC算法的基础概念\"></a>GC算法的基础概念</h4><ul>\n<li>Card Table<br>由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card<br>在结构上，Card Table用BitMap来实现</li>\n</ul>\n<h4 id=\"GC常用参数\"><a href=\"#GC常用参数\" class=\"headerlink\" title=\"GC常用参数\"></a>GC常用参数</h4><ul>\n<li>-Xmn -Xms -Xmx -Xss<br>年轻代 最小堆 最大堆 栈空间</li>\n<li>-XX:+UseTLAB<br>使用TLAB(Thread Local Allocation Buffer)，默认打开</li>\n<li>-XX:+PrintTLAB<br>打印TLAB的使用情况</li>\n<li>-XX:TLABSize<br>设置TLAB大小</li>\n<li>-XX:+DisableExplictGC<br>System.gc()不管用 ，FGC</li>\n<li>-XX:+PrintGC</li>\n<li>-XX:+PrintGCDetails</li>\n<li>-XX:+PrintHeapAtGC</li>\n<li>-XX:+PrintGCTimeStamps</li>\n<li>-XX:+PrintGCApplicationConcurrentTime (低) 打印应用程序时间</li>\n<li>-XX:+PrintGCApplicationStoppedTime （低） 打印暂停时长</li>\n<li>-XX:+PrintReferenceGC （重要性低）记录回收了多少种不同引用类型的引用</li>\n<li>-verbose:class 类加载详细过程</li>\n<li>-XX:+PrintVMOptions</li>\n<li>-XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial  必须会用</li>\n<li>-Xloggc:/opt/log/gc.log</li>\n<li>-XX:MaxTenuringThreshold 升代年龄，最大值15</li>\n<li>-XX:PretenureSizeThreshold=1M //大对象直接存入老年代,默认值是0，意思是不管多大都是先在eden中分配内存</li>\n<li>锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 这些不建议设置</li>\n</ul>\n<h4 id=\"Parallel常用参数\"><a href=\"#Parallel常用参数\" class=\"headerlink\" title=\"Parallel常用参数\"></a>Parallel常用参数</h4><ul>\n<li>-XX:SurvivorRatio</li>\n<li>-XX:+ParallelGCThreads 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</li>\n<li>-XX:+UseAdaptiveSizePolicy 自动选择各区大小比例</li>\n</ul>\n<h4 id=\"CMS常用参数\"><a href=\"#CMS常用参数\" class=\"headerlink\" title=\"CMS常用参数\"></a>CMS常用参数</h4><ul>\n<li>-XX:+UseConcMarkSweepGC</li>\n<li>-XX:ParallelCMSThreads CMS线程数量</li>\n<li>-XX:CMSInitiatingOccupancyFraction<br>使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li>\n<li>-XX:+UseCMSCompactAtFullCollection<br>在FGC时进行压缩</li>\n<li>-XX:CMSFullGCsBeforeCompaction<br>多少次FGC之后进行压缩</li>\n<li>-XX:+CMSClassUnloadingEnabled</li>\n<li>-XX:CMSInitiatingPermOccupancyFraction<br>达到什么比例时进行Perm回收</li>\n<li>GCTimeRatio<br>设置GC时间占用程序运行时间的百分比</li>\n<li>-XX:MaxGCPauseMillis<br>停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</li>\n<li>-XX:LargePageSizeInBytes=64m 内存分页</li>\n</ul>\n<h4 id=\"G1常用参数\"><a href=\"#G1常用参数\" class=\"headerlink\" title=\"G1常用参数\"></a>G1常用参数</h4><ul>\n<li>-XX:+UseG1GC</li>\n<li>-XX:MaxGCPauseMillis<br>建议值，G1会尝试调整Young区的块数来达到这个值</li>\n<li>-XX:GCPauseIntervalMillis<br>设置停顿间隔时间</li>\n<li>-XX:+G1HeapRegionSize<br>分区大小，建议逐渐增大该值，1 2 4 8 16 32。<br>随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长<br>ZGC做了改进（动态区块大小）</li>\n<li>G1NewSizePercent<br>新生代最小比例，默认为5%</li>\n<li>G1MaxNewSizePercent<br>新生代最大比例，默认为60%</li>\n<li>GCTimeRatio<br>GC时间建议比例，G1会根据这个值调整堆空间</li>\n<li>ConcGCThreads<br>线程数量</li>\n<li>InitiatingHeapOccupancyPercent<br>启动G1的堆空间占用比例</li>\n</ul>\n<h3 id=\"四、参考资料\"><a href=\"#四、参考资料\" class=\"headerlink\" title=\"四、参考资料\"></a>四、参考资料</h3><ol>\n<li><a href=\"https://docs.oracle.com/en/java/javase/13/\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li>\n<li><a href=\"http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></li>\n<li>JVM调优参考文档：<a href=\"https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184</a></li>\n<li><a href=\"https://www.oracle.com/technical-resources/articles/java/g1gc.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technical-resources/articles/java/g1gc.html</a> </li>\n<li>Arthas：<a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a><ol>\n<li>启动arthas java -jar arthas-boot.jar</li>\n<li>绑定java进程</li>\n<li>dashboard命令观察系统整体情况</li>\n<li>help 查看帮助</li>\n<li>help xx 查看具体命令帮助</li>\n</ol>\n</li>\n</ol>"},{"title":"多线程 - 线程池","date":"2020-02-16T13:05:29.000Z","toc":true,"_content":"#### 一、Executor\n执行者，是一个接口类，他有一个方法叫执行，那么执行的东西是 Runnable。\n\n#### 二、ExecutorService\n是从Executor继承，除了去实现Executor可以去执行一个任务之外，还完善了整个任务执行器的一个生命周期，就拿线程池来举例子，一个线程池里面一堆的线程就是一堆的工人，执行完一个任务之后我这个线程怎么结束啊；  \n线程池定义了这样一些个方法：\n* void shutdown();//结束\n* List<Runnable> shutdownNow();//马上结束\n* boolean isShutdown();//是否结束了\n* boolean isTerminated();//是不是整体都执行完了\n* boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;//等着结束，等多长时间，时间到了还不结束的话他 就返回false\n* <T> Future<T> submit(Callable<T> task);\n* Future<?> submit(Runnable task);\n* List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException;\n* <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException;\n<!--more-->\n\n```java\npublic class ExecutroServiceTest {\n\n    public static void main(String[] args) {\n        ExecutorService es = Executors.newCachedThreadPool();\n        FutureTask<Integer> task = new FutureTask(() -> {\n            System.out.println(\"Executor Service Test\");\n            return 1;\n        });\n        es.execute(task);\n        es.shutdownNow();\n    }\n}\n```\n\n他是实现了一些个线程的线程池的生命周期的东西，扩展了Executor的接口，真正的线程池的现实是在ExecutorService的这个基础上来实现的。  \nExecutorService的时候你会发现他除了Executor执行任务之外还有submit提交任务，执行任务是直接拿过来马上运行，而submit是扔给这个线程池，什么时候运行由这个线程池来决定，相当于 是异步的，我只要往里面一扔就不管了。那好，如果不管的话什么时候他有结果啊，这里面就涉及了比较新的类:比如说Future、RunnableFuture、FutureTask。\n\n#### 三、Callable\n以前定义一个线程的任务只能去实现Runnable接口，那在1.5之后他就增加了Callable这个接口。  \nCallable是什么，他类似于Runnable，不过 Callable可以有返回值。  \n```java\npublic interface Callable<V> {\n    /**\n     * Computes a result, or throws an exception if unable to do so.\n     *\n     * @return computed result\n     * @throws Exception if unable to compute a result\n    */\n    V call() throws Exception;\n}\n```\n\n#### 四、Future\nFuture代表的是那个Callable被执行完了之后我怎么才能拿到那个结果啊，它会封装到一个Future里面。\nFuture将来，未来。未来你执行完之后可以把这个结果放到这个未来有可能执行完的结果里头，所以Future代表的是未来执行完的一个结果。\n把Callable的任务扔给线程池，线程池异步的执行完了，就是把任务交给线程池之后，调用get方法直到有结果之后get会返回。Callable一般是配合线程池和Future来用的。\n\n#### 五、FutureTask\n其实更灵活的一个用法是FutureTask，即是一个Future同时又是一个Task，原来这Callable只能一个Task只能是一个任务但是他不能作为一个Future来用。这个FutureTask相当于是我自己可以作为一个任务来用，同时这个任务完成之后的结果也存在于这个对象里，为什么他能做到这一点，因 为FutureTask他实现了RunnableFuture，而RunnableFuture即实现了Runnable又实现了Future，所以他即是一个任务又是一个Future\n```java\npublic class FutrueTaskTest {\n\n    public static void main(String[] args) {\n        FutureTask task = new FutureTask(()->{\n            System.out.println(\"future task test\");\n            return 1;\n        });\n        new Thread(task).start();\n    }\n}\n```\n\n#### 六、CompletableFuture\nCompletableFuture他的底层用的是ForkJoinPool，底层特别复杂，但是用法特别灵活。\n\n#### 七、目前JDK提供的有两种类型\n1. ThreadPoolExecutor 普通的线程池\n2. ForkJoinPool\n\n#### 八、ThreadPoolExecutor\nThreadPoolExecutor他的父类是AbstractExecutorService，AbstractExecutorService 实现了 ExecutorService，再ExecutorService的父类是Executor，所以ThreadPoolExecutor就相当于线程池的执行器  \n\n定义这一个线程池，这里面的七个参数:\n1. corePoolSoze 核心线程数，最开始的时候是有这个线程池里面是有一定的核心线程数 的;\n2. maximumPoolSize 最大线程数，线程数不够了，能扩展到最大线程是多少; \n3. keepAliveTime 生存时间，意思是这个线程有很长时间没干活了请你把它归还给操作系\n4. TimeUnit.SECONDS 生存时间的单位到底是毫秒纳秒还是秒自己去定义;\n5. 任务队列，就是我们前面讲的BlockingQueue，各种各样的BlockingQueue都可以;\n6. 线程工厂, 要去实现ThreadFactory的接口，这个接口只有一个方法叫newThread，所以就是产生线程的，可以通过这种方式产生自定义的线程，默认产生的是defaultThreadFactory，而defaultThreadFactory 产生线程的时候有几个特点: new出来的时候指定了group制定了线程名字，然后指定的这个线程 绝对不是守护线程，设定好你线程的优先级。自己可以定义产生的到底是什么样的线程，指定线程名叫什么(为什么要指定线程名称，有什么意义，就是可以方便出错是回溯);\n7. 拒绝策略，指的是线程池忙，而且任务队列满这种情况下我们就要执行各种各样的拒绝策略，\n   jdk默认提供了四种拒绝策略，也是可以自定义的。\n    * 1:Abort:抛异常 \n    * 2:Discard:扔掉，不抛异常 \n    * 3:DiscardOldest:扔掉排队时间最久的 \n    * 4:CallerRuns:调用者处理服务  \n   一般情况这四种我们会自定义策略，去实现这个拒绝策略的接口，处理的方式是一般我们的消息需要保存下来，并且记录日志。\n\n#### 九、JDK给我们提供了一些默认的线程池的实现\n##### 1. SingleThreadPool\n只有一个线程，这个一个线程的线程池可以保证我们扔进去的任务是顺序执行的。\n```\nExecutorService service = Executors.newSingleThreadExecutor();\n\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n##### 2. CachedThreadPool \nCachedThreadPool的特点，就是你来一个任务我给你启动一个线程，当然前提是我的线程池里面有线程存在而且他还没有到达60秒钟的回收时间的时候，来一个任务，如果有线程存在我就用现有的线程，但是在有新的任务来的时候，如果其他线程忙就启动一个新的，CachedThreadPool用的任务队列是 synchronousQueue，它是一个手递手容量为空的Queue，就是你来一个东西必须得有一个线程把他拿走，不然我提交任务的线程从这阻塞住了。\n```\nExecutorService executor = Executors.newCachedThreadPool();\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n```\n\n##### 3. FixedThreadPool\nFixedThreadPool指定一个参数，到底有多少个线程，你看他的核心线程和最大线程都是固定的，因为他的最大线程和核心线程都是固定的就没有回收之说，所以把keepAliveTime指定成0，这里用的是LinkedBlockingQueue\n```\nExecutorService executor = Executors.newFixedThreadPool(10);\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n##### 4. ScheduledPool\n定时任务线程池，隔一段时间之后这个任务会执行。这个就是我们专门用来执行定时任务的一个线程池。看源码，我们newScheduledThreadPool的时 候他返回的是ScheduledThreadPoolExecutor，然后在ScheduledThreadPoolExecutor里面他调用了 super，他的super又是ThreadPoolExecutor，它本质上还是ThreadPoolExecutor，所以并不是别的，参数还是ThreadPool的七个参数。这是专门给定时任务用的这样的一个线程池。\n```\nExecutorService executor = Executors.newScheduledThreadPool(10);\n\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE,\n              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\n              new DelayedWorkQueue());\n    }\n```\n\n##### 5. WorkStealingPool (它实际上是new了一个ForkJoinPool)\nWorkStealing指的是和原来线程池的区别每一个线程都有自己单独队列，所以任务不断往里扔的时候它会在每一个线程的队列上不断的累积，让某一个线程执行完自己的任务之后就回去另外一个线程上面偷，所以这个叫WorkStealing。\n```\nExecutorService executor = Executors.newWorkStealingPool();\n\npublic static ExecutorService newWorkStealingPool() {\n    return new ForkJoinPool\n        (Runtime.getRuntime().availableProcessors(),\n         ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n         null, true);\n}\n```\n##### 6. ForkJoinPool\n它适合把大任务切分成一个一个的小任务去运行，小任务还是觉得比较大，再切。切完这个任务执行完了要进行一个汇总。\n\n##### 7. Cache vs Fixed\n什么时候用Cache什么时候用Fixed，你得精确的控制有多少个线程数，控制数量问题多数情况下得预估并发量。如果线程池中的数量过多，最终他们会竞争稀缺的处理器和内存资源，浪费大量的时间在上下文切换上，反之，如果线程的数目过少，正如你的应用所面临的情况，处理器的一些核可能就无法充分利用。\n《Java并发编程实战》作者 Brian Goetz建议，线程池大小与处理器的利用率之比可以使用公式来进行计算估算:线程池=你有多少个cpu 乘以 cpu期望利用率 乘以 (1+ W/C)。W除以C是等待时间与计算时间的比率。\n\n\n#### 十、线程池的一些5种状态\n1. RUNNING:正常运行的;\n2. SHUTDOWN:调用了shutdown方法了进入了shutdown状态; \n3. STOP:调用了shutdownnow马上让他停止; \n4. TIDYING:调用了shutdown然后这个线程也执行完了，现在正在整理的这个过程叫TIDYING; \n5. TERMINATED:整个线程全部结束;\n","source":"_posts/2020-02-22-ThreadPool.md","raw":"---\ntitle: 多线程 - 线程池\ndate: 2020-02-16 21:05:29\ntoc: true\ncategories:\n- 技术笔记\ntags: \n- Thread\n---\n#### 一、Executor\n执行者，是一个接口类，他有一个方法叫执行，那么执行的东西是 Runnable。\n\n#### 二、ExecutorService\n是从Executor继承，除了去实现Executor可以去执行一个任务之外，还完善了整个任务执行器的一个生命周期，就拿线程池来举例子，一个线程池里面一堆的线程就是一堆的工人，执行完一个任务之后我这个线程怎么结束啊；  \n线程池定义了这样一些个方法：\n* void shutdown();//结束\n* List<Runnable> shutdownNow();//马上结束\n* boolean isShutdown();//是否结束了\n* boolean isTerminated();//是不是整体都执行完了\n* boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;//等着结束，等多长时间，时间到了还不结束的话他 就返回false\n* <T> Future<T> submit(Callable<T> task);\n* Future<?> submit(Runnable task);\n* List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException;\n* <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException;\n<!--more-->\n\n```java\npublic class ExecutroServiceTest {\n\n    public static void main(String[] args) {\n        ExecutorService es = Executors.newCachedThreadPool();\n        FutureTask<Integer> task = new FutureTask(() -> {\n            System.out.println(\"Executor Service Test\");\n            return 1;\n        });\n        es.execute(task);\n        es.shutdownNow();\n    }\n}\n```\n\n他是实现了一些个线程的线程池的生命周期的东西，扩展了Executor的接口，真正的线程池的现实是在ExecutorService的这个基础上来实现的。  \nExecutorService的时候你会发现他除了Executor执行任务之外还有submit提交任务，执行任务是直接拿过来马上运行，而submit是扔给这个线程池，什么时候运行由这个线程池来决定，相当于 是异步的，我只要往里面一扔就不管了。那好，如果不管的话什么时候他有结果啊，这里面就涉及了比较新的类:比如说Future、RunnableFuture、FutureTask。\n\n#### 三、Callable\n以前定义一个线程的任务只能去实现Runnable接口，那在1.5之后他就增加了Callable这个接口。  \nCallable是什么，他类似于Runnable，不过 Callable可以有返回值。  \n```java\npublic interface Callable<V> {\n    /**\n     * Computes a result, or throws an exception if unable to do so.\n     *\n     * @return computed result\n     * @throws Exception if unable to compute a result\n    */\n    V call() throws Exception;\n}\n```\n\n#### 四、Future\nFuture代表的是那个Callable被执行完了之后我怎么才能拿到那个结果啊，它会封装到一个Future里面。\nFuture将来，未来。未来你执行完之后可以把这个结果放到这个未来有可能执行完的结果里头，所以Future代表的是未来执行完的一个结果。\n把Callable的任务扔给线程池，线程池异步的执行完了，就是把任务交给线程池之后，调用get方法直到有结果之后get会返回。Callable一般是配合线程池和Future来用的。\n\n#### 五、FutureTask\n其实更灵活的一个用法是FutureTask，即是一个Future同时又是一个Task，原来这Callable只能一个Task只能是一个任务但是他不能作为一个Future来用。这个FutureTask相当于是我自己可以作为一个任务来用，同时这个任务完成之后的结果也存在于这个对象里，为什么他能做到这一点，因 为FutureTask他实现了RunnableFuture，而RunnableFuture即实现了Runnable又实现了Future，所以他即是一个任务又是一个Future\n```java\npublic class FutrueTaskTest {\n\n    public static void main(String[] args) {\n        FutureTask task = new FutureTask(()->{\n            System.out.println(\"future task test\");\n            return 1;\n        });\n        new Thread(task).start();\n    }\n}\n```\n\n#### 六、CompletableFuture\nCompletableFuture他的底层用的是ForkJoinPool，底层特别复杂，但是用法特别灵活。\n\n#### 七、目前JDK提供的有两种类型\n1. ThreadPoolExecutor 普通的线程池\n2. ForkJoinPool\n\n#### 八、ThreadPoolExecutor\nThreadPoolExecutor他的父类是AbstractExecutorService，AbstractExecutorService 实现了 ExecutorService，再ExecutorService的父类是Executor，所以ThreadPoolExecutor就相当于线程池的执行器  \n\n定义这一个线程池，这里面的七个参数:\n1. corePoolSoze 核心线程数，最开始的时候是有这个线程池里面是有一定的核心线程数 的;\n2. maximumPoolSize 最大线程数，线程数不够了，能扩展到最大线程是多少; \n3. keepAliveTime 生存时间，意思是这个线程有很长时间没干活了请你把它归还给操作系\n4. TimeUnit.SECONDS 生存时间的单位到底是毫秒纳秒还是秒自己去定义;\n5. 任务队列，就是我们前面讲的BlockingQueue，各种各样的BlockingQueue都可以;\n6. 线程工厂, 要去实现ThreadFactory的接口，这个接口只有一个方法叫newThread，所以就是产生线程的，可以通过这种方式产生自定义的线程，默认产生的是defaultThreadFactory，而defaultThreadFactory 产生线程的时候有几个特点: new出来的时候指定了group制定了线程名字，然后指定的这个线程 绝对不是守护线程，设定好你线程的优先级。自己可以定义产生的到底是什么样的线程，指定线程名叫什么(为什么要指定线程名称，有什么意义，就是可以方便出错是回溯);\n7. 拒绝策略，指的是线程池忙，而且任务队列满这种情况下我们就要执行各种各样的拒绝策略，\n   jdk默认提供了四种拒绝策略，也是可以自定义的。\n    * 1:Abort:抛异常 \n    * 2:Discard:扔掉，不抛异常 \n    * 3:DiscardOldest:扔掉排队时间最久的 \n    * 4:CallerRuns:调用者处理服务  \n   一般情况这四种我们会自定义策略，去实现这个拒绝策略的接口，处理的方式是一般我们的消息需要保存下来，并且记录日志。\n\n#### 九、JDK给我们提供了一些默认的线程池的实现\n##### 1. SingleThreadPool\n只有一个线程，这个一个线程的线程池可以保证我们扔进去的任务是顺序执行的。\n```\nExecutorService service = Executors.newSingleThreadExecutor();\n\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n##### 2. CachedThreadPool \nCachedThreadPool的特点，就是你来一个任务我给你启动一个线程，当然前提是我的线程池里面有线程存在而且他还没有到达60秒钟的回收时间的时候，来一个任务，如果有线程存在我就用现有的线程，但是在有新的任务来的时候，如果其他线程忙就启动一个新的，CachedThreadPool用的任务队列是 synchronousQueue，它是一个手递手容量为空的Queue，就是你来一个东西必须得有一个线程把他拿走，不然我提交任务的线程从这阻塞住了。\n```\nExecutorService executor = Executors.newCachedThreadPool();\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n```\n\n##### 3. FixedThreadPool\nFixedThreadPool指定一个参数，到底有多少个线程，你看他的核心线程和最大线程都是固定的，因为他的最大线程和核心线程都是固定的就没有回收之说，所以把keepAliveTime指定成0，这里用的是LinkedBlockingQueue\n```\nExecutorService executor = Executors.newFixedThreadPool(10);\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n##### 4. ScheduledPool\n定时任务线程池，隔一段时间之后这个任务会执行。这个就是我们专门用来执行定时任务的一个线程池。看源码，我们newScheduledThreadPool的时 候他返回的是ScheduledThreadPoolExecutor，然后在ScheduledThreadPoolExecutor里面他调用了 super，他的super又是ThreadPoolExecutor，它本质上还是ThreadPoolExecutor，所以并不是别的，参数还是ThreadPool的七个参数。这是专门给定时任务用的这样的一个线程池。\n```\nExecutorService executor = Executors.newScheduledThreadPool(10);\n\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE,\n              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\n              new DelayedWorkQueue());\n    }\n```\n\n##### 5. WorkStealingPool (它实际上是new了一个ForkJoinPool)\nWorkStealing指的是和原来线程池的区别每一个线程都有自己单独队列，所以任务不断往里扔的时候它会在每一个线程的队列上不断的累积，让某一个线程执行完自己的任务之后就回去另外一个线程上面偷，所以这个叫WorkStealing。\n```\nExecutorService executor = Executors.newWorkStealingPool();\n\npublic static ExecutorService newWorkStealingPool() {\n    return new ForkJoinPool\n        (Runtime.getRuntime().availableProcessors(),\n         ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n         null, true);\n}\n```\n##### 6. ForkJoinPool\n它适合把大任务切分成一个一个的小任务去运行，小任务还是觉得比较大，再切。切完这个任务执行完了要进行一个汇总。\n\n##### 7. Cache vs Fixed\n什么时候用Cache什么时候用Fixed，你得精确的控制有多少个线程数，控制数量问题多数情况下得预估并发量。如果线程池中的数量过多，最终他们会竞争稀缺的处理器和内存资源，浪费大量的时间在上下文切换上，反之，如果线程的数目过少，正如你的应用所面临的情况，处理器的一些核可能就无法充分利用。\n《Java并发编程实战》作者 Brian Goetz建议，线程池大小与处理器的利用率之比可以使用公式来进行计算估算:线程池=你有多少个cpu 乘以 cpu期望利用率 乘以 (1+ W/C)。W除以C是等待时间与计算时间的比率。\n\n\n#### 十、线程池的一些5种状态\n1. RUNNING:正常运行的;\n2. SHUTDOWN:调用了shutdown方法了进入了shutdown状态; \n3. STOP:调用了shutdownnow马上让他停止; \n4. TIDYING:调用了shutdown然后这个线程也执行完了，现在正在整理的这个过程叫TIDYING; \n5. TERMINATED:整个线程全部结束;\n","slug":"ThreadPool","published":1,"updated":"2020-03-02T23:44:38.589Z","_id":"ck6ztaquf000c5xc94st1dlff","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一、Executor\"><a href=\"#一、Executor\" class=\"headerlink\" title=\"一、Executor\"></a>一、Executor</h4><p>执行者，是一个接口类，他有一个方法叫执行，那么执行的东西是 Runnable。</p>\n<h4 id=\"二、ExecutorService\"><a href=\"#二、ExecutorService\" class=\"headerlink\" title=\"二、ExecutorService\"></a>二、ExecutorService</h4><p>是从Executor继承，除了去实现Executor可以去执行一个任务之外，还完善了整个任务执行器的一个生命周期，就拿线程池来举例子，一个线程池里面一堆的线程就是一堆的工人，执行完一个任务之后我这个线程怎么结束啊；<br>线程池定义了这样一些个方法：</p>\n<ul>\n<li>void shutdown();//结束</li>\n<li>List<Runnable> shutdownNow();//马上结束</Runnable></li>\n<li>boolean isShutdown();//是否结束了</li>\n<li>boolean isTerminated();//是不是整体都执行完了</li>\n<li>boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;//等着结束，等多长时间，时间到了还不结束的话他 就返回false</li>\n<li><T> Future<T> submit(Callable<T> task);</T></T></T></li>\n<li>Future&lt;?&gt; submit(Runnable task);</li>\n<li>List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks) throws InterruptedException;</T></T></li>\n<li><T> T invokeAny(Collection&lt;? extends Callable<T>&gt; tasks) throws InterruptedException, ExecutionException;<a id=\"more\"></a>\n\n</T></T></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutroServiceTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> FutureTask(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Executor Service Test\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        es.execute(task);</span><br><span class=\"line\">        es.shutdownNow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>他是实现了一些个线程的线程池的生命周期的东西，扩展了Executor的接口，真正的线程池的现实是在ExecutorService的这个基础上来实现的。<br>ExecutorService的时候你会发现他除了Executor执行任务之外还有submit提交任务，执行任务是直接拿过来马上运行，而submit是扔给这个线程池，什么时候运行由这个线程池来决定，相当于 是异步的，我只要往里面一扔就不管了。那好，如果不管的话什么时候他有结果啊，这里面就涉及了比较新的类:比如说Future、RunnableFuture、FutureTask。</p>\n<h4 id=\"三、Callable\"><a href=\"#三、Callable\" class=\"headerlink\" title=\"三、Callable\"></a>三、Callable</h4><p>以前定义一个线程的任务只能去实现Runnable接口，那在1.5之后他就增加了Callable这个接口。<br>Callable是什么，他类似于Runnable，不过 Callable可以有返回值。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> computed result</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception if unable to compute a result</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、Future\"><a href=\"#四、Future\" class=\"headerlink\" title=\"四、Future\"></a>四、Future</h4><p>Future代表的是那个Callable被执行完了之后我怎么才能拿到那个结果啊，它会封装到一个Future里面。<br>Future将来，未来。未来你执行完之后可以把这个结果放到这个未来有可能执行完的结果里头，所以Future代表的是未来执行完的一个结果。<br>把Callable的任务扔给线程池，线程池异步的执行完了，就是把任务交给线程池之后，调用get方法直到有结果之后get会返回。Callable一般是配合线程池和Future来用的。</p>\n<h4 id=\"五、FutureTask\"><a href=\"#五、FutureTask\" class=\"headerlink\" title=\"五、FutureTask\"></a>五、FutureTask</h4><p>其实更灵活的一个用法是FutureTask，即是一个Future同时又是一个Task，原来这Callable只能一个Task只能是一个任务但是他不能作为一个Future来用。这个FutureTask相当于是我自己可以作为一个任务来用，同时这个任务完成之后的结果也存在于这个对象里，为什么他能做到这一点，因 为FutureTask他实现了RunnableFuture，而RunnableFuture即实现了Runnable又实现了Future，所以他即是一个任务又是一个Future</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutrueTaskTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FutureTask task = <span class=\"keyword\">new</span> FutureTask(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"future task test\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(task).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六、CompletableFuture\"><a href=\"#六、CompletableFuture\" class=\"headerlink\" title=\"六、CompletableFuture\"></a>六、CompletableFuture</h4><p>CompletableFuture他的底层用的是ForkJoinPool，底层特别复杂，但是用法特别灵活。</p>\n<h4 id=\"七、目前JDK提供的有两种类型\"><a href=\"#七、目前JDK提供的有两种类型\" class=\"headerlink\" title=\"七、目前JDK提供的有两种类型\"></a>七、目前JDK提供的有两种类型</h4><ol>\n<li>ThreadPoolExecutor 普通的线程池</li>\n<li>ForkJoinPool</li>\n</ol>\n<h4 id=\"八、ThreadPoolExecutor\"><a href=\"#八、ThreadPoolExecutor\" class=\"headerlink\" title=\"八、ThreadPoolExecutor\"></a>八、ThreadPoolExecutor</h4><p>ThreadPoolExecutor他的父类是AbstractExecutorService，AbstractExecutorService 实现了 ExecutorService，再ExecutorService的父类是Executor，所以ThreadPoolExecutor就相当于线程池的执行器  </p>\n<p>定义这一个线程池，这里面的七个参数:</p>\n<ol>\n<li>corePoolSoze 核心线程数，最开始的时候是有这个线程池里面是有一定的核心线程数 的;</li>\n<li>maximumPoolSize 最大线程数，线程数不够了，能扩展到最大线程是多少; </li>\n<li>keepAliveTime 生存时间，意思是这个线程有很长时间没干活了请你把它归还给操作系</li>\n<li>TimeUnit.SECONDS 生存时间的单位到底是毫秒纳秒还是秒自己去定义;</li>\n<li>任务队列，就是我们前面讲的BlockingQueue，各种各样的BlockingQueue都可以;</li>\n<li>线程工厂, 要去实现ThreadFactory的接口，这个接口只有一个方法叫newThread，所以就是产生线程的，可以通过这种方式产生自定义的线程，默认产生的是defaultThreadFactory，而defaultThreadFactory 产生线程的时候有几个特点: new出来的时候指定了group制定了线程名字，然后指定的这个线程 绝对不是守护线程，设定好你线程的优先级。自己可以定义产生的到底是什么样的线程，指定线程名叫什么(为什么要指定线程名称，有什么意义，就是可以方便出错是回溯);</li>\n<li>拒绝策略，指的是线程池忙，而且任务队列满这种情况下我们就要执行各种各样的拒绝策略，<br>jdk默认提供了四种拒绝策略，也是可以自定义的。<ul>\n<li>1:Abort:抛异常 </li>\n<li>2:Discard:扔掉，不抛异常 </li>\n<li>3:DiscardOldest:扔掉排队时间最久的 </li>\n<li>4:CallerRuns:调用者处理服务<br>一般情况这四种我们会自定义策略，去实现这个拒绝策略的接口，处理的方式是一般我们的消息需要保存下来，并且记录日志。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"九、JDK给我们提供了一些默认的线程池的实现\"><a href=\"#九、JDK给我们提供了一些默认的线程池的实现\" class=\"headerlink\" title=\"九、JDK给我们提供了一些默认的线程池的实现\"></a>九、JDK给我们提供了一些默认的线程池的实现</h4><h5 id=\"1-SingleThreadPool\"><a href=\"#1-SingleThreadPool\" class=\"headerlink\" title=\"1. SingleThreadPool\"></a>1. SingleThreadPool</h5><p>只有一个线程，这个一个线程的线程池可以保证我们扔进去的任务是顺序执行的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service &#x3D; Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class=\"line\">    return new FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (new ThreadPoolExecutor(1, 1,</span><br><span class=\"line\">                                0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-CachedThreadPool\"><a href=\"#2-CachedThreadPool\" class=\"headerlink\" title=\"2. CachedThreadPool\"></a>2. CachedThreadPool</h5><p>CachedThreadPool的特点，就是你来一个任务我给你启动一个线程，当然前提是我的线程池里面有线程存在而且他还没有到达60秒钟的回收时间的时候，来一个任务，如果有线程存在我就用现有的线程，但是在有新的任务来的时候，如果其他线程忙就启动一个新的，CachedThreadPool用的任务队列是 synchronousQueue，它是一个手递手容量为空的Queue，就是你来一个东西必须得有一个线程把他拿走，不然我提交任务的线程从这阻塞住了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newCachedThreadPool();</span><br><span class=\"line\">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class=\"line\">    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  60L, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  new SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-FixedThreadPool\"><a href=\"#3-FixedThreadPool\" class=\"headerlink\" title=\"3. FixedThreadPool\"></a>3. FixedThreadPool</h5><p>FixedThreadPool指定一个参数，到底有多少个线程，你看他的核心线程和最大线程都是固定的，因为他的最大线程和核心线程都是固定的就没有回收之说，所以把keepAliveTime指定成0，这里用的是LinkedBlockingQueue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newFixedThreadPool(10);</span><br><span class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class=\"line\">    return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                  0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-ScheduledPool\"><a href=\"#4-ScheduledPool\" class=\"headerlink\" title=\"4. ScheduledPool\"></a>4. ScheduledPool</h5><p>定时任务线程池，隔一段时间之后这个任务会执行。这个就是我们专门用来执行定时任务的一个线程池。看源码，我们newScheduledThreadPool的时 候他返回的是ScheduledThreadPoolExecutor，然后在ScheduledThreadPoolExecutor里面他调用了 super，他的super又是ThreadPoolExecutor，它本质上还是ThreadPoolExecutor，所以并不是别的，参数还是ThreadPool的七个参数。这是专门给定时任务用的这样的一个线程池。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newScheduledThreadPool(10);</span><br><span class=\"line\"></span><br><span class=\"line\">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class=\"line\">    return new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class=\"line\">        super(corePoolSize, Integer.MAX_VALUE,</span><br><span class=\"line\">              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class=\"line\">              new DelayedWorkQueue());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-WorkStealingPool-它实际上是new了一个ForkJoinPool\"><a href=\"#5-WorkStealingPool-它实际上是new了一个ForkJoinPool\" class=\"headerlink\" title=\"5. WorkStealingPool (它实际上是new了一个ForkJoinPool)\"></a>5. WorkStealingPool (它实际上是new了一个ForkJoinPool)</h5><p>WorkStealing指的是和原来线程池的区别每一个线程都有自己单独队列，所以任务不断往里扔的时候它会在每一个线程的队列上不断的累积，让某一个线程执行完自己的任务之后就回去另外一个线程上面偷，所以这个叫WorkStealing。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newWorkStealingPool();</span><br><span class=\"line\"></span><br><span class=\"line\">public static ExecutorService newWorkStealingPool() &#123;</span><br><span class=\"line\">    return new ForkJoinPool</span><br><span class=\"line\">        (Runtime.getRuntime().availableProcessors(),</span><br><span class=\"line\">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class=\"line\">         null, true);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-ForkJoinPool\"><a href=\"#6-ForkJoinPool\" class=\"headerlink\" title=\"6. ForkJoinPool\"></a>6. ForkJoinPool</h5><p>它适合把大任务切分成一个一个的小任务去运行，小任务还是觉得比较大，再切。切完这个任务执行完了要进行一个汇总。</p>\n<h5 id=\"7-Cache-vs-Fixed\"><a href=\"#7-Cache-vs-Fixed\" class=\"headerlink\" title=\"7. Cache vs Fixed\"></a>7. Cache vs Fixed</h5><p>什么时候用Cache什么时候用Fixed，你得精确的控制有多少个线程数，控制数量问题多数情况下得预估并发量。如果线程池中的数量过多，最终他们会竞争稀缺的处理器和内存资源，浪费大量的时间在上下文切换上，反之，如果线程的数目过少，正如你的应用所面临的情况，处理器的一些核可能就无法充分利用。<br>《Java并发编程实战》作者 Brian Goetz建议，线程池大小与处理器的利用率之比可以使用公式来进行计算估算:线程池=你有多少个cpu 乘以 cpu期望利用率 乘以 (1+ W/C)。W除以C是等待时间与计算时间的比率。</p>\n<h4 id=\"十、线程池的一些5种状态\"><a href=\"#十、线程池的一些5种状态\" class=\"headerlink\" title=\"十、线程池的一些5种状态\"></a>十、线程池的一些5种状态</h4><ol>\n<li>RUNNING:正常运行的;</li>\n<li>SHUTDOWN:调用了shutdown方法了进入了shutdown状态; </li>\n<li>STOP:调用了shutdownnow马上让他停止; </li>\n<li>TIDYING:调用了shutdown然后这个线程也执行完了，现在正在整理的这个过程叫TIDYING; </li>\n<li>TERMINATED:整个线程全部结束;</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、Executor\"><a href=\"#一、Executor\" class=\"headerlink\" title=\"一、Executor\"></a>一、Executor</h4><p>执行者，是一个接口类，他有一个方法叫执行，那么执行的东西是 Runnable。</p>\n<h4 id=\"二、ExecutorService\"><a href=\"#二、ExecutorService\" class=\"headerlink\" title=\"二、ExecutorService\"></a>二、ExecutorService</h4><p>是从Executor继承，除了去实现Executor可以去执行一个任务之外，还完善了整个任务执行器的一个生命周期，就拿线程池来举例子，一个线程池里面一堆的线程就是一堆的工人，执行完一个任务之后我这个线程怎么结束啊；<br>线程池定义了这样一些个方法：</p>\n<ul>\n<li>void shutdown();//结束</li>\n<li>List<Runnable> shutdownNow();//马上结束</Runnable></li>\n<li>boolean isShutdown();//是否结束了</li>\n<li>boolean isTerminated();//是不是整体都执行完了</li>\n<li>boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;//等着结束，等多长时间，时间到了还不结束的话他 就返回false</li>\n<li><T> Future<T> submit(Callable<T> task);</T></T></T></li>\n<li>Future&lt;?&gt; submit(Runnable task);</li>\n<li>List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks) throws InterruptedException;</T></T></li>\n<li><T> T invokeAny(Collection&lt;? extends Callable<T>&gt; tasks) throws InterruptedException, ExecutionException;</T></T></li></ul>","more":"\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecutroServiceTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> FutureTask(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Executor Service Test\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        es.execute(task);</span><br><span class=\"line\">        es.shutdownNow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>他是实现了一些个线程的线程池的生命周期的东西，扩展了Executor的接口，真正的线程池的现实是在ExecutorService的这个基础上来实现的。<br>ExecutorService的时候你会发现他除了Executor执行任务之外还有submit提交任务，执行任务是直接拿过来马上运行，而submit是扔给这个线程池，什么时候运行由这个线程池来决定，相当于 是异步的，我只要往里面一扔就不管了。那好，如果不管的话什么时候他有结果啊，这里面就涉及了比较新的类:比如说Future、RunnableFuture、FutureTask。</p>\n<h4 id=\"三、Callable\"><a href=\"#三、Callable\" class=\"headerlink\" title=\"三、Callable\"></a>三、Callable</h4><p>以前定义一个线程的任务只能去实现Runnable接口，那在1.5之后他就增加了Callable这个接口。<br>Callable是什么，他类似于Runnable，不过 Callable可以有返回值。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> computed result</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception if unable to compute a result</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、Future\"><a href=\"#四、Future\" class=\"headerlink\" title=\"四、Future\"></a>四、Future</h4><p>Future代表的是那个Callable被执行完了之后我怎么才能拿到那个结果啊，它会封装到一个Future里面。<br>Future将来，未来。未来你执行完之后可以把这个结果放到这个未来有可能执行完的结果里头，所以Future代表的是未来执行完的一个结果。<br>把Callable的任务扔给线程池，线程池异步的执行完了，就是把任务交给线程池之后，调用get方法直到有结果之后get会返回。Callable一般是配合线程池和Future来用的。</p>\n<h4 id=\"五、FutureTask\"><a href=\"#五、FutureTask\" class=\"headerlink\" title=\"五、FutureTask\"></a>五、FutureTask</h4><p>其实更灵活的一个用法是FutureTask，即是一个Future同时又是一个Task，原来这Callable只能一个Task只能是一个任务但是他不能作为一个Future来用。这个FutureTask相当于是我自己可以作为一个任务来用，同时这个任务完成之后的结果也存在于这个对象里，为什么他能做到这一点，因 为FutureTask他实现了RunnableFuture，而RunnableFuture即实现了Runnable又实现了Future，所以他即是一个任务又是一个Future</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutrueTaskTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FutureTask task = <span class=\"keyword\">new</span> FutureTask(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"future task test\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(task).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六、CompletableFuture\"><a href=\"#六、CompletableFuture\" class=\"headerlink\" title=\"六、CompletableFuture\"></a>六、CompletableFuture</h4><p>CompletableFuture他的底层用的是ForkJoinPool，底层特别复杂，但是用法特别灵活。</p>\n<h4 id=\"七、目前JDK提供的有两种类型\"><a href=\"#七、目前JDK提供的有两种类型\" class=\"headerlink\" title=\"七、目前JDK提供的有两种类型\"></a>七、目前JDK提供的有两种类型</h4><ol>\n<li>ThreadPoolExecutor 普通的线程池</li>\n<li>ForkJoinPool</li>\n</ol>\n<h4 id=\"八、ThreadPoolExecutor\"><a href=\"#八、ThreadPoolExecutor\" class=\"headerlink\" title=\"八、ThreadPoolExecutor\"></a>八、ThreadPoolExecutor</h4><p>ThreadPoolExecutor他的父类是AbstractExecutorService，AbstractExecutorService 实现了 ExecutorService，再ExecutorService的父类是Executor，所以ThreadPoolExecutor就相当于线程池的执行器  </p>\n<p>定义这一个线程池，这里面的七个参数:</p>\n<ol>\n<li>corePoolSoze 核心线程数，最开始的时候是有这个线程池里面是有一定的核心线程数 的;</li>\n<li>maximumPoolSize 最大线程数，线程数不够了，能扩展到最大线程是多少; </li>\n<li>keepAliveTime 生存时间，意思是这个线程有很长时间没干活了请你把它归还给操作系</li>\n<li>TimeUnit.SECONDS 生存时间的单位到底是毫秒纳秒还是秒自己去定义;</li>\n<li>任务队列，就是我们前面讲的BlockingQueue，各种各样的BlockingQueue都可以;</li>\n<li>线程工厂, 要去实现ThreadFactory的接口，这个接口只有一个方法叫newThread，所以就是产生线程的，可以通过这种方式产生自定义的线程，默认产生的是defaultThreadFactory，而defaultThreadFactory 产生线程的时候有几个特点: new出来的时候指定了group制定了线程名字，然后指定的这个线程 绝对不是守护线程，设定好你线程的优先级。自己可以定义产生的到底是什么样的线程，指定线程名叫什么(为什么要指定线程名称，有什么意义，就是可以方便出错是回溯);</li>\n<li>拒绝策略，指的是线程池忙，而且任务队列满这种情况下我们就要执行各种各样的拒绝策略，<br>jdk默认提供了四种拒绝策略，也是可以自定义的。<ul>\n<li>1:Abort:抛异常 </li>\n<li>2:Discard:扔掉，不抛异常 </li>\n<li>3:DiscardOldest:扔掉排队时间最久的 </li>\n<li>4:CallerRuns:调用者处理服务<br>一般情况这四种我们会自定义策略，去实现这个拒绝策略的接口，处理的方式是一般我们的消息需要保存下来，并且记录日志。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"九、JDK给我们提供了一些默认的线程池的实现\"><a href=\"#九、JDK给我们提供了一些默认的线程池的实现\" class=\"headerlink\" title=\"九、JDK给我们提供了一些默认的线程池的实现\"></a>九、JDK给我们提供了一些默认的线程池的实现</h4><h5 id=\"1-SingleThreadPool\"><a href=\"#1-SingleThreadPool\" class=\"headerlink\" title=\"1. SingleThreadPool\"></a>1. SingleThreadPool</h5><p>只有一个线程，这个一个线程的线程池可以保证我们扔进去的任务是顺序执行的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService service &#x3D; Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class=\"line\">    return new FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (new ThreadPoolExecutor(1, 1,</span><br><span class=\"line\">                                0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-CachedThreadPool\"><a href=\"#2-CachedThreadPool\" class=\"headerlink\" title=\"2. CachedThreadPool\"></a>2. CachedThreadPool</h5><p>CachedThreadPool的特点，就是你来一个任务我给你启动一个线程，当然前提是我的线程池里面有线程存在而且他还没有到达60秒钟的回收时间的时候，来一个任务，如果有线程存在我就用现有的线程，但是在有新的任务来的时候，如果其他线程忙就启动一个新的，CachedThreadPool用的任务队列是 synchronousQueue，它是一个手递手容量为空的Queue，就是你来一个东西必须得有一个线程把他拿走，不然我提交任务的线程从这阻塞住了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newCachedThreadPool();</span><br><span class=\"line\">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class=\"line\">    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  60L, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  new SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-FixedThreadPool\"><a href=\"#3-FixedThreadPool\" class=\"headerlink\" title=\"3. FixedThreadPool\"></a>3. FixedThreadPool</h5><p>FixedThreadPool指定一个参数，到底有多少个线程，你看他的核心线程和最大线程都是固定的，因为他的最大线程和核心线程都是固定的就没有回收之说，所以把keepAliveTime指定成0，这里用的是LinkedBlockingQueue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newFixedThreadPool(10);</span><br><span class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class=\"line\">    return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                  0L, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-ScheduledPool\"><a href=\"#4-ScheduledPool\" class=\"headerlink\" title=\"4. ScheduledPool\"></a>4. ScheduledPool</h5><p>定时任务线程池，隔一段时间之后这个任务会执行。这个就是我们专门用来执行定时任务的一个线程池。看源码，我们newScheduledThreadPool的时 候他返回的是ScheduledThreadPoolExecutor，然后在ScheduledThreadPoolExecutor里面他调用了 super，他的super又是ThreadPoolExecutor，它本质上还是ThreadPoolExecutor，所以并不是别的，参数还是ThreadPool的七个参数。这是专门给定时任务用的这样的一个线程池。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newScheduledThreadPool(10);</span><br><span class=\"line\"></span><br><span class=\"line\">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123;</span><br><span class=\"line\">    return new ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class=\"line\">        super(corePoolSize, Integer.MAX_VALUE,</span><br><span class=\"line\">              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class=\"line\">              new DelayedWorkQueue());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-WorkStealingPool-它实际上是new了一个ForkJoinPool\"><a href=\"#5-WorkStealingPool-它实际上是new了一个ForkJoinPool\" class=\"headerlink\" title=\"5. WorkStealingPool (它实际上是new了一个ForkJoinPool)\"></a>5. WorkStealingPool (它实际上是new了一个ForkJoinPool)</h5><p>WorkStealing指的是和原来线程池的区别每一个线程都有自己单独队列，所以任务不断往里扔的时候它会在每一个线程的队列上不断的累积，让某一个线程执行完自己的任务之后就回去另外一个线程上面偷，所以这个叫WorkStealing。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExecutorService executor &#x3D; Executors.newWorkStealingPool();</span><br><span class=\"line\"></span><br><span class=\"line\">public static ExecutorService newWorkStealingPool() &#123;</span><br><span class=\"line\">    return new ForkJoinPool</span><br><span class=\"line\">        (Runtime.getRuntime().availableProcessors(),</span><br><span class=\"line\">         ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class=\"line\">         null, true);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6-ForkJoinPool\"><a href=\"#6-ForkJoinPool\" class=\"headerlink\" title=\"6. ForkJoinPool\"></a>6. ForkJoinPool</h5><p>它适合把大任务切分成一个一个的小任务去运行，小任务还是觉得比较大，再切。切完这个任务执行完了要进行一个汇总。</p>\n<h5 id=\"7-Cache-vs-Fixed\"><a href=\"#7-Cache-vs-Fixed\" class=\"headerlink\" title=\"7. Cache vs Fixed\"></a>7. Cache vs Fixed</h5><p>什么时候用Cache什么时候用Fixed，你得精确的控制有多少个线程数，控制数量问题多数情况下得预估并发量。如果线程池中的数量过多，最终他们会竞争稀缺的处理器和内存资源，浪费大量的时间在上下文切换上，反之，如果线程的数目过少，正如你的应用所面临的情况，处理器的一些核可能就无法充分利用。<br>《Java并发编程实战》作者 Brian Goetz建议，线程池大小与处理器的利用率之比可以使用公式来进行计算估算:线程池=你有多少个cpu 乘以 cpu期望利用率 乘以 (1+ W/C)。W除以C是等待时间与计算时间的比率。</p>\n<h4 id=\"十、线程池的一些5种状态\"><a href=\"#十、线程池的一些5种状态\" class=\"headerlink\" title=\"十、线程池的一些5种状态\"></a>十、线程池的一些5种状态</h4><ol>\n<li>RUNNING:正常运行的;</li>\n<li>SHUTDOWN:调用了shutdown方法了进入了shutdown状态; </li>\n<li>STOP:调用了shutdownnow马上让他停止; </li>\n<li>TIDYING:调用了shutdown然后这个线程也执行完了，现在正在整理的这个过程叫TIDYING; </li>\n<li>TERMINATED:整个线程全部结束;</li>\n</ol>"},{"title":"JVM - Class文件格式入门","toc":true,"date":"2020-02-22T08:30:57.000Z","_content":"\n* JVM 是一种规范\n参考文档：\nhttps://docs.oracle.com/en/java/javase/13/\nhttps://docs.oracle.com/javase/specs/index.html\nhttps://docs.oracle.com/javase/specs/jvms/se13/html/index.html\n* 虚构出来的一台计算机  \n-字节码指令集（汇编语言）  \n-内存管理：堆、栈、方法区等  \n\n#### 常见的JVM实现\n* Hotspot - Oracl 官方\n* Jrockit - BEA，曾经号称世界上最快的JVM,被Oracle收购后，合并于hotspot\n* J9 - IBM\n* Microsoft VM\n* TaobaoVM - Hotspot 深度定制版\n* LiquidVM - 直接针对硬件\n* azul zing - 商业版，最新垃圾回收的业界标杆，参考zing的垃圾回收产生了ZGC\n\n#### JDK, JRE, JVM\n![常用垃圾回收器](https://casparthh.github.io/2020/02/22/classfile/jvm.jpeg)\n<!--more-->\n\n#### 查看ByteCode的方法\n* javap\n* JBE 可以直接修改\n* JClassLib IDEA插件之一\n\n#### Class 文件构成\n* 魔数 \"cafebaby\"\n* Class 文件版本\n* 常量池\n* 访问标志\n* 类索引，父类索引，接口索引集合\n* 字段表集合\n* 方法表集合\n* 属性表集合\n\n#### Class 文件格式\n| 类型 | 名称 | 数量 |\n| --- | --- | --- |\n| U4 | magic | 1 |\n| U2 | minor_version | 1 |\n| U2 | major_version | 1 |\n| U2 | constant_pool_count | 1 |\n| cp_info | constant_pool | constant_pool_count - 1 |\n| U2 | access_flags | 1 |\n| U2 | this_class | 1 |\n| U2 | super_class | 1 |\n| U2 | interfaces_count | 1 |\n| U2 | interfaces | interfaces_count |\n| U2 | fields_count | 1 |\n| field_info | fields | fields_count |\n| U2 | methods_count | 1 |\n| method_info | methods | methods_count |\n| U2 | attributes_count | 1 |\n| attribute_info | attributes | attributes_count |\n\nu1 一个字节，u2 两个字节。。。  \n一个16进制数就是4位，2个16进制数就是8位，也就是一个字节  \nchar 1 个字节  \nint & float 4个字节  \ndouble & long 8个字节\nmagic = 0xCAFEBABE.\nminor_version, major_version 定义版本号\nconstant_pool_count = constant_pool.size +1\n \n\n\n#### access_flags \n参考 jvms13 Table 4.1-B. Class access and property modifiers\n\n| Flag Name | Value | Interpretation|\n| --- | --- | --- |\n| ACC_PUBLIC | 0x0001 | Declared public; may be accessed from outside its package. |\n| ACC_FINAL | 0x0010 | Declared final; no subclasses allowed. |\n| ACC_SUPER | 0x0020 | Treat superclass methods specially when invoked by the invokespecial instruction. |\n| ACC_INTERFACE | 0x0200 | Is an interface, not a class. |\n| ACC_ABSTRACT | 0x0400 | Declared abstract; must not be instantiated. |\n| ACC_SYNTHETIC | 0x1000 | Declared synthetic; not present in the source code. |\n| ACC_ANNOTATION | 0x2000 | Declared as an annotation type. |\n| ACC_ENUM | 0x4000 | Declared as an enum type. |\n| ACC_MODULE | 0x8000 | Is a module, not a class or interface. |\n\n*实际值采用的位运算\n\n#### Field Descriptors\n参考 jvms13 Table 4.3-A. Interpretation of field descriptors\n\n| FieldType term | Type\t| Interpretation |\n| --- | --- | --- |\n| B\t| byte | signed byte |\n| C\t| char | Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16 |\n| D\t| double | double-precision floating-point value |\n| F\t| float | single-precision floating-point value |\n| I\t| int | integer |\n| J\t| long | long integer |\n| L ClassName; | reference | an instance of class ClassName |\n| S\t| short | signed short |\n| Z\t| boolean | true or false |\n| [\t| reference | one array dimension |\n\n\n#### Method Descriptors\n\n( {ParameterDescriptor} ) ReturnDescriptor  \n\nObject m(int i, double d, Thread t) {...}  \nint->I, double->D, Thread->Ljava/lang/Thread，返回值Ojbect->Ljava/lang/Object;  \n    \n所以该方法的描述符为：  \n(IDLjava/lang/Thread;)Ljava/lang/Object;  \n    \n如果返回值为空，则ReturnDescriptor为VoidDescriptor->V  \nThe character V indicates that the method returns no value (its result is void).\n\n#### Constant Pool \n常量池中的每一个entry必须是由一个字节的tag开始来表示该常量的种类。\n参考 jvms13 Table 4.4-A. Constant pool tags (by section)\n\n| Constant Kind | Tag | Section |\n| --- | --- | --- |\n| CONSTANT_Utf8 | 1 | §4.4.7 |\n| CONSTANT_Integer | 3 | §4.4.4 |\n| CONSTANT_Float | 4 | §4.4.4 |\n| CONSTANT_Long | 5 | §4.4.5 |\n| CONSTANT_Double | 6 | §4.4.5 |\n| CONSTANT_Class | 7 | §4.4.1 |\n| CONSTANT_String | 8 | §4.4.3 |\n| CONSTANT_Fieldref | 9 | §4.4.2 |\n| CONSTANT_Methodref | 10 | §4.4.2 |\n| CONSTANT_InterfaceMethodref | 11 | §4.4.2 |\n| CONSTANT_NameAndType | 12 | §4.4.6 |\n| CONSTANT_MethodHandle | 15 | §4.4.8 |\n| CONSTANT_MethodType | 16 | §4.4.9 |\n| CONSTANT_Dynamic (JDK11) | 17 | §4.4.10 |\n| CONSTANT_InvokeDynamic | 18 | §4.4.10 |\n| CONSTANT_Module (JDK9) | 19 | §4.4.11 |\n| CONSTANT_Package (JDK9)| 20 | §4.4.12 |\n\n表中的section表是该tag详细文档对应的章节。\n\n\n#### CONSTANT_Utf8_info\n```\nCONSTANT_Utf8_info {\n    u1 tag;             //占一个字节, CONSTANT_Utf8 对就上面的值为1\n    u2 length;          //UTF-8字符串占用的字节数   \n    u1 bytes[length];   //长度为length的字符串\n}\n```\n\n#### CONSTANT_Integer_info, CONSTANT_Float_info Structures 数据结构\n```\nCONSTANT_Integer_info {\n   u1 tag;\n   u4 bytes;    \n}\n\nCONSTANT_Float_info {\n   u1 tag;\n   u4 bytes; \n}\n```\n\n#### CONSTANT_Long_info and CONSTANT_Double_info 数据结构\n```\nCONSTANT_Long_info {\n   u1 tag;\n   u4 high_bytes;\n   u4 low_bytes;\n}\nCONSTANT_Double_info {\n   u1 tag;\n   u4 high_bytes;\n   u4 low_bytes;\n}\n```\n\n##### CONSTANT_Class_info 数据结构\n```\nCONSTANT_Class_info {\n   u1 tag;              //CONSTANT_Class 对应上面表中的7， 占一个字节；\n   u2 name_index;       //指向常量池的索引位置，该位置存放类的名称, 占用2个字节\n}\n```\n\n#### CONSTANT_String_info 数据结构\n```\nCONSTANT_String_info {\n   u1 tag;\n   u2 string_index;     //占2字节，指向字符串的索引;\n}\n```\n\n#### CONSTANT_Fieldref_info, CONSTANT_Methodref_info, CONSTANT_InterfaceMethodref_info 内存节构\n```\nCONSTANT_Fieldref_info {\n   u1 tag;                  //CONSTANT_Fieldref 对应上面表中的9， 占一个字节；\n   u2 class_index;          //占2字节，指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项\n   u2 name_and_type_index; //占2字节，指向字段描述符CONSTANT_NameAndType的索引项\n}\nCONSTANT_Methodref_info {\n   u1 tag;                  //CONSTANT_Methodref 对应上面表中的10， 占一个字节；\n   u2 class_index;          //占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项\n   u2 name_and_type_index; //占2字节，指向字段描述符CONSTANT_NameAndType的索引项\n}\nCONSTANT_InterfaceMethodref_info {\n   u1 tag;                  //CONSTANT_InterfaceMethodref 对应上面表中的11， 占一个字节；\n   u2 class_index;          //占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项\n   u2 name_and_type_index; //占2字节，指向字段描述符CONSTANT_NameAndType的索引项\n}\n```\n\n#### CONSTANT_NameAndType_info\n```\nCONSTANT_NameAndType_info {\n   u1 tag;              //1字节，NameAndType 对就表中的值12\n   u2 name_index;       //2字节，指向该字段或方法名称常量项的索引\n   u2 descriptor_index; //2字节，指向该字段或方法描述符常量项的索引\n}\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2020-02-22-classfile.md","raw":"---\ntitle: JVM - Class文件格式入门\ntoc: true\ncategories:\n  - 技术笔记\ndate: 2020-02-22 16:30:57\ntags:\n- JVM\n---\n\n* JVM 是一种规范\n参考文档：\nhttps://docs.oracle.com/en/java/javase/13/\nhttps://docs.oracle.com/javase/specs/index.html\nhttps://docs.oracle.com/javase/specs/jvms/se13/html/index.html\n* 虚构出来的一台计算机  \n-字节码指令集（汇编语言）  \n-内存管理：堆、栈、方法区等  \n\n#### 常见的JVM实现\n* Hotspot - Oracl 官方\n* Jrockit - BEA，曾经号称世界上最快的JVM,被Oracle收购后，合并于hotspot\n* J9 - IBM\n* Microsoft VM\n* TaobaoVM - Hotspot 深度定制版\n* LiquidVM - 直接针对硬件\n* azul zing - 商业版，最新垃圾回收的业界标杆，参考zing的垃圾回收产生了ZGC\n\n#### JDK, JRE, JVM\n![常用垃圾回收器](https://casparthh.github.io/2020/02/22/classfile/jvm.jpeg)\n<!--more-->\n\n#### 查看ByteCode的方法\n* javap\n* JBE 可以直接修改\n* JClassLib IDEA插件之一\n\n#### Class 文件构成\n* 魔数 \"cafebaby\"\n* Class 文件版本\n* 常量池\n* 访问标志\n* 类索引，父类索引，接口索引集合\n* 字段表集合\n* 方法表集合\n* 属性表集合\n\n#### Class 文件格式\n| 类型 | 名称 | 数量 |\n| --- | --- | --- |\n| U4 | magic | 1 |\n| U2 | minor_version | 1 |\n| U2 | major_version | 1 |\n| U2 | constant_pool_count | 1 |\n| cp_info | constant_pool | constant_pool_count - 1 |\n| U2 | access_flags | 1 |\n| U2 | this_class | 1 |\n| U2 | super_class | 1 |\n| U2 | interfaces_count | 1 |\n| U2 | interfaces | interfaces_count |\n| U2 | fields_count | 1 |\n| field_info | fields | fields_count |\n| U2 | methods_count | 1 |\n| method_info | methods | methods_count |\n| U2 | attributes_count | 1 |\n| attribute_info | attributes | attributes_count |\n\nu1 一个字节，u2 两个字节。。。  \n一个16进制数就是4位，2个16进制数就是8位，也就是一个字节  \nchar 1 个字节  \nint & float 4个字节  \ndouble & long 8个字节\nmagic = 0xCAFEBABE.\nminor_version, major_version 定义版本号\nconstant_pool_count = constant_pool.size +1\n \n\n\n#### access_flags \n参考 jvms13 Table 4.1-B. Class access and property modifiers\n\n| Flag Name | Value | Interpretation|\n| --- | --- | --- |\n| ACC_PUBLIC | 0x0001 | Declared public; may be accessed from outside its package. |\n| ACC_FINAL | 0x0010 | Declared final; no subclasses allowed. |\n| ACC_SUPER | 0x0020 | Treat superclass methods specially when invoked by the invokespecial instruction. |\n| ACC_INTERFACE | 0x0200 | Is an interface, not a class. |\n| ACC_ABSTRACT | 0x0400 | Declared abstract; must not be instantiated. |\n| ACC_SYNTHETIC | 0x1000 | Declared synthetic; not present in the source code. |\n| ACC_ANNOTATION | 0x2000 | Declared as an annotation type. |\n| ACC_ENUM | 0x4000 | Declared as an enum type. |\n| ACC_MODULE | 0x8000 | Is a module, not a class or interface. |\n\n*实际值采用的位运算\n\n#### Field Descriptors\n参考 jvms13 Table 4.3-A. Interpretation of field descriptors\n\n| FieldType term | Type\t| Interpretation |\n| --- | --- | --- |\n| B\t| byte | signed byte |\n| C\t| char | Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16 |\n| D\t| double | double-precision floating-point value |\n| F\t| float | single-precision floating-point value |\n| I\t| int | integer |\n| J\t| long | long integer |\n| L ClassName; | reference | an instance of class ClassName |\n| S\t| short | signed short |\n| Z\t| boolean | true or false |\n| [\t| reference | one array dimension |\n\n\n#### Method Descriptors\n\n( {ParameterDescriptor} ) ReturnDescriptor  \n\nObject m(int i, double d, Thread t) {...}  \nint->I, double->D, Thread->Ljava/lang/Thread，返回值Ojbect->Ljava/lang/Object;  \n    \n所以该方法的描述符为：  \n(IDLjava/lang/Thread;)Ljava/lang/Object;  \n    \n如果返回值为空，则ReturnDescriptor为VoidDescriptor->V  \nThe character V indicates that the method returns no value (its result is void).\n\n#### Constant Pool \n常量池中的每一个entry必须是由一个字节的tag开始来表示该常量的种类。\n参考 jvms13 Table 4.4-A. Constant pool tags (by section)\n\n| Constant Kind | Tag | Section |\n| --- | --- | --- |\n| CONSTANT_Utf8 | 1 | §4.4.7 |\n| CONSTANT_Integer | 3 | §4.4.4 |\n| CONSTANT_Float | 4 | §4.4.4 |\n| CONSTANT_Long | 5 | §4.4.5 |\n| CONSTANT_Double | 6 | §4.4.5 |\n| CONSTANT_Class | 7 | §4.4.1 |\n| CONSTANT_String | 8 | §4.4.3 |\n| CONSTANT_Fieldref | 9 | §4.4.2 |\n| CONSTANT_Methodref | 10 | §4.4.2 |\n| CONSTANT_InterfaceMethodref | 11 | §4.4.2 |\n| CONSTANT_NameAndType | 12 | §4.4.6 |\n| CONSTANT_MethodHandle | 15 | §4.4.8 |\n| CONSTANT_MethodType | 16 | §4.4.9 |\n| CONSTANT_Dynamic (JDK11) | 17 | §4.4.10 |\n| CONSTANT_InvokeDynamic | 18 | §4.4.10 |\n| CONSTANT_Module (JDK9) | 19 | §4.4.11 |\n| CONSTANT_Package (JDK9)| 20 | §4.4.12 |\n\n表中的section表是该tag详细文档对应的章节。\n\n\n#### CONSTANT_Utf8_info\n```\nCONSTANT_Utf8_info {\n    u1 tag;             //占一个字节, CONSTANT_Utf8 对就上面的值为1\n    u2 length;          //UTF-8字符串占用的字节数   \n    u1 bytes[length];   //长度为length的字符串\n}\n```\n\n#### CONSTANT_Integer_info, CONSTANT_Float_info Structures 数据结构\n```\nCONSTANT_Integer_info {\n   u1 tag;\n   u4 bytes;    \n}\n\nCONSTANT_Float_info {\n   u1 tag;\n   u4 bytes; \n}\n```\n\n#### CONSTANT_Long_info and CONSTANT_Double_info 数据结构\n```\nCONSTANT_Long_info {\n   u1 tag;\n   u4 high_bytes;\n   u4 low_bytes;\n}\nCONSTANT_Double_info {\n   u1 tag;\n   u4 high_bytes;\n   u4 low_bytes;\n}\n```\n\n##### CONSTANT_Class_info 数据结构\n```\nCONSTANT_Class_info {\n   u1 tag;              //CONSTANT_Class 对应上面表中的7， 占一个字节；\n   u2 name_index;       //指向常量池的索引位置，该位置存放类的名称, 占用2个字节\n}\n```\n\n#### CONSTANT_String_info 数据结构\n```\nCONSTANT_String_info {\n   u1 tag;\n   u2 string_index;     //占2字节，指向字符串的索引;\n}\n```\n\n#### CONSTANT_Fieldref_info, CONSTANT_Methodref_info, CONSTANT_InterfaceMethodref_info 内存节构\n```\nCONSTANT_Fieldref_info {\n   u1 tag;                  //CONSTANT_Fieldref 对应上面表中的9， 占一个字节；\n   u2 class_index;          //占2字节，指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项\n   u2 name_and_type_index; //占2字节，指向字段描述符CONSTANT_NameAndType的索引项\n}\nCONSTANT_Methodref_info {\n   u1 tag;                  //CONSTANT_Methodref 对应上面表中的10， 占一个字节；\n   u2 class_index;          //占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项\n   u2 name_and_type_index; //占2字节，指向字段描述符CONSTANT_NameAndType的索引项\n}\nCONSTANT_InterfaceMethodref_info {\n   u1 tag;                  //CONSTANT_InterfaceMethodref 对应上面表中的11， 占一个字节；\n   u2 class_index;          //占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项\n   u2 name_and_type_index; //占2字节，指向字段描述符CONSTANT_NameAndType的索引项\n}\n```\n\n#### CONSTANT_NameAndType_info\n```\nCONSTANT_NameAndType_info {\n   u1 tag;              //1字节，NameAndType 对就表中的值12\n   u2 name_index;       //2字节，指向该字段或方法名称常量项的索引\n   u2 descriptor_index; //2字节，指向该字段或方法描述符常量项的索引\n}\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"classfile","published":1,"updated":"2020-02-23T08:55:12.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6ztaqui000g5xc98d54hegh","content":"<ul>\n<li>JVM 是一种规范<br>参考文档：<br><a href=\"https://docs.oracle.com/en/java/javase/13/\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/</a><br><a href=\"https://docs.oracle.com/javase/specs/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/index.html</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se13/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se13/html/index.html</a></li>\n<li>虚构出来的一台计算机  </li>\n</ul>\n<p>-字节码指令集（汇编语言）<br>-内存管理：堆、栈、方法区等  </p>\n<h4 id=\"常见的JVM实现\"><a href=\"#常见的JVM实现\" class=\"headerlink\" title=\"常见的JVM实现\"></a>常见的JVM实现</h4><ul>\n<li>Hotspot - Oracl 官方</li>\n<li>Jrockit - BEA，曾经号称世界上最快的JVM,被Oracle收购后，合并于hotspot</li>\n<li>J9 - IBM</li>\n<li>Microsoft VM</li>\n<li>TaobaoVM - Hotspot 深度定制版</li>\n<li>LiquidVM - 直接针对硬件</li>\n<li>azul zing - 商业版，最新垃圾回收的业界标杆，参考zing的垃圾回收产生了ZGC</li>\n</ul>\n<h4 id=\"JDK-JRE-JVM\"><a href=\"#JDK-JRE-JVM\" class=\"headerlink\" title=\"JDK, JRE, JVM\"></a>JDK, JRE, JVM</h4><p><img src=\"https://casparthh.github.io/2020/02/22/classfile/jvm.jpeg\" alt=\"常用垃圾回收器\"></p>\n<a id=\"more\"></a>\n\n<h4 id=\"查看ByteCode的方法\"><a href=\"#查看ByteCode的方法\" class=\"headerlink\" title=\"查看ByteCode的方法\"></a>查看ByteCode的方法</h4><ul>\n<li>javap</li>\n<li>JBE 可以直接修改</li>\n<li>JClassLib IDEA插件之一</li>\n</ul>\n<h4 id=\"Class-文件构成\"><a href=\"#Class-文件构成\" class=\"headerlink\" title=\"Class 文件构成\"></a>Class 文件构成</h4><ul>\n<li>魔数 “cafebaby”</li>\n<li>Class 文件版本</li>\n<li>常量池</li>\n<li>访问标志</li>\n<li>类索引，父类索引，接口索引集合</li>\n<li>字段表集合</li>\n<li>方法表集合</li>\n<li>属性表集合</li>\n</ul>\n<h4 id=\"Class-文件格式\"><a href=\"#Class-文件格式\" class=\"headerlink\" title=\"Class 文件格式\"></a>Class 文件格式</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>U4</td>\n<td>magic</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>minor_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>major_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>constant_pool_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>cp_info</td>\n<td>constant_pool</td>\n<td>constant_pool_count - 1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>access_flags</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>this_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>super_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>interfaces_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>interfaces</td>\n<td>interfaces_count</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>fields_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>field_info</td>\n<td>fields</td>\n<td>fields_count</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>methods_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>method_info</td>\n<td>methods</td>\n<td>methods_count</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>attributes_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>attribute_info</td>\n<td>attributes</td>\n<td>attributes_count</td>\n</tr>\n</tbody></table>\n<p>u1 一个字节，u2 两个字节。。。<br>一个16进制数就是4位，2个16进制数就是8位，也就是一个字节<br>char 1 个字节<br>int &amp; float 4个字节<br>double &amp; long 8个字节<br>magic = 0xCAFEBABE.<br>minor_version, major_version 定义版本号<br>constant_pool_count = constant_pool.size +1</p>\n<h4 id=\"access-flags\"><a href=\"#access-flags\" class=\"headerlink\" title=\"access_flags\"></a>access_flags</h4><p>参考 jvms13 Table 4.1-B. Class access and property modifiers</p>\n<table>\n<thead>\n<tr>\n<th>Flag Name</th>\n<th>Value</th>\n<th>Interpretation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ACC_PUBLIC</td>\n<td>0x0001</td>\n<td>Declared public; may be accessed from outside its package.</td>\n</tr>\n<tr>\n<td>ACC_FINAL</td>\n<td>0x0010</td>\n<td>Declared final; no subclasses allowed.</td>\n</tr>\n<tr>\n<td>ACC_SUPER</td>\n<td>0x0020</td>\n<td>Treat superclass methods specially when invoked by the invokespecial instruction.</td>\n</tr>\n<tr>\n<td>ACC_INTERFACE</td>\n<td>0x0200</td>\n<td>Is an interface, not a class.</td>\n</tr>\n<tr>\n<td>ACC_ABSTRACT</td>\n<td>0x0400</td>\n<td>Declared abstract; must not be instantiated.</td>\n</tr>\n<tr>\n<td>ACC_SYNTHETIC</td>\n<td>0x1000</td>\n<td>Declared synthetic; not present in the source code.</td>\n</tr>\n<tr>\n<td>ACC_ANNOTATION</td>\n<td>0x2000</td>\n<td>Declared as an annotation type.</td>\n</tr>\n<tr>\n<td>ACC_ENUM</td>\n<td>0x4000</td>\n<td>Declared as an enum type.</td>\n</tr>\n<tr>\n<td>ACC_MODULE</td>\n<td>0x8000</td>\n<td>Is a module, not a class or interface.</td>\n</tr>\n</tbody></table>\n<p>*实际值采用的位运算</p>\n<h4 id=\"Field-Descriptors\"><a href=\"#Field-Descriptors\" class=\"headerlink\" title=\"Field Descriptors\"></a>Field Descriptors</h4><p>参考 jvms13 Table 4.3-A. Interpretation of field descriptors</p>\n<table>\n<thead>\n<tr>\n<th>FieldType term</th>\n<th>Type</th>\n<th>Interpretation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B</td>\n<td>byte</td>\n<td>signed byte</td>\n</tr>\n<tr>\n<td>C</td>\n<td>char</td>\n<td>Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16</td>\n</tr>\n<tr>\n<td>D</td>\n<td>double</td>\n<td>double-precision floating-point value</td>\n</tr>\n<tr>\n<td>F</td>\n<td>float</td>\n<td>single-precision floating-point value</td>\n</tr>\n<tr>\n<td>I</td>\n<td>int</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>J</td>\n<td>long</td>\n<td>long integer</td>\n</tr>\n<tr>\n<td>L ClassName;</td>\n<td>reference</td>\n<td>an instance of class ClassName</td>\n</tr>\n<tr>\n<td>S</td>\n<td>short</td>\n<td>signed short</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>boolean</td>\n<td>true or false</td>\n</tr>\n<tr>\n<td>[</td>\n<td>reference</td>\n<td>one array dimension</td>\n</tr>\n</tbody></table>\n<h4 id=\"Method-Descriptors\"><a href=\"#Method-Descriptors\" class=\"headerlink\" title=\"Method Descriptors\"></a>Method Descriptors</h4><p>( {ParameterDescriptor} ) ReturnDescriptor  </p>\n<p>Object m(int i, double d, Thread t) {…}<br>int-&gt;I, double-&gt;D, Thread-&gt;Ljava/lang/Thread，返回值Ojbect-&gt;Ljava/lang/Object;  </p>\n<p>所以该方法的描述符为：<br>(IDLjava/lang/Thread;)Ljava/lang/Object;  </p>\n<p>如果返回值为空，则ReturnDescriptor为VoidDescriptor-&gt;V<br>The character V indicates that the method returns no value (its result is void).</p>\n<h4 id=\"Constant-Pool\"><a href=\"#Constant-Pool\" class=\"headerlink\" title=\"Constant Pool\"></a>Constant Pool</h4><p>常量池中的每一个entry必须是由一个字节的tag开始来表示该常量的种类。<br>参考 jvms13 Table 4.4-A. Constant pool tags (by section)</p>\n<table>\n<thead>\n<tr>\n<th>Constant Kind</th>\n<th>Tag</th>\n<th>Section</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONSTANT_Utf8</td>\n<td>1</td>\n<td>§4.4.7</td>\n</tr>\n<tr>\n<td>CONSTANT_Integer</td>\n<td>3</td>\n<td>§4.4.4</td>\n</tr>\n<tr>\n<td>CONSTANT_Float</td>\n<td>4</td>\n<td>§4.4.4</td>\n</tr>\n<tr>\n<td>CONSTANT_Long</td>\n<td>5</td>\n<td>§4.4.5</td>\n</tr>\n<tr>\n<td>CONSTANT_Double</td>\n<td>6</td>\n<td>§4.4.5</td>\n</tr>\n<tr>\n<td>CONSTANT_Class</td>\n<td>7</td>\n<td>§4.4.1</td>\n</tr>\n<tr>\n<td>CONSTANT_String</td>\n<td>8</td>\n<td>§4.4.3</td>\n</tr>\n<tr>\n<td>CONSTANT_Fieldref</td>\n<td>9</td>\n<td>§4.4.2</td>\n</tr>\n<tr>\n<td>CONSTANT_Methodref</td>\n<td>10</td>\n<td>§4.4.2</td>\n</tr>\n<tr>\n<td>CONSTANT_InterfaceMethodref</td>\n<td>11</td>\n<td>§4.4.2</td>\n</tr>\n<tr>\n<td>CONSTANT_NameAndType</td>\n<td>12</td>\n<td>§4.4.6</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodHandle</td>\n<td>15</td>\n<td>§4.4.8</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodType</td>\n<td>16</td>\n<td>§4.4.9</td>\n</tr>\n<tr>\n<td>CONSTANT_Dynamic (JDK11)</td>\n<td>17</td>\n<td>§4.4.10</td>\n</tr>\n<tr>\n<td>CONSTANT_InvokeDynamic</td>\n<td>18</td>\n<td>§4.4.10</td>\n</tr>\n<tr>\n<td>CONSTANT_Module (JDK9)</td>\n<td>19</td>\n<td>§4.4.11</td>\n</tr>\n<tr>\n<td>CONSTANT_Package (JDK9)</td>\n<td>20</td>\n<td>§4.4.12</td>\n</tr>\n</tbody></table>\n<p>表中的section表是该tag详细文档对应的章节。</p>\n<h4 id=\"CONSTANT-Utf8-info\"><a href=\"#CONSTANT-Utf8-info\" class=\"headerlink\" title=\"CONSTANT_Utf8_info\"></a>CONSTANT_Utf8_info</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Utf8_info &#123;</span><br><span class=\"line\">    u1 tag;             &#x2F;&#x2F;占一个字节, CONSTANT_Utf8 对就上面的值为1</span><br><span class=\"line\">    u2 length;          &#x2F;&#x2F;UTF-8字符串占用的字节数   </span><br><span class=\"line\">    u1 bytes[length];   &#x2F;&#x2F;长度为length的字符串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-Integer-info-CONSTANT-Float-info-Structures-数据结构\"><a href=\"#CONSTANT-Integer-info-CONSTANT-Float-info-Structures-数据结构\" class=\"headerlink\" title=\"CONSTANT_Integer_info, CONSTANT_Float_info Structures 数据结构\"></a>CONSTANT_Integer_info, CONSTANT_Float_info Structures 数据结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Integer_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 bytes;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CONSTANT_Float_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 bytes; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-Long-info-and-CONSTANT-Double-info-数据结构\"><a href=\"#CONSTANT-Long-info-and-CONSTANT-Double-info-数据结构\" class=\"headerlink\" title=\"CONSTANT_Long_info and CONSTANT_Double_info 数据结构\"></a>CONSTANT_Long_info and CONSTANT_Double_info 数据结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Long_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 high_bytes;</span><br><span class=\"line\">   u4 low_bytes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CONSTANT_Double_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 high_bytes;</span><br><span class=\"line\">   u4 low_bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"CONSTANT-Class-info-数据结构\"><a href=\"#CONSTANT-Class-info-数据结构\" class=\"headerlink\" title=\"CONSTANT_Class_info 数据结构\"></a>CONSTANT_Class_info 数据结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Class_info &#123;</span><br><span class=\"line\">   u1 tag;              &#x2F;&#x2F;CONSTANT_Class 对应上面表中的7， 占一个字节；</span><br><span class=\"line\">   u2 name_index;       &#x2F;&#x2F;指向常量池的索引位置，该位置存放类的名称, 占用2个字节</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-String-info-数据结构\"><a href=\"#CONSTANT-String-info-数据结构\" class=\"headerlink\" title=\"CONSTANT_String_info 数据结构\"></a>CONSTANT_String_info 数据结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_String_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u2 string_index;     &#x2F;&#x2F;占2字节，指向字符串的索引;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-Fieldref-info-CONSTANT-Methodref-info-CONSTANT-InterfaceMethodref-info-内存节构\"><a href=\"#CONSTANT-Fieldref-info-CONSTANT-Methodref-info-CONSTANT-InterfaceMethodref-info-内存节构\" class=\"headerlink\" title=\"CONSTANT_Fieldref_info, CONSTANT_Methodref_info, CONSTANT_InterfaceMethodref_info 内存节构\"></a>CONSTANT_Fieldref_info, CONSTANT_Methodref_info, CONSTANT_InterfaceMethodref_info 内存节构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Fieldref_info &#123;</span><br><span class=\"line\">   u1 tag;                  &#x2F;&#x2F;CONSTANT_Fieldref 对应上面表中的9， 占一个字节；</span><br><span class=\"line\">   u2 class_index;          &#x2F;&#x2F;占2字节，指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项</span><br><span class=\"line\">   u2 name_and_type_index; &#x2F;&#x2F;占2字节，指向字段描述符CONSTANT_NameAndType的索引项</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CONSTANT_Methodref_info &#123;</span><br><span class=\"line\">   u1 tag;                  &#x2F;&#x2F;CONSTANT_Methodref 对应上面表中的10， 占一个字节；</span><br><span class=\"line\">   u2 class_index;          &#x2F;&#x2F;占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项</span><br><span class=\"line\">   u2 name_and_type_index; &#x2F;&#x2F;占2字节，指向字段描述符CONSTANT_NameAndType的索引项</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CONSTANT_InterfaceMethodref_info &#123;</span><br><span class=\"line\">   u1 tag;                  &#x2F;&#x2F;CONSTANT_InterfaceMethodref 对应上面表中的11， 占一个字节；</span><br><span class=\"line\">   u2 class_index;          &#x2F;&#x2F;占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项</span><br><span class=\"line\">   u2 name_and_type_index; &#x2F;&#x2F;占2字节，指向字段描述符CONSTANT_NameAndType的索引项</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-NameAndType-info\"><a href=\"#CONSTANT-NameAndType-info\" class=\"headerlink\" title=\"CONSTANT_NameAndType_info\"></a>CONSTANT_NameAndType_info</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_NameAndType_info &#123;</span><br><span class=\"line\">   u1 tag;              &#x2F;&#x2F;1字节，NameAndType 对就表中的值12</span><br><span class=\"line\">   u2 name_index;       &#x2F;&#x2F;2字节，指向该字段或方法名称常量项的索引</span><br><span class=\"line\">   u2 descriptor_index; &#x2F;&#x2F;2字节，指向该字段或方法描述符常量项的索引</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<ul>\n<li>JVM 是一种规范<br>参考文档：<br><a href=\"https://docs.oracle.com/en/java/javase/13/\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/en/java/javase/13/</a><br><a href=\"https://docs.oracle.com/javase/specs/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/index.html</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se13/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se13/html/index.html</a></li>\n<li>虚构出来的一台计算机  </li>\n</ul>\n<p>-字节码指令集（汇编语言）<br>-内存管理：堆、栈、方法区等  </p>\n<h4 id=\"常见的JVM实现\"><a href=\"#常见的JVM实现\" class=\"headerlink\" title=\"常见的JVM实现\"></a>常见的JVM实现</h4><ul>\n<li>Hotspot - Oracl 官方</li>\n<li>Jrockit - BEA，曾经号称世界上最快的JVM,被Oracle收购后，合并于hotspot</li>\n<li>J9 - IBM</li>\n<li>Microsoft VM</li>\n<li>TaobaoVM - Hotspot 深度定制版</li>\n<li>LiquidVM - 直接针对硬件</li>\n<li>azul zing - 商业版，最新垃圾回收的业界标杆，参考zing的垃圾回收产生了ZGC</li>\n</ul>\n<h4 id=\"JDK-JRE-JVM\"><a href=\"#JDK-JRE-JVM\" class=\"headerlink\" title=\"JDK, JRE, JVM\"></a>JDK, JRE, JVM</h4><p><img src=\"https://casparthh.github.io/2020/02/22/classfile/jvm.jpeg\" alt=\"常用垃圾回收器\"></p>","more":"<h4 id=\"查看ByteCode的方法\"><a href=\"#查看ByteCode的方法\" class=\"headerlink\" title=\"查看ByteCode的方法\"></a>查看ByteCode的方法</h4><ul>\n<li>javap</li>\n<li>JBE 可以直接修改</li>\n<li>JClassLib IDEA插件之一</li>\n</ul>\n<h4 id=\"Class-文件构成\"><a href=\"#Class-文件构成\" class=\"headerlink\" title=\"Class 文件构成\"></a>Class 文件构成</h4><ul>\n<li>魔数 “cafebaby”</li>\n<li>Class 文件版本</li>\n<li>常量池</li>\n<li>访问标志</li>\n<li>类索引，父类索引，接口索引集合</li>\n<li>字段表集合</li>\n<li>方法表集合</li>\n<li>属性表集合</li>\n</ul>\n<h4 id=\"Class-文件格式\"><a href=\"#Class-文件格式\" class=\"headerlink\" title=\"Class 文件格式\"></a>Class 文件格式</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>U4</td>\n<td>magic</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>minor_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>major_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>constant_pool_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>cp_info</td>\n<td>constant_pool</td>\n<td>constant_pool_count - 1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>access_flags</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>this_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>super_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>interfaces_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>interfaces</td>\n<td>interfaces_count</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>fields_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>field_info</td>\n<td>fields</td>\n<td>fields_count</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>methods_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>method_info</td>\n<td>methods</td>\n<td>methods_count</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>attributes_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>attribute_info</td>\n<td>attributes</td>\n<td>attributes_count</td>\n</tr>\n</tbody></table>\n<p>u1 一个字节，u2 两个字节。。。<br>一个16进制数就是4位，2个16进制数就是8位，也就是一个字节<br>char 1 个字节<br>int &amp; float 4个字节<br>double &amp; long 8个字节<br>magic = 0xCAFEBABE.<br>minor_version, major_version 定义版本号<br>constant_pool_count = constant_pool.size +1</p>\n<h4 id=\"access-flags\"><a href=\"#access-flags\" class=\"headerlink\" title=\"access_flags\"></a>access_flags</h4><p>参考 jvms13 Table 4.1-B. Class access and property modifiers</p>\n<table>\n<thead>\n<tr>\n<th>Flag Name</th>\n<th>Value</th>\n<th>Interpretation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ACC_PUBLIC</td>\n<td>0x0001</td>\n<td>Declared public; may be accessed from outside its package.</td>\n</tr>\n<tr>\n<td>ACC_FINAL</td>\n<td>0x0010</td>\n<td>Declared final; no subclasses allowed.</td>\n</tr>\n<tr>\n<td>ACC_SUPER</td>\n<td>0x0020</td>\n<td>Treat superclass methods specially when invoked by the invokespecial instruction.</td>\n</tr>\n<tr>\n<td>ACC_INTERFACE</td>\n<td>0x0200</td>\n<td>Is an interface, not a class.</td>\n</tr>\n<tr>\n<td>ACC_ABSTRACT</td>\n<td>0x0400</td>\n<td>Declared abstract; must not be instantiated.</td>\n</tr>\n<tr>\n<td>ACC_SYNTHETIC</td>\n<td>0x1000</td>\n<td>Declared synthetic; not present in the source code.</td>\n</tr>\n<tr>\n<td>ACC_ANNOTATION</td>\n<td>0x2000</td>\n<td>Declared as an annotation type.</td>\n</tr>\n<tr>\n<td>ACC_ENUM</td>\n<td>0x4000</td>\n<td>Declared as an enum type.</td>\n</tr>\n<tr>\n<td>ACC_MODULE</td>\n<td>0x8000</td>\n<td>Is a module, not a class or interface.</td>\n</tr>\n</tbody></table>\n<p>*实际值采用的位运算</p>\n<h4 id=\"Field-Descriptors\"><a href=\"#Field-Descriptors\" class=\"headerlink\" title=\"Field Descriptors\"></a>Field Descriptors</h4><p>参考 jvms13 Table 4.3-A. Interpretation of field descriptors</p>\n<table>\n<thead>\n<tr>\n<th>FieldType term</th>\n<th>Type</th>\n<th>Interpretation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B</td>\n<td>byte</td>\n<td>signed byte</td>\n</tr>\n<tr>\n<td>C</td>\n<td>char</td>\n<td>Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16</td>\n</tr>\n<tr>\n<td>D</td>\n<td>double</td>\n<td>double-precision floating-point value</td>\n</tr>\n<tr>\n<td>F</td>\n<td>float</td>\n<td>single-precision floating-point value</td>\n</tr>\n<tr>\n<td>I</td>\n<td>int</td>\n<td>integer</td>\n</tr>\n<tr>\n<td>J</td>\n<td>long</td>\n<td>long integer</td>\n</tr>\n<tr>\n<td>L ClassName;</td>\n<td>reference</td>\n<td>an instance of class ClassName</td>\n</tr>\n<tr>\n<td>S</td>\n<td>short</td>\n<td>signed short</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>boolean</td>\n<td>true or false</td>\n</tr>\n<tr>\n<td>[</td>\n<td>reference</td>\n<td>one array dimension</td>\n</tr>\n</tbody></table>\n<h4 id=\"Method-Descriptors\"><a href=\"#Method-Descriptors\" class=\"headerlink\" title=\"Method Descriptors\"></a>Method Descriptors</h4><p>( {ParameterDescriptor} ) ReturnDescriptor  </p>\n<p>Object m(int i, double d, Thread t) {…}<br>int-&gt;I, double-&gt;D, Thread-&gt;Ljava/lang/Thread，返回值Ojbect-&gt;Ljava/lang/Object;  </p>\n<p>所以该方法的描述符为：<br>(IDLjava/lang/Thread;)Ljava/lang/Object;  </p>\n<p>如果返回值为空，则ReturnDescriptor为VoidDescriptor-&gt;V<br>The character V indicates that the method returns no value (its result is void).</p>\n<h4 id=\"Constant-Pool\"><a href=\"#Constant-Pool\" class=\"headerlink\" title=\"Constant Pool\"></a>Constant Pool</h4><p>常量池中的每一个entry必须是由一个字节的tag开始来表示该常量的种类。<br>参考 jvms13 Table 4.4-A. Constant pool tags (by section)</p>\n<table>\n<thead>\n<tr>\n<th>Constant Kind</th>\n<th>Tag</th>\n<th>Section</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONSTANT_Utf8</td>\n<td>1</td>\n<td>§4.4.7</td>\n</tr>\n<tr>\n<td>CONSTANT_Integer</td>\n<td>3</td>\n<td>§4.4.4</td>\n</tr>\n<tr>\n<td>CONSTANT_Float</td>\n<td>4</td>\n<td>§4.4.4</td>\n</tr>\n<tr>\n<td>CONSTANT_Long</td>\n<td>5</td>\n<td>§4.4.5</td>\n</tr>\n<tr>\n<td>CONSTANT_Double</td>\n<td>6</td>\n<td>§4.4.5</td>\n</tr>\n<tr>\n<td>CONSTANT_Class</td>\n<td>7</td>\n<td>§4.4.1</td>\n</tr>\n<tr>\n<td>CONSTANT_String</td>\n<td>8</td>\n<td>§4.4.3</td>\n</tr>\n<tr>\n<td>CONSTANT_Fieldref</td>\n<td>9</td>\n<td>§4.4.2</td>\n</tr>\n<tr>\n<td>CONSTANT_Methodref</td>\n<td>10</td>\n<td>§4.4.2</td>\n</tr>\n<tr>\n<td>CONSTANT_InterfaceMethodref</td>\n<td>11</td>\n<td>§4.4.2</td>\n</tr>\n<tr>\n<td>CONSTANT_NameAndType</td>\n<td>12</td>\n<td>§4.4.6</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodHandle</td>\n<td>15</td>\n<td>§4.4.8</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodType</td>\n<td>16</td>\n<td>§4.4.9</td>\n</tr>\n<tr>\n<td>CONSTANT_Dynamic (JDK11)</td>\n<td>17</td>\n<td>§4.4.10</td>\n</tr>\n<tr>\n<td>CONSTANT_InvokeDynamic</td>\n<td>18</td>\n<td>§4.4.10</td>\n</tr>\n<tr>\n<td>CONSTANT_Module (JDK9)</td>\n<td>19</td>\n<td>§4.4.11</td>\n</tr>\n<tr>\n<td>CONSTANT_Package (JDK9)</td>\n<td>20</td>\n<td>§4.4.12</td>\n</tr>\n</tbody></table>\n<p>表中的section表是该tag详细文档对应的章节。</p>\n<h4 id=\"CONSTANT-Utf8-info\"><a href=\"#CONSTANT-Utf8-info\" class=\"headerlink\" title=\"CONSTANT_Utf8_info\"></a>CONSTANT_Utf8_info</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Utf8_info &#123;</span><br><span class=\"line\">    u1 tag;             &#x2F;&#x2F;占一个字节, CONSTANT_Utf8 对就上面的值为1</span><br><span class=\"line\">    u2 length;          &#x2F;&#x2F;UTF-8字符串占用的字节数   </span><br><span class=\"line\">    u1 bytes[length];   &#x2F;&#x2F;长度为length的字符串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-Integer-info-CONSTANT-Float-info-Structures-数据结构\"><a href=\"#CONSTANT-Integer-info-CONSTANT-Float-info-Structures-数据结构\" class=\"headerlink\" title=\"CONSTANT_Integer_info, CONSTANT_Float_info Structures 数据结构\"></a>CONSTANT_Integer_info, CONSTANT_Float_info Structures 数据结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Integer_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 bytes;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CONSTANT_Float_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 bytes; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-Long-info-and-CONSTANT-Double-info-数据结构\"><a href=\"#CONSTANT-Long-info-and-CONSTANT-Double-info-数据结构\" class=\"headerlink\" title=\"CONSTANT_Long_info and CONSTANT_Double_info 数据结构\"></a>CONSTANT_Long_info and CONSTANT_Double_info 数据结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Long_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 high_bytes;</span><br><span class=\"line\">   u4 low_bytes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CONSTANT_Double_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u4 high_bytes;</span><br><span class=\"line\">   u4 low_bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"CONSTANT-Class-info-数据结构\"><a href=\"#CONSTANT-Class-info-数据结构\" class=\"headerlink\" title=\"CONSTANT_Class_info 数据结构\"></a>CONSTANT_Class_info 数据结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Class_info &#123;</span><br><span class=\"line\">   u1 tag;              &#x2F;&#x2F;CONSTANT_Class 对应上面表中的7， 占一个字节；</span><br><span class=\"line\">   u2 name_index;       &#x2F;&#x2F;指向常量池的索引位置，该位置存放类的名称, 占用2个字节</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-String-info-数据结构\"><a href=\"#CONSTANT-String-info-数据结构\" class=\"headerlink\" title=\"CONSTANT_String_info 数据结构\"></a>CONSTANT_String_info 数据结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_String_info &#123;</span><br><span class=\"line\">   u1 tag;</span><br><span class=\"line\">   u2 string_index;     &#x2F;&#x2F;占2字节，指向字符串的索引;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-Fieldref-info-CONSTANT-Methodref-info-CONSTANT-InterfaceMethodref-info-内存节构\"><a href=\"#CONSTANT-Fieldref-info-CONSTANT-Methodref-info-CONSTANT-InterfaceMethodref-info-内存节构\" class=\"headerlink\" title=\"CONSTANT_Fieldref_info, CONSTANT_Methodref_info, CONSTANT_InterfaceMethodref_info 内存节构\"></a>CONSTANT_Fieldref_info, CONSTANT_Methodref_info, CONSTANT_InterfaceMethodref_info 内存节构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_Fieldref_info &#123;</span><br><span class=\"line\">   u1 tag;                  &#x2F;&#x2F;CONSTANT_Fieldref 对应上面表中的9， 占一个字节；</span><br><span class=\"line\">   u2 class_index;          &#x2F;&#x2F;占2字节，指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项</span><br><span class=\"line\">   u2 name_and_type_index; &#x2F;&#x2F;占2字节，指向字段描述符CONSTANT_NameAndType的索引项</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CONSTANT_Methodref_info &#123;</span><br><span class=\"line\">   u1 tag;                  &#x2F;&#x2F;CONSTANT_Methodref 对应上面表中的10， 占一个字节；</span><br><span class=\"line\">   u2 class_index;          &#x2F;&#x2F;占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项</span><br><span class=\"line\">   u2 name_and_type_index; &#x2F;&#x2F;占2字节，指向字段描述符CONSTANT_NameAndType的索引项</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CONSTANT_InterfaceMethodref_info &#123;</span><br><span class=\"line\">   u1 tag;                  &#x2F;&#x2F;CONSTANT_InterfaceMethodref 对应上面表中的11， 占一个字节；</span><br><span class=\"line\">   u2 class_index;          &#x2F;&#x2F;占2字节，指向声明方法的类或者接口描述符CONSTANT_Class_info的索引项</span><br><span class=\"line\">   u2 name_and_type_index; &#x2F;&#x2F;占2字节，指向字段描述符CONSTANT_NameAndType的索引项</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONSTANT-NameAndType-info\"><a href=\"#CONSTANT-NameAndType-info\" class=\"headerlink\" title=\"CONSTANT_NameAndType_info\"></a>CONSTANT_NameAndType_info</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONSTANT_NameAndType_info &#123;</span><br><span class=\"line\">   u1 tag;              &#x2F;&#x2F;1字节，NameAndType 对就表中的值12</span><br><span class=\"line\">   u2 name_index;       &#x2F;&#x2F;2字节，指向该字段或方法名称常量项的索引</span><br><span class=\"line\">   u2 descriptor_index; &#x2F;&#x2F;2字节，指向该字段或方法描述符常量项的索引</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JVM - JMM内存模型","date":"2020-02-22T08:20:37.000Z","toc":true,"_content":"### 一、CPU和内存的交互\n在计算机中，CPU和内存的交互最为频繁，相比内存，磁盘读写太慢，内存相当于高速的缓冲区。\n\n在多核CPU中，每个处理器都有各自的高速缓存(L1,L2,L3)，而主内存确只有一个 。\n\n越靠近CPU的缓存越快也越小。所以L1缓存(一级缓存)很小但很快，并且紧靠着在使用它的CPU内核。L2大一些，也慢一些，并且仍然只能被一个单独的 CPU 核使用。L3在现代多核机器中更普遍，仍然更大，更慢，并且被单个插槽上的所有 CPU 核共享。\n\n当CPU执行运算的时候，它先去L1查找所需的数据，再去L2，然后是L3，最后如果这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。\n<!--more-->\n |从CPU到 | 大约需要的CPU 周期 | 大约需要的时间| \n | --- | --- | --- |\n | 主存 |  | 约60-80纳秒|\n | QPI总线传输(between sockets, not drawn) |  | 约20ns |\n | L3 cache\t| 约40-45 cycles | 约15ns |\n | L2 cache\t| 约10 cycles | 约3ns |\n | L1 cache | 约3-4 cycles | 约1ns |\n | 寄存器 | 1 cycle | |\n\n### 二、缓存行\n数据在缓存中不是以独立的项来存储的，缓存是由缓存行组成的，通常是64字节，并且它有效地引用主内存中的一块地址。一个Java的long类型是8字节，因此在一个缓存行中可以存8个long类型的变量。\n非常奇妙的是如果你访问一个long数组，当数组中的一个值被加载到缓存中，它会额外加载另外7个。因此你能非常快地遍历这个数组。\n因此如果数据结构中的项在内存中不是彼此相邻的（链表），你将得不到免费缓存加载所带来的优势。并且在这些数据结构中的每一个项都可能会出现缓存未命中。\n\n#### 伪共享问题 （缓存行对齐提高效率）\n但这种加载有一个弊端。设想long类型的数据不是数组的一部分，它只是一个单独的变量。让我们称它为head。然后再设想有另一个变量tail紧挨着它。当加载head到缓存的时候同时也加载了tail。\ntail正在被你的生产者写入，而head正在被你的消费者写入。这两个变量实际上并不是密切相关的，而事实上却要被两个不同内核中运行的线程所使用。\n \n设想消费者更新了head的值。缓存中的值和内存中的值都被更新了，而其他所有存储head的缓存行都会都会失效。请记住我们必须以整个缓存行作为单位来处理，不能只把head标记为无效。\n现在如果一些正在其他内核中运行的进程只是想读tail的值，整个缓存行需要从主内存重新读取。那么一个和你的消费者无关的线程读一个和head无关的值，它被缓存未命中给拖慢了。\n\n#### 硬件层数据一致性\nMESI(Modified Exclusive Shared Or Invalid)--CPU缓存一致性协议, 是一种广泛使用的支持写回策略的缓存一致性协议。\n \n##### MESI协议中的状态\nCPU中每个缓存行（caceh line)使用4种状态进行标记，CPU在每个cache line 额外两位标记四种状态（使用额外的两位(bit)表示):\n \nM: 被修改（Modified)  \n该缓存行只被缓存在该CPU的缓存中，并且是被修改过的（dirty),即与主存中的数据不一致，该缓存行中的内存需要在未来的某个时间点（允许其它CPU读取请主存中相应内存之前）写回（write back）主存。 当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。\n \nE: 独享的（Exclusive)   \n该缓存行只被缓存在该CPU的缓存中，它是未被修改过的（clean)，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。同样地，当CPU修改该缓存行中内容时，该状态可以变成Modified状态。\n \nS:共享的（Shared)  \n该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致（clean)，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。\n \nI: 无效的（Invalid）  \n该缓存是无效的（可能有其它CPU修改了该缓存行）。\n\n### 三、乱序问题\nCPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系。\n\n#### 内存屏障(Memory Barrier) 保证特定情况下不乱序\nCPU执行指令可能是无序的，内存屏障有两个比较重要的作用\n1. 阻止屏障两侧指令重排序\n2. 强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。\n\n##### 硬件内存屏障 X86\n* sfence: store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。\n* lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。\n* mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。\n* 原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序\n\n##### JVM级别如何规范（JSR133）\n* LoadLoad屏障：\n  在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。\n \n* StoreStore屏障：\n  在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。\n\n* LoadStore屏障：\n  在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。\n\n* StoreLoad屏障：\n  在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。\n\n\n\n##### volatile的实现细节\n1. 字节码层面\n    * ACC_VOLATILE\n\n2. JVM层面, Volatile内存区的读写都加屏障\n    * StoreStoreBarrier\n    * volatile 写操作\n    * StoreLoadBarrier\n    * LoadLoadBarrier\n    * volatile 读操作\n    * LoadStoreBarrier\n\n##### synchronized实现细节\n1. 字节码层面\n    * ACC_SYNCHRONIZED\n    * monitorenter monitorexit\n    \n2. JVM层面\n    * C C++ 调用了操作系统提供的同步机制\n \n","source":"_posts/2020-02-22-jmm.md","raw":"---\ntitle: JVM - JMM内存模型 \ndate: 2020-02-22 16:20:37\ntoc: true\ncategories:\n- 技术笔记\ntags: \n- JVM\n---\n### 一、CPU和内存的交互\n在计算机中，CPU和内存的交互最为频繁，相比内存，磁盘读写太慢，内存相当于高速的缓冲区。\n\n在多核CPU中，每个处理器都有各自的高速缓存(L1,L2,L3)，而主内存确只有一个 。\n\n越靠近CPU的缓存越快也越小。所以L1缓存(一级缓存)很小但很快，并且紧靠着在使用它的CPU内核。L2大一些，也慢一些，并且仍然只能被一个单独的 CPU 核使用。L3在现代多核机器中更普遍，仍然更大，更慢，并且被单个插槽上的所有 CPU 核共享。\n\n当CPU执行运算的时候，它先去L1查找所需的数据，再去L2，然后是L3，最后如果这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。\n<!--more-->\n |从CPU到 | 大约需要的CPU 周期 | 大约需要的时间| \n | --- | --- | --- |\n | 主存 |  | 约60-80纳秒|\n | QPI总线传输(between sockets, not drawn) |  | 约20ns |\n | L3 cache\t| 约40-45 cycles | 约15ns |\n | L2 cache\t| 约10 cycles | 约3ns |\n | L1 cache | 约3-4 cycles | 约1ns |\n | 寄存器 | 1 cycle | |\n\n### 二、缓存行\n数据在缓存中不是以独立的项来存储的，缓存是由缓存行组成的，通常是64字节，并且它有效地引用主内存中的一块地址。一个Java的long类型是8字节，因此在一个缓存行中可以存8个long类型的变量。\n非常奇妙的是如果你访问一个long数组，当数组中的一个值被加载到缓存中，它会额外加载另外7个。因此你能非常快地遍历这个数组。\n因此如果数据结构中的项在内存中不是彼此相邻的（链表），你将得不到免费缓存加载所带来的优势。并且在这些数据结构中的每一个项都可能会出现缓存未命中。\n\n#### 伪共享问题 （缓存行对齐提高效率）\n但这种加载有一个弊端。设想long类型的数据不是数组的一部分，它只是一个单独的变量。让我们称它为head。然后再设想有另一个变量tail紧挨着它。当加载head到缓存的时候同时也加载了tail。\ntail正在被你的生产者写入，而head正在被你的消费者写入。这两个变量实际上并不是密切相关的，而事实上却要被两个不同内核中运行的线程所使用。\n \n设想消费者更新了head的值。缓存中的值和内存中的值都被更新了，而其他所有存储head的缓存行都会都会失效。请记住我们必须以整个缓存行作为单位来处理，不能只把head标记为无效。\n现在如果一些正在其他内核中运行的进程只是想读tail的值，整个缓存行需要从主内存重新读取。那么一个和你的消费者无关的线程读一个和head无关的值，它被缓存未命中给拖慢了。\n\n#### 硬件层数据一致性\nMESI(Modified Exclusive Shared Or Invalid)--CPU缓存一致性协议, 是一种广泛使用的支持写回策略的缓存一致性协议。\n \n##### MESI协议中的状态\nCPU中每个缓存行（caceh line)使用4种状态进行标记，CPU在每个cache line 额外两位标记四种状态（使用额外的两位(bit)表示):\n \nM: 被修改（Modified)  \n该缓存行只被缓存在该CPU的缓存中，并且是被修改过的（dirty),即与主存中的数据不一致，该缓存行中的内存需要在未来的某个时间点（允许其它CPU读取请主存中相应内存之前）写回（write back）主存。 当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。\n \nE: 独享的（Exclusive)   \n该缓存行只被缓存在该CPU的缓存中，它是未被修改过的（clean)，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。同样地，当CPU修改该缓存行中内容时，该状态可以变成Modified状态。\n \nS:共享的（Shared)  \n该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致（clean)，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。\n \nI: 无效的（Invalid）  \n该缓存是无效的（可能有其它CPU修改了该缓存行）。\n\n### 三、乱序问题\nCPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系。\n\n#### 内存屏障(Memory Barrier) 保证特定情况下不乱序\nCPU执行指令可能是无序的，内存屏障有两个比较重要的作用\n1. 阻止屏障两侧指令重排序\n2. 强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。\n\n##### 硬件内存屏障 X86\n* sfence: store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。\n* lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。\n* mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。\n* 原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序\n\n##### JVM级别如何规范（JSR133）\n* LoadLoad屏障：\n  在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。\n \n* StoreStore屏障：\n  在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。\n\n* LoadStore屏障：\n  在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。\n\n* StoreLoad屏障：\n  在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。\n\n\n\n##### volatile的实现细节\n1. 字节码层面\n    * ACC_VOLATILE\n\n2. JVM层面, Volatile内存区的读写都加屏障\n    * StoreStoreBarrier\n    * volatile 写操作\n    * StoreLoadBarrier\n    * LoadLoadBarrier\n    * volatile 读操作\n    * LoadStoreBarrier\n\n##### synchronized实现细节\n1. 字节码层面\n    * ACC_SYNCHRONIZED\n    * monitorenter monitorexit\n    \n2. JVM层面\n    * C C++ 调用了操作系统提供的同步机制\n \n","slug":"jmm","published":1,"updated":"2020-02-23T08:38:35.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6ztaquj000j5xc93mjsb2kv","content":"<h3 id=\"一、CPU和内存的交互\"><a href=\"#一、CPU和内存的交互\" class=\"headerlink\" title=\"一、CPU和内存的交互\"></a>一、CPU和内存的交互</h3><p>在计算机中，CPU和内存的交互最为频繁，相比内存，磁盘读写太慢，内存相当于高速的缓冲区。</p>\n<p>在多核CPU中，每个处理器都有各自的高速缓存(L1,L2,L3)，而主内存确只有一个 。</p>\n<p>越靠近CPU的缓存越快也越小。所以L1缓存(一级缓存)很小但很快，并且紧靠着在使用它的CPU内核。L2大一些，也慢一些，并且仍然只能被一个单独的 CPU 核使用。L3在现代多核机器中更普遍，仍然更大，更慢，并且被单个插槽上的所有 CPU 核共享。</p>\n<p>当CPU执行运算的时候，它先去L1查找所需的数据，再去L2，然后是L3，最后如果这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。</p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th>从CPU到</th>\n<th>大约需要的CPU 周期</th>\n<th>大约需要的时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主存</td>\n<td></td>\n<td>约60-80纳秒</td>\n</tr>\n<tr>\n<td>QPI总线传输(between sockets, not drawn)</td>\n<td></td>\n<td>约20ns</td>\n</tr>\n<tr>\n<td>L3 cache</td>\n<td>约40-45 cycles</td>\n<td>约15ns</td>\n</tr>\n<tr>\n<td>L2 cache</td>\n<td>约10 cycles</td>\n<td>约3ns</td>\n</tr>\n<tr>\n<td>L1 cache</td>\n<td>约3-4 cycles</td>\n<td>约1ns</td>\n</tr>\n<tr>\n<td>寄存器</td>\n<td>1 cycle</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"二、缓存行\"><a href=\"#二、缓存行\" class=\"headerlink\" title=\"二、缓存行\"></a>二、缓存行</h3><p>数据在缓存中不是以独立的项来存储的，缓存是由缓存行组成的，通常是64字节，并且它有效地引用主内存中的一块地址。一个Java的long类型是8字节，因此在一个缓存行中可以存8个long类型的变量。<br>非常奇妙的是如果你访问一个long数组，当数组中的一个值被加载到缓存中，它会额外加载另外7个。因此你能非常快地遍历这个数组。<br>因此如果数据结构中的项在内存中不是彼此相邻的（链表），你将得不到免费缓存加载所带来的优势。并且在这些数据结构中的每一个项都可能会出现缓存未命中。</p>\n<h4 id=\"伪共享问题-（缓存行对齐提高效率）\"><a href=\"#伪共享问题-（缓存行对齐提高效率）\" class=\"headerlink\" title=\"伪共享问题 （缓存行对齐提高效率）\"></a>伪共享问题 （缓存行对齐提高效率）</h4><p>但这种加载有一个弊端。设想long类型的数据不是数组的一部分，它只是一个单独的变量。让我们称它为head。然后再设想有另一个变量tail紧挨着它。当加载head到缓存的时候同时也加载了tail。<br>tail正在被你的生产者写入，而head正在被你的消费者写入。这两个变量实际上并不是密切相关的，而事实上却要被两个不同内核中运行的线程所使用。</p>\n<p>设想消费者更新了head的值。缓存中的值和内存中的值都被更新了，而其他所有存储head的缓存行都会都会失效。请记住我们必须以整个缓存行作为单位来处理，不能只把head标记为无效。<br>现在如果一些正在其他内核中运行的进程只是想读tail的值，整个缓存行需要从主内存重新读取。那么一个和你的消费者无关的线程读一个和head无关的值，它被缓存未命中给拖慢了。</p>\n<h4 id=\"硬件层数据一致性\"><a href=\"#硬件层数据一致性\" class=\"headerlink\" title=\"硬件层数据一致性\"></a>硬件层数据一致性</h4><p>MESI(Modified Exclusive Shared Or Invalid)–CPU缓存一致性协议, 是一种广泛使用的支持写回策略的缓存一致性协议。</p>\n<h5 id=\"MESI协议中的状态\"><a href=\"#MESI协议中的状态\" class=\"headerlink\" title=\"MESI协议中的状态\"></a>MESI协议中的状态</h5><p>CPU中每个缓存行（caceh line)使用4种状态进行标记，CPU在每个cache line 额外两位标记四种状态（使用额外的两位(bit)表示):</p>\n<p>M: 被修改（Modified)<br>该缓存行只被缓存在该CPU的缓存中，并且是被修改过的（dirty),即与主存中的数据不一致，该缓存行中的内存需要在未来的某个时间点（允许其它CPU读取请主存中相应内存之前）写回（write back）主存。 当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。</p>\n<p>E: 独享的（Exclusive)<br>该缓存行只被缓存在该CPU的缓存中，它是未被修改过的（clean)，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。同样地，当CPU修改该缓存行中内容时，该状态可以变成Modified状态。</p>\n<p>S:共享的（Shared)<br>该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致（clean)，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。</p>\n<p>I: 无效的（Invalid）<br>该缓存是无效的（可能有其它CPU修改了该缓存行）。</p>\n<h3 id=\"三、乱序问题\"><a href=\"#三、乱序问题\" class=\"headerlink\" title=\"三、乱序问题\"></a>三、乱序问题</h3><p>CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系。</p>\n<h4 id=\"内存屏障-Memory-Barrier-保证特定情况下不乱序\"><a href=\"#内存屏障-Memory-Barrier-保证特定情况下不乱序\" class=\"headerlink\" title=\"内存屏障(Memory Barrier) 保证特定情况下不乱序\"></a>内存屏障(Memory Barrier) 保证特定情况下不乱序</h4><p>CPU执行指令可能是无序的，内存屏障有两个比较重要的作用</p>\n<ol>\n<li>阻止屏障两侧指令重排序</li>\n<li>强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。</li>\n</ol>\n<h5 id=\"硬件内存屏障-X86\"><a href=\"#硬件内存屏障-X86\" class=\"headerlink\" title=\"硬件内存屏障 X86\"></a>硬件内存屏障 X86</h5><ul>\n<li>sfence: store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。</li>\n<li>lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。</li>\n<li>mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。</li>\n<li>原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</li>\n</ul>\n<h5 id=\"JVM级别如何规范（JSR133）\"><a href=\"#JVM级别如何规范（JSR133）\" class=\"headerlink\" title=\"JVM级别如何规范（JSR133）\"></a>JVM级别如何规范（JSR133）</h5><ul>\n<li><p>LoadLoad屏障：<br>在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreStore屏障：<br>在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</p>\n</li>\n<li><p>LoadStore屏障：<br>在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreLoad屏障：<br>在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</p>\n</li>\n</ul>\n<h5 id=\"volatile的实现细节\"><a href=\"#volatile的实现细节\" class=\"headerlink\" title=\"volatile的实现细节\"></a>volatile的实现细节</h5><ol>\n<li><p>字节码层面</p>\n<ul>\n<li>ACC_VOLATILE</li>\n</ul>\n</li>\n<li><p>JVM层面, Volatile内存区的读写都加屏障</p>\n<ul>\n<li>StoreStoreBarrier</li>\n<li>volatile 写操作</li>\n<li>StoreLoadBarrier</li>\n<li>LoadLoadBarrier</li>\n<li>volatile 读操作</li>\n<li>LoadStoreBarrier</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"synchronized实现细节\"><a href=\"#synchronized实现细节\" class=\"headerlink\" title=\"synchronized实现细节\"></a>synchronized实现细节</h5><ol>\n<li><p>字节码层面</p>\n<ul>\n<li>ACC_SYNCHRONIZED</li>\n<li>monitorenter monitorexit</li>\n</ul>\n</li>\n<li><p>JVM层面</p>\n<ul>\n<li>C C++ 调用了操作系统提供的同步机制</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、CPU和内存的交互\"><a href=\"#一、CPU和内存的交互\" class=\"headerlink\" title=\"一、CPU和内存的交互\"></a>一、CPU和内存的交互</h3><p>在计算机中，CPU和内存的交互最为频繁，相比内存，磁盘读写太慢，内存相当于高速的缓冲区。</p>\n<p>在多核CPU中，每个处理器都有各自的高速缓存(L1,L2,L3)，而主内存确只有一个 。</p>\n<p>越靠近CPU的缓存越快也越小。所以L1缓存(一级缓存)很小但很快，并且紧靠着在使用它的CPU内核。L2大一些，也慢一些，并且仍然只能被一个单独的 CPU 核使用。L3在现代多核机器中更普遍，仍然更大，更慢，并且被单个插槽上的所有 CPU 核共享。</p>\n<p>当CPU执行运算的时候，它先去L1查找所需的数据，再去L2，然后是L3，最后如果这些缓存中都没有，所需的数据就要去主内存拿。走得越远，运算耗费的时间就越长。</p>","more":"<table>\n<thead>\n<tr>\n<th>从CPU到</th>\n<th>大约需要的CPU 周期</th>\n<th>大约需要的时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主存</td>\n<td></td>\n<td>约60-80纳秒</td>\n</tr>\n<tr>\n<td>QPI总线传输(between sockets, not drawn)</td>\n<td></td>\n<td>约20ns</td>\n</tr>\n<tr>\n<td>L3 cache</td>\n<td>约40-45 cycles</td>\n<td>约15ns</td>\n</tr>\n<tr>\n<td>L2 cache</td>\n<td>约10 cycles</td>\n<td>约3ns</td>\n</tr>\n<tr>\n<td>L1 cache</td>\n<td>约3-4 cycles</td>\n<td>约1ns</td>\n</tr>\n<tr>\n<td>寄存器</td>\n<td>1 cycle</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"二、缓存行\"><a href=\"#二、缓存行\" class=\"headerlink\" title=\"二、缓存行\"></a>二、缓存行</h3><p>数据在缓存中不是以独立的项来存储的，缓存是由缓存行组成的，通常是64字节，并且它有效地引用主内存中的一块地址。一个Java的long类型是8字节，因此在一个缓存行中可以存8个long类型的变量。<br>非常奇妙的是如果你访问一个long数组，当数组中的一个值被加载到缓存中，它会额外加载另外7个。因此你能非常快地遍历这个数组。<br>因此如果数据结构中的项在内存中不是彼此相邻的（链表），你将得不到免费缓存加载所带来的优势。并且在这些数据结构中的每一个项都可能会出现缓存未命中。</p>\n<h4 id=\"伪共享问题-（缓存行对齐提高效率）\"><a href=\"#伪共享问题-（缓存行对齐提高效率）\" class=\"headerlink\" title=\"伪共享问题 （缓存行对齐提高效率）\"></a>伪共享问题 （缓存行对齐提高效率）</h4><p>但这种加载有一个弊端。设想long类型的数据不是数组的一部分，它只是一个单独的变量。让我们称它为head。然后再设想有另一个变量tail紧挨着它。当加载head到缓存的时候同时也加载了tail。<br>tail正在被你的生产者写入，而head正在被你的消费者写入。这两个变量实际上并不是密切相关的，而事实上却要被两个不同内核中运行的线程所使用。</p>\n<p>设想消费者更新了head的值。缓存中的值和内存中的值都被更新了，而其他所有存储head的缓存行都会都会失效。请记住我们必须以整个缓存行作为单位来处理，不能只把head标记为无效。<br>现在如果一些正在其他内核中运行的进程只是想读tail的值，整个缓存行需要从主内存重新读取。那么一个和你的消费者无关的线程读一个和head无关的值，它被缓存未命中给拖慢了。</p>\n<h4 id=\"硬件层数据一致性\"><a href=\"#硬件层数据一致性\" class=\"headerlink\" title=\"硬件层数据一致性\"></a>硬件层数据一致性</h4><p>MESI(Modified Exclusive Shared Or Invalid)–CPU缓存一致性协议, 是一种广泛使用的支持写回策略的缓存一致性协议。</p>\n<h5 id=\"MESI协议中的状态\"><a href=\"#MESI协议中的状态\" class=\"headerlink\" title=\"MESI协议中的状态\"></a>MESI协议中的状态</h5><p>CPU中每个缓存行（caceh line)使用4种状态进行标记，CPU在每个cache line 额外两位标记四种状态（使用额外的两位(bit)表示):</p>\n<p>M: 被修改（Modified)<br>该缓存行只被缓存在该CPU的缓存中，并且是被修改过的（dirty),即与主存中的数据不一致，该缓存行中的内存需要在未来的某个时间点（允许其它CPU读取请主存中相应内存之前）写回（write back）主存。 当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。</p>\n<p>E: 独享的（Exclusive)<br>该缓存行只被缓存在该CPU的缓存中，它是未被修改过的（clean)，与主存中数据一致。该状态可以在任何时刻当有其它CPU读取该内存时变成共享状态（shared)。同样地，当CPU修改该缓存行中内容时，该状态可以变成Modified状态。</p>\n<p>S:共享的（Shared)<br>该状态意味着该缓存行可能被多个CPU缓存，并且各个缓存中的数据与主存数据一致（clean)，当有一个CPU修改该缓存行中，其它CPU中该缓存行可以被作废（变成无效状态（Invalid））。</p>\n<p>I: 无效的（Invalid）<br>该缓存是无效的（可能有其它CPU修改了该缓存行）。</p>\n<h3 id=\"三、乱序问题\"><a href=\"#三、乱序问题\" class=\"headerlink\" title=\"三、乱序问题\"></a>三、乱序问题</h3><p>CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系。</p>\n<h4 id=\"内存屏障-Memory-Barrier-保证特定情况下不乱序\"><a href=\"#内存屏障-Memory-Barrier-保证特定情况下不乱序\" class=\"headerlink\" title=\"内存屏障(Memory Barrier) 保证特定情况下不乱序\"></a>内存屏障(Memory Barrier) 保证特定情况下不乱序</h4><p>CPU执行指令可能是无序的，内存屏障有两个比较重要的作用</p>\n<ol>\n<li>阻止屏障两侧指令重排序</li>\n<li>强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。</li>\n</ol>\n<h5 id=\"硬件内存屏障-X86\"><a href=\"#硬件内存屏障-X86\" class=\"headerlink\" title=\"硬件内存屏障 X86\"></a>硬件内存屏障 X86</h5><ul>\n<li>sfence: store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。</li>\n<li>lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。</li>\n<li>mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。</li>\n<li>原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</li>\n</ul>\n<h5 id=\"JVM级别如何规范（JSR133）\"><a href=\"#JVM级别如何规范（JSR133）\" class=\"headerlink\" title=\"JVM级别如何规范（JSR133）\"></a>JVM级别如何规范（JSR133）</h5><ul>\n<li><p>LoadLoad屏障：<br>在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreStore屏障：<br>在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</p>\n</li>\n<li><p>LoadStore屏障：<br>在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreLoad屏障：<br>在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</p>\n</li>\n</ul>\n<h5 id=\"volatile的实现细节\"><a href=\"#volatile的实现细节\" class=\"headerlink\" title=\"volatile的实现细节\"></a>volatile的实现细节</h5><ol>\n<li><p>字节码层面</p>\n<ul>\n<li>ACC_VOLATILE</li>\n</ul>\n</li>\n<li><p>JVM层面, Volatile内存区的读写都加屏障</p>\n<ul>\n<li>StoreStoreBarrier</li>\n<li>volatile 写操作</li>\n<li>StoreLoadBarrier</li>\n<li>LoadLoadBarrier</li>\n<li>volatile 读操作</li>\n<li>LoadStoreBarrier</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"synchronized实现细节\"><a href=\"#synchronized实现细节\" class=\"headerlink\" title=\"synchronized实现细节\"></a>synchronized实现细节</h5><ol>\n<li><p>字节码层面</p>\n<ul>\n<li>ACC_SYNCHRONIZED</li>\n<li>monitorenter monitorexit</li>\n</ul>\n</li>\n<li><p>JVM层面</p>\n<ul>\n<li>C C++ 调用了操作系统提供的同步机制</li>\n</ul>\n</li>\n</ol>"},{"title":"高并发 - 网络协议原理","date":"2020-03-01T08:53:16.000Z","toc":true,"_content":"\n### 计算机网络体系结构分层\n<table style=\"border: solid;\">\n    <tr style=\"text-align:center\">\n        <td>OSI 七层模型</td> \n        <td>TCP/IP 概念层模型</td> \n        <td>功能</td>\n        <td>TCP/IP 协议</td>\n   </tr>\n    <tr>\n        <td>应用层</td>\n        <td rowspan=\"3\">应用层</td>\n        <td>文件传输，电子邮件，文件服务 ，虚拟终端</td>\n        <td>TFTP,HTTP,SMTP,FTP,SNTP,DNS,Telnet</td>\n    </tr>\n    <tr>\n        <td>表示层</td>\n        <td>数据格式化，代码转换，数据加密</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>会话层</td>\n        <td>解除或建立与的接点的联系</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>传输层</td>\n        <td>传输层</td>\n        <td>提供端对端的接口</td>\n        <td>TCP,UDP</td>\n    </tr>\n    <tr>\n        <td>网络层</td>\n        <td>网络层</td>\n        <td>为数据包选择路由</td>\n        <td>IP,ICMP,RIP,OSPF,BCP,ICMP</td>\n    </tr>\n    <tr>\n        <td>数据链路层</td>\n        <td rowspan=\"2\">链路层</td>\n        <td>传输有地址的帧以及错误检测功能</td>\n        <td>SLIP,CSLIP,PPP,ARP,RARP,MTU</td>\n    </tr>\n    <tr>\n        <td>物理层</td>\n        <td>以二进制数据型式在物理媒体上传数数据</td>\n        <td>ISO2110,IEEE802,IEEE802.2</td>\n    </tr>\n</table>\n<!--more-->\n### 应用层协议演示\n* 建立连接\n```\n    cd /proc/$$/fd\n    exec 8<> /dev/tcp/www.baidu.com/80\n```\n$$当前进程ID<br>\nfd:文件描述符<br>\n执行完后再执行ll 可以查看到多了一个socket连接\n\n* 传送数据（http协议：规范标准）\n```\necho -e 'GET / HTTP/1.0\\n' >&8\n```\nGET / HTTP/1.0：HTTP 协议规定的 Request 请求头最小的写法  \nGET: 请求方法  \n/: URL请求资源  \nHTTP/1.0： HTTP 协议版本  \n-e 识别\\n换行符  \necho 打印Request信息重定向到文件描述符8 Socket里，Socket会发送到百度\n* 查看结果\n```\ncat <& 8\n```\n\n### 传输控制层 TCP三次握手四次挥手\n* 三次握手  \n在socket通过TCP协议进行数据连接时，客户端在连接上服务端后会有一个三次握手的过程  \n  + 客户端：我可以和你传输数据吗  \n  + 服务端：可以  \n  + 客户端：好的我来了  \n* 四次挥手  \n在socket端开连接时，会有一个四次挥手的过程  \n  + 我要断开连接了  \n  + 好的，我先处理完手中的任务  \n  + 好的，我等你  \n  + 断开吧  \n* 三次握手>数据传输>四次分手 成为一个最小粒度,不可被分割\n\n* 查看当前所有Socket连接信息：netstat -natp\nn: 显示ip地址，不要用逻辑名称  \na: 所有  \nt: 查看当前所有的socket链接  \np: PID，显示通信是哪个进程的ID号  \n\n###  网络层下一跳寻址  \ncat /etc/sysconfig/network-scripts/ifcfg-eth1\nIPADDR=192.168.79.101  \nGATEWAY=192.168.79.2  \nNETMASK=255.255.255.0  \nIP地址，点分字节，通信每一个点的标识符，IP是端点间，MAC地址是节点间的\n\nTCP/IP协议：基于下一跳的机制, 每一台互联网设备的内存中，不需要存储全网数据，只需要存周边一步之内的数据\nIP地址与掩码发生二进制的按位与计算:  192.168.79.101 & 255.255.255.0  \n得出这台机器的网络号是：192.168.79.0； 当前机器是这个网络中的第101号。\n\n#### 查看路由表\n路由表：存储了本地计算机可以到达的网络目的地址范围和如何到达的路由信息。路由表是TCP/IP通信的基础，本地计算机上的任何TCP/IP通信都受到路由表的控制。\n\n```\nroute -n\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n192.168.79.0    0.0.0.0         255.255.255.0   U     1      0        0 eth1\n0.0.0.0         192.168.79.2    0.0.0.0         UG    0      0        0 eth1\n```\n* U 表示该路由可以使用。\n* G 该路由是到一个网关（路由器）\n\n1） 网络地址（Network Destination）、网络掩码（Netmask）  \n网络地址和网络掩码相与的结果用于定义本地计算机可以到达的目的网络地址范围。\n\n2） 网关（Gateway，又称为下一跳服务器）\n在发送IP数据包时，网关定义了针对特定的网络目的地址，数据包发送到的下一跳服务器。如果是本地计算机直接连接到的网络，网关通常是0.0.0.0。如果是远程网络或默认路由，网关通常是本地计算机所连接到的网络上的某个服务器或路由器。\n\n3） 接口（Interface）\n接口定义了针对特定的网络目的地址，本地计算机用于发送数据包的网络接口。\n\n(4) 跃点数（Metric）\n跃点数用于指出路由的成本，通常情况下代表到达目标地址所需要经过的跃点数量，一个跃点代表经过一个路由器。跃点数越低，代表路由成本越低；跃点数越高，代表路由成本越高。当具有多条到达相同目的网络的路由项时，TCP/IP会选择具有更低跃点数的路由项。\n\n\n\n```\n#route add 添加路由\n#使用route 命令添加的路由，机器重启或者网卡重启后路由就失效了\nroute add -net 192.168.88.88 netmask 255.255.255.255 gw 192.168.79.102\n\n#删除一条路由,删除的时候不用写网关\nroute del -net 192.168.79.0 netmask 255.255.255.0\n```\n\n#### 路由确定过程\n当TCP/IP需要向某个IP地址发起通信时，它会对路由表进行评估，以确定如何发送数据包。评估过程如下：\n(1) TCP/IP使用需要通信的目的IP地址和路由表中每一个路由项的网络掩码进行相与计算，如果相与后的结果匹配对应路由项的网络地址，则记录下此路由项。\n(2) 当计算完路由表中所有的路由项后，\n    (a) TCP/IP选择记录下的路由项中的最长匹配路由（网络掩码中具有最多“1”位的路由项）来和此目的IP地址进行通信。\n    (b) 如果存在多个最长匹配路由，那么选择具有最低跃点数的路由项。\n    (c) 如果存在多个具有最低跃点数的最长匹配路由，那么：均根据最长匹配路由所对应的网络接口在网络连接的高级设置中的绑定优先级来决定(一般有线(eth0) > 无线 (wlan0) > 移动信号(4G))。\n    (d) 如果优先级一致，则选择最开始找到的最长匹配路由。\n\n\n ### 链路层数据包的封装\n传输层及其以下的机制由内核提供，应用层由用户进程提供，数据在传输之前，必须要进行封装。链路层也可以叫做以太网帧格式。\n \n ```\n arp -a\n ? (192.168.79.1) at 00:50:56:c0:00:08 [ether] on eth1\n ? (192.168.79.2) at 00:50:56:ec:ef:30 [ether] on eth1\n ```\nARP：解释局域网内的IP地址到网卡硬件地址的映射。\n通过ARP数据报表，来返回下一个路由器的MAC地址，封装数据。每到一个路由器，确认MAC地址并修改下一跳的MAC地址，再重新打包，再继续传。\n\n\n\n\n\n","source":"_posts/2020-03-01-tcpip.md","raw":"---\ntitle: 高并发 - 网络协议原理\ndate: 2020-03-01 16:53:16\ntoc: true\ncategories:\n- 技术笔记\ntags:\n- 高并发\n---\n\n### 计算机网络体系结构分层\n<table style=\"border: solid;\">\n    <tr style=\"text-align:center\">\n        <td>OSI 七层模型</td> \n        <td>TCP/IP 概念层模型</td> \n        <td>功能</td>\n        <td>TCP/IP 协议</td>\n   </tr>\n    <tr>\n        <td>应用层</td>\n        <td rowspan=\"3\">应用层</td>\n        <td>文件传输，电子邮件，文件服务 ，虚拟终端</td>\n        <td>TFTP,HTTP,SMTP,FTP,SNTP,DNS,Telnet</td>\n    </tr>\n    <tr>\n        <td>表示层</td>\n        <td>数据格式化，代码转换，数据加密</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>会话层</td>\n        <td>解除或建立与的接点的联系</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>传输层</td>\n        <td>传输层</td>\n        <td>提供端对端的接口</td>\n        <td>TCP,UDP</td>\n    </tr>\n    <tr>\n        <td>网络层</td>\n        <td>网络层</td>\n        <td>为数据包选择路由</td>\n        <td>IP,ICMP,RIP,OSPF,BCP,ICMP</td>\n    </tr>\n    <tr>\n        <td>数据链路层</td>\n        <td rowspan=\"2\">链路层</td>\n        <td>传输有地址的帧以及错误检测功能</td>\n        <td>SLIP,CSLIP,PPP,ARP,RARP,MTU</td>\n    </tr>\n    <tr>\n        <td>物理层</td>\n        <td>以二进制数据型式在物理媒体上传数数据</td>\n        <td>ISO2110,IEEE802,IEEE802.2</td>\n    </tr>\n</table>\n<!--more-->\n### 应用层协议演示\n* 建立连接\n```\n    cd /proc/$$/fd\n    exec 8<> /dev/tcp/www.baidu.com/80\n```\n$$当前进程ID<br>\nfd:文件描述符<br>\n执行完后再执行ll 可以查看到多了一个socket连接\n\n* 传送数据（http协议：规范标准）\n```\necho -e 'GET / HTTP/1.0\\n' >&8\n```\nGET / HTTP/1.0：HTTP 协议规定的 Request 请求头最小的写法  \nGET: 请求方法  \n/: URL请求资源  \nHTTP/1.0： HTTP 协议版本  \n-e 识别\\n换行符  \necho 打印Request信息重定向到文件描述符8 Socket里，Socket会发送到百度\n* 查看结果\n```\ncat <& 8\n```\n\n### 传输控制层 TCP三次握手四次挥手\n* 三次握手  \n在socket通过TCP协议进行数据连接时，客户端在连接上服务端后会有一个三次握手的过程  \n  + 客户端：我可以和你传输数据吗  \n  + 服务端：可以  \n  + 客户端：好的我来了  \n* 四次挥手  \n在socket端开连接时，会有一个四次挥手的过程  \n  + 我要断开连接了  \n  + 好的，我先处理完手中的任务  \n  + 好的，我等你  \n  + 断开吧  \n* 三次握手>数据传输>四次分手 成为一个最小粒度,不可被分割\n\n* 查看当前所有Socket连接信息：netstat -natp\nn: 显示ip地址，不要用逻辑名称  \na: 所有  \nt: 查看当前所有的socket链接  \np: PID，显示通信是哪个进程的ID号  \n\n###  网络层下一跳寻址  \ncat /etc/sysconfig/network-scripts/ifcfg-eth1\nIPADDR=192.168.79.101  \nGATEWAY=192.168.79.2  \nNETMASK=255.255.255.0  \nIP地址，点分字节，通信每一个点的标识符，IP是端点间，MAC地址是节点间的\n\nTCP/IP协议：基于下一跳的机制, 每一台互联网设备的内存中，不需要存储全网数据，只需要存周边一步之内的数据\nIP地址与掩码发生二进制的按位与计算:  192.168.79.101 & 255.255.255.0  \n得出这台机器的网络号是：192.168.79.0； 当前机器是这个网络中的第101号。\n\n#### 查看路由表\n路由表：存储了本地计算机可以到达的网络目的地址范围和如何到达的路由信息。路由表是TCP/IP通信的基础，本地计算机上的任何TCP/IP通信都受到路由表的控制。\n\n```\nroute -n\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n192.168.79.0    0.0.0.0         255.255.255.0   U     1      0        0 eth1\n0.0.0.0         192.168.79.2    0.0.0.0         UG    0      0        0 eth1\n```\n* U 表示该路由可以使用。\n* G 该路由是到一个网关（路由器）\n\n1） 网络地址（Network Destination）、网络掩码（Netmask）  \n网络地址和网络掩码相与的结果用于定义本地计算机可以到达的目的网络地址范围。\n\n2） 网关（Gateway，又称为下一跳服务器）\n在发送IP数据包时，网关定义了针对特定的网络目的地址，数据包发送到的下一跳服务器。如果是本地计算机直接连接到的网络，网关通常是0.0.0.0。如果是远程网络或默认路由，网关通常是本地计算机所连接到的网络上的某个服务器或路由器。\n\n3） 接口（Interface）\n接口定义了针对特定的网络目的地址，本地计算机用于发送数据包的网络接口。\n\n(4) 跃点数（Metric）\n跃点数用于指出路由的成本，通常情况下代表到达目标地址所需要经过的跃点数量，一个跃点代表经过一个路由器。跃点数越低，代表路由成本越低；跃点数越高，代表路由成本越高。当具有多条到达相同目的网络的路由项时，TCP/IP会选择具有更低跃点数的路由项。\n\n\n\n```\n#route add 添加路由\n#使用route 命令添加的路由，机器重启或者网卡重启后路由就失效了\nroute add -net 192.168.88.88 netmask 255.255.255.255 gw 192.168.79.102\n\n#删除一条路由,删除的时候不用写网关\nroute del -net 192.168.79.0 netmask 255.255.255.0\n```\n\n#### 路由确定过程\n当TCP/IP需要向某个IP地址发起通信时，它会对路由表进行评估，以确定如何发送数据包。评估过程如下：\n(1) TCP/IP使用需要通信的目的IP地址和路由表中每一个路由项的网络掩码进行相与计算，如果相与后的结果匹配对应路由项的网络地址，则记录下此路由项。\n(2) 当计算完路由表中所有的路由项后，\n    (a) TCP/IP选择记录下的路由项中的最长匹配路由（网络掩码中具有最多“1”位的路由项）来和此目的IP地址进行通信。\n    (b) 如果存在多个最长匹配路由，那么选择具有最低跃点数的路由项。\n    (c) 如果存在多个具有最低跃点数的最长匹配路由，那么：均根据最长匹配路由所对应的网络接口在网络连接的高级设置中的绑定优先级来决定(一般有线(eth0) > 无线 (wlan0) > 移动信号(4G))。\n    (d) 如果优先级一致，则选择最开始找到的最长匹配路由。\n\n\n ### 链路层数据包的封装\n传输层及其以下的机制由内核提供，应用层由用户进程提供，数据在传输之前，必须要进行封装。链路层也可以叫做以太网帧格式。\n \n ```\n arp -a\n ? (192.168.79.1) at 00:50:56:c0:00:08 [ether] on eth1\n ? (192.168.79.2) at 00:50:56:ec:ef:30 [ether] on eth1\n ```\nARP：解释局域网内的IP地址到网卡硬件地址的映射。\n通过ARP数据报表，来返回下一个路由器的MAC地址，封装数据。每到一个路由器，确认MAC地址并修改下一跳的MAC地址，再重新打包，再继续传。\n\n\n\n\n\n","slug":"tcpip","published":1,"updated":"2020-03-02T23:43:54.051Z","_id":"ck78tfjrj0000shc957fibxls","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"计算机网络体系结构分层\"><a href=\"#计算机网络体系结构分层\" class=\"headerlink\" title=\"计算机网络体系结构分层\"></a>计算机网络体系结构分层</h3><table style=\"border: solid;\">\n    <tr style=\"text-align:center\">\n        <td>OSI 七层模型</td> \n        <td>TCP/IP 概念层模型</td> \n        <td>功能</td>\n        <td>TCP/IP 协议</td>\n   </tr>\n    <tr>\n        <td>应用层</td>\n        <td rowspan=\"3\">应用层</td>\n        <td>文件传输，电子邮件，文件服务 ，虚拟终端</td>\n        <td>TFTP,HTTP,SMTP,FTP,SNTP,DNS,Telnet</td>\n    </tr>\n    <tr>\n        <td>表示层</td>\n        <td>数据格式化，代码转换，数据加密</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>会话层</td>\n        <td>解除或建立与的接点的联系</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>传输层</td>\n        <td>传输层</td>\n        <td>提供端对端的接口</td>\n        <td>TCP,UDP</td>\n    </tr>\n    <tr>\n        <td>网络层</td>\n        <td>网络层</td>\n        <td>为数据包选择路由</td>\n        <td>IP,ICMP,RIP,OSPF,BCP,ICMP</td>\n    </tr>\n    <tr>\n        <td>数据链路层</td>\n        <td rowspan=\"2\">链路层</td>\n        <td>传输有地址的帧以及错误检测功能</td>\n        <td>SLIP,CSLIP,PPP,ARP,RARP,MTU</td>\n    </tr>\n    <tr>\n        <td>物理层</td>\n        <td>以二进制数据型式在物理媒体上传数数据</td>\n        <td>ISO2110,IEEE802,IEEE802.2</td>\n    </tr>\n</table>\n<a id=\"more\"></a>\n### 应用层协议演示\n* 建立连接\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;proc&#x2F;$$&#x2F;fd</span><br><span class=\"line\">exec 8&lt;&gt; &#x2F;dev&#x2F;tcp&#x2F;www.baidu.com&#x2F;80</span><br></pre></td></tr></table></figure>\n$$当前进程ID<br>\nfd:文件描述符<br>\n执行完后再执行ll 可以查看到多了一个socket连接\n\n<ul>\n<li>传送数据（http协议：规范标准）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &#39;GET &#x2F; HTTP&#x2F;1.0\\n&#39; &gt;&amp;8</span><br></pre></td></tr></table></figure>\nGET / HTTP/1.0：HTTP 协议规定的 Request 请求头最小的写法<br>GET: 请求方法<br>/: URL请求资源<br>HTTP/1.0： HTTP 协议版本  </li>\n</ul>\n<p>-e 识别\\n换行符<br>echo 打印Request信息重定向到文件描述符8 Socket里，Socket会发送到百度</p>\n<ul>\n<li>查看结果<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&amp; 8</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"传输控制层-TCP三次握手四次挥手\"><a href=\"#传输控制层-TCP三次握手四次挥手\" class=\"headerlink\" title=\"传输控制层 TCP三次握手四次挥手\"></a>传输控制层 TCP三次握手四次挥手</h3><ul>\n<li><p>三次握手<br>在socket通过TCP协议进行数据连接时，客户端在连接上服务端后会有一个三次握手的过程  </p>\n<ul>\n<li>客户端：我可以和你传输数据吗  </li>\n<li>服务端：可以  </li>\n<li>客户端：好的我来了  </li>\n</ul>\n</li>\n<li><p>四次挥手<br>在socket端开连接时，会有一个四次挥手的过程  </p>\n<ul>\n<li>我要断开连接了  </li>\n<li>好的，我先处理完手中的任务  </li>\n<li>好的，我等你  </li>\n<li>断开吧  </li>\n</ul>\n</li>\n<li><p>三次握手&gt;数据传输&gt;四次分手 成为一个最小粒度,不可被分割</p>\n</li>\n<li><p>查看当前所有Socket连接信息：netstat -natp<br>n: 显示ip地址，不要用逻辑名称<br>a: 所有<br>t: 查看当前所有的socket链接<br>p: PID，显示通信是哪个进程的ID号  </p>\n</li>\n</ul>\n<h3 id=\"网络层下一跳寻址\"><a href=\"#网络层下一跳寻址\" class=\"headerlink\" title=\"网络层下一跳寻址\"></a>网络层下一跳寻址</h3><p>cat /etc/sysconfig/network-scripts/ifcfg-eth1<br>IPADDR=192.168.79.101<br>GATEWAY=192.168.79.2<br>NETMASK=255.255.255.0<br>IP地址，点分字节，通信每一个点的标识符，IP是端点间，MAC地址是节点间的</p>\n<p>TCP/IP协议：基于下一跳的机制, 每一台互联网设备的内存中，不需要存储全网数据，只需要存周边一步之内的数据<br>IP地址与掩码发生二进制的按位与计算:  192.168.79.101 &amp; 255.255.255.0<br>得出这台机器的网络号是：192.168.79.0； 当前机器是这个网络中的第101号。</p>\n<h4 id=\"查看路由表\"><a href=\"#查看路由表\" class=\"headerlink\" title=\"查看路由表\"></a>查看路由表</h4><p>路由表：存储了本地计算机可以到达的网络目的地址范围和如何到达的路由信息。路由表是TCP/IP通信的基础，本地计算机上的任何TCP/IP通信都受到路由表的控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route -n</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">192.168.79.0    0.0.0.0         255.255.255.0   U     1      0        0 eth1</span><br><span class=\"line\">0.0.0.0         192.168.79.2    0.0.0.0         UG    0      0        0 eth1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>U 表示该路由可以使用。</li>\n<li>G 该路由是到一个网关（路由器）</li>\n</ul>\n<p>1） 网络地址（Network Destination）、网络掩码（Netmask）<br>网络地址和网络掩码相与的结果用于定义本地计算机可以到达的目的网络地址范围。</p>\n<p>2） 网关（Gateway，又称为下一跳服务器）<br>在发送IP数据包时，网关定义了针对特定的网络目的地址，数据包发送到的下一跳服务器。如果是本地计算机直接连接到的网络，网关通常是0.0.0.0。如果是远程网络或默认路由，网关通常是本地计算机所连接到的网络上的某个服务器或路由器。</p>\n<p>3） 接口（Interface）<br>接口定义了针对特定的网络目的地址，本地计算机用于发送数据包的网络接口。</p>\n<p>(4) 跃点数（Metric）<br>跃点数用于指出路由的成本，通常情况下代表到达目标地址所需要经过的跃点数量，一个跃点代表经过一个路由器。跃点数越低，代表路由成本越低；跃点数越高，代表路由成本越高。当具有多条到达相同目的网络的路由项时，TCP/IP会选择具有更低跃点数的路由项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#route add 添加路由</span><br><span class=\"line\">#使用route 命令添加的路由，机器重启或者网卡重启后路由就失效了</span><br><span class=\"line\">route add -net 192.168.88.88 netmask 255.255.255.255 gw 192.168.79.102</span><br><span class=\"line\"></span><br><span class=\"line\">#删除一条路由,删除的时候不用写网关</span><br><span class=\"line\">route del -net 192.168.79.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由确定过程\"><a href=\"#路由确定过程\" class=\"headerlink\" title=\"路由确定过程\"></a>路由确定过程</h4><p>当TCP/IP需要向某个IP地址发起通信时，它会对路由表进行评估，以确定如何发送数据包。评估过程如下：<br>(1) TCP/IP使用需要通信的目的IP地址和路由表中每一个路由项的网络掩码进行相与计算，如果相与后的结果匹配对应路由项的网络地址，则记录下此路由项。<br>(2) 当计算完路由表中所有的路由项后，<br>    (a) TCP/IP选择记录下的路由项中的最长匹配路由（网络掩码中具有最多“1”位的路由项）来和此目的IP地址进行通信。<br>    (b) 如果存在多个最长匹配路由，那么选择具有最低跃点数的路由项。<br>    (c) 如果存在多个具有最低跃点数的最长匹配路由，那么：均根据最长匹配路由所对应的网络接口在网络连接的高级设置中的绑定优先级来决定(一般有线(eth0) &gt; 无线 (wlan0) &gt; 移动信号(4G))。<br>    (d) 如果优先级一致，则选择最开始找到的最长匹配路由。</p>\n<h3 id=\"链路层数据包的封装\"><a href=\"#链路层数据包的封装\" class=\"headerlink\" title=\"链路层数据包的封装\"></a>链路层数据包的封装</h3><p>传输层及其以下的机制由内核提供，应用层由用户进程提供，数据在传输之前，必须要进行封装。链路层也可以叫做以太网帧格式。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arp -a</span><br><span class=\"line\">? (192.168.79.1) at 00:50:56:c0:00:08 [ether] on eth1</span><br><span class=\"line\">? (192.168.79.2) at 00:50:56:ec:ef:30 [ether] on eth1</span><br></pre></td></tr></table></figure>\n<p>ARP：解释局域网内的IP地址到网卡硬件地址的映射。<br>通过ARP数据报表，来返回下一个路由器的MAC地址，封装数据。每到一个路由器，确认MAC地址并修改下一跳的MAC地址，再重新打包，再继续传。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"计算机网络体系结构分层\"><a href=\"#计算机网络体系结构分层\" class=\"headerlink\" title=\"计算机网络体系结构分层\"></a>计算机网络体系结构分层</h3><table style=\"border: solid;\">\n    <tr style=\"text-align:center\">\n        <td>OSI 七层模型</td> \n        <td>TCP/IP 概念层模型</td> \n        <td>功能</td>\n        <td>TCP/IP 协议</td>\n   </tr>\n    <tr>\n        <td>应用层</td>\n        <td rowspan=\"3\">应用层</td>\n        <td>文件传输，电子邮件，文件服务 ，虚拟终端</td>\n        <td>TFTP,HTTP,SMTP,FTP,SNTP,DNS,Telnet</td>\n    </tr>\n    <tr>\n        <td>表示层</td>\n        <td>数据格式化，代码转换，数据加密</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>会话层</td>\n        <td>解除或建立与的接点的联系</td>\n        <td>没有协议</td>\n    </tr>\n    <tr>\n        <td>传输层</td>\n        <td>传输层</td>\n        <td>提供端对端的接口</td>\n        <td>TCP,UDP</td>\n    </tr>\n    <tr>\n        <td>网络层</td>\n        <td>网络层</td>\n        <td>为数据包选择路由</td>\n        <td>IP,ICMP,RIP,OSPF,BCP,ICMP</td>\n    </tr>\n    <tr>\n        <td>数据链路层</td>\n        <td rowspan=\"2\">链路层</td>\n        <td>传输有地址的帧以及错误检测功能</td>\n        <td>SLIP,CSLIP,PPP,ARP,RARP,MTU</td>\n    </tr>\n    <tr>\n        <td>物理层</td>\n        <td>以二进制数据型式在物理媒体上传数数据</td>\n        <td>ISO2110,IEEE802,IEEE802.2</td>\n    </tr>\n</table>","more":"### 应用层协议演示\n* 建立连接\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;proc&#x2F;$$&#x2F;fd</span><br><span class=\"line\">exec 8&lt;&gt; &#x2F;dev&#x2F;tcp&#x2F;www.baidu.com&#x2F;80</span><br></pre></td></tr></table></figure>\n$$当前进程ID<br>\nfd:文件描述符<br>\n执行完后再执行ll 可以查看到多了一个socket连接\n\n<ul>\n<li>传送数据（http协议：规范标准）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &#39;GET &#x2F; HTTP&#x2F;1.0\\n&#39; &gt;&amp;8</span><br></pre></td></tr></table></figure>\nGET / HTTP/1.0：HTTP 协议规定的 Request 请求头最小的写法<br>GET: 请求方法<br>/: URL请求资源<br>HTTP/1.0： HTTP 协议版本  </li>\n</ul>\n<p>-e 识别\\n换行符<br>echo 打印Request信息重定向到文件描述符8 Socket里，Socket会发送到百度</p>\n<ul>\n<li>查看结果<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&amp; 8</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"传输控制层-TCP三次握手四次挥手\"><a href=\"#传输控制层-TCP三次握手四次挥手\" class=\"headerlink\" title=\"传输控制层 TCP三次握手四次挥手\"></a>传输控制层 TCP三次握手四次挥手</h3><ul>\n<li><p>三次握手<br>在socket通过TCP协议进行数据连接时，客户端在连接上服务端后会有一个三次握手的过程  </p>\n<ul>\n<li>客户端：我可以和你传输数据吗  </li>\n<li>服务端：可以  </li>\n<li>客户端：好的我来了  </li>\n</ul>\n</li>\n<li><p>四次挥手<br>在socket端开连接时，会有一个四次挥手的过程  </p>\n<ul>\n<li>我要断开连接了  </li>\n<li>好的，我先处理完手中的任务  </li>\n<li>好的，我等你  </li>\n<li>断开吧  </li>\n</ul>\n</li>\n<li><p>三次握手&gt;数据传输&gt;四次分手 成为一个最小粒度,不可被分割</p>\n</li>\n<li><p>查看当前所有Socket连接信息：netstat -natp<br>n: 显示ip地址，不要用逻辑名称<br>a: 所有<br>t: 查看当前所有的socket链接<br>p: PID，显示通信是哪个进程的ID号  </p>\n</li>\n</ul>\n<h3 id=\"网络层下一跳寻址\"><a href=\"#网络层下一跳寻址\" class=\"headerlink\" title=\"网络层下一跳寻址\"></a>网络层下一跳寻址</h3><p>cat /etc/sysconfig/network-scripts/ifcfg-eth1<br>IPADDR=192.168.79.101<br>GATEWAY=192.168.79.2<br>NETMASK=255.255.255.0<br>IP地址，点分字节，通信每一个点的标识符，IP是端点间，MAC地址是节点间的</p>\n<p>TCP/IP协议：基于下一跳的机制, 每一台互联网设备的内存中，不需要存储全网数据，只需要存周边一步之内的数据<br>IP地址与掩码发生二进制的按位与计算:  192.168.79.101 &amp; 255.255.255.0<br>得出这台机器的网络号是：192.168.79.0； 当前机器是这个网络中的第101号。</p>\n<h4 id=\"查看路由表\"><a href=\"#查看路由表\" class=\"headerlink\" title=\"查看路由表\"></a>查看路由表</h4><p>路由表：存储了本地计算机可以到达的网络目的地址范围和如何到达的路由信息。路由表是TCP/IP通信的基础，本地计算机上的任何TCP/IP通信都受到路由表的控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route -n</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">192.168.79.0    0.0.0.0         255.255.255.0   U     1      0        0 eth1</span><br><span class=\"line\">0.0.0.0         192.168.79.2    0.0.0.0         UG    0      0        0 eth1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>U 表示该路由可以使用。</li>\n<li>G 该路由是到一个网关（路由器）</li>\n</ul>\n<p>1） 网络地址（Network Destination）、网络掩码（Netmask）<br>网络地址和网络掩码相与的结果用于定义本地计算机可以到达的目的网络地址范围。</p>\n<p>2） 网关（Gateway，又称为下一跳服务器）<br>在发送IP数据包时，网关定义了针对特定的网络目的地址，数据包发送到的下一跳服务器。如果是本地计算机直接连接到的网络，网关通常是0.0.0.0。如果是远程网络或默认路由，网关通常是本地计算机所连接到的网络上的某个服务器或路由器。</p>\n<p>3） 接口（Interface）<br>接口定义了针对特定的网络目的地址，本地计算机用于发送数据包的网络接口。</p>\n<p>(4) 跃点数（Metric）<br>跃点数用于指出路由的成本，通常情况下代表到达目标地址所需要经过的跃点数量，一个跃点代表经过一个路由器。跃点数越低，代表路由成本越低；跃点数越高，代表路由成本越高。当具有多条到达相同目的网络的路由项时，TCP/IP会选择具有更低跃点数的路由项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#route add 添加路由</span><br><span class=\"line\">#使用route 命令添加的路由，机器重启或者网卡重启后路由就失效了</span><br><span class=\"line\">route add -net 192.168.88.88 netmask 255.255.255.255 gw 192.168.79.102</span><br><span class=\"line\"></span><br><span class=\"line\">#删除一条路由,删除的时候不用写网关</span><br><span class=\"line\">route del -net 192.168.79.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由确定过程\"><a href=\"#路由确定过程\" class=\"headerlink\" title=\"路由确定过程\"></a>路由确定过程</h4><p>当TCP/IP需要向某个IP地址发起通信时，它会对路由表进行评估，以确定如何发送数据包。评估过程如下：<br>(1) TCP/IP使用需要通信的目的IP地址和路由表中每一个路由项的网络掩码进行相与计算，如果相与后的结果匹配对应路由项的网络地址，则记录下此路由项。<br>(2) 当计算完路由表中所有的路由项后，<br>    (a) TCP/IP选择记录下的路由项中的最长匹配路由（网络掩码中具有最多“1”位的路由项）来和此目的IP地址进行通信。<br>    (b) 如果存在多个最长匹配路由，那么选择具有最低跃点数的路由项。<br>    (c) 如果存在多个具有最低跃点数的最长匹配路由，那么：均根据最长匹配路由所对应的网络接口在网络连接的高级设置中的绑定优先级来决定(一般有线(eth0) &gt; 无线 (wlan0) &gt; 移动信号(4G))。<br>    (d) 如果优先级一致，则选择最开始找到的最长匹配路由。</p>\n<h3 id=\"链路层数据包的封装\"><a href=\"#链路层数据包的封装\" class=\"headerlink\" title=\"链路层数据包的封装\"></a>链路层数据包的封装</h3><p>传输层及其以下的机制由内核提供，应用层由用户进程提供，数据在传输之前，必须要进行封装。链路层也可以叫做以太网帧格式。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arp -a</span><br><span class=\"line\">? (192.168.79.1) at 00:50:56:c0:00:08 [ether] on eth1</span><br><span class=\"line\">? (192.168.79.2) at 00:50:56:ec:ef:30 [ether] on eth1</span><br></pre></td></tr></table></figure>\n<p>ARP：解释局域网内的IP地址到网卡硬件地址的映射。<br>通过ARP数据报表，来返回下一个路由器的MAC地址，封装数据。每到一个路由器，确认MAC地址并修改下一跳的MAC地址，再重新打包，再继续传。</p>"},{"title":"高并发 - LVS的DR模型","date":"2020-03-01T08:53:16.000Z","toc":true,"_content":"\n### 理论基础\n网卡上有IP和MAC地址，网卡一加电就会将自己公布出去，别的机器只能知道IP地址逻辑的会走ARP协议请求MAC地址。  \nLinux系统下 /proc 是虚拟目录，开机之后才会有的目录，里面放的内核及所有启动的进程，把里面的变量及参数抽象成文件，\n修改文件的值相当于改了内核变量参数的值，目录中的文件的参数值一变，内核立即发生效果。  \n这些文件修改的时候不能用vi 命令去打开修改。因为会产生隐藏临时文件，只能echo 重定向去覆盖。\n\nlo 回环接口，是内核上的虚拟网卡，虚拟网络接口，并非真实存在，并不真实地从外界接收和发送数据包，而是在系统内部接收和发送数据包，因此虚拟网络接口不需要驱动程序。lo回环地址\n\neth0 以太网接口，以太网接口与网卡对应，每个硬件网卡(一个MAC)对应一个以太网接口，其工作完全由网卡相应的驱动程序控制。  \n如果物理网卡只有一个，而却有eth1，eth2等，则可能存在无线网卡或多个虚拟网卡，虚拟网卡由系统创建或通过应用层程序创建，作用与物理网卡类似。\n<!--more-->\n#### 关闭arp解析，隐藏VIP方法\n/proc/sys/net/ipv4/conf/eth0 目录下有arp_ignore & arp_announce 两个文件，默认设置都为0  \n* arp_ingore: 定义接收到ARP请求时的响应级别  \n    0: 只要本地配置的有相应地址，就给予响应；  \n    1: 只有请求的目标（MAC）地址配置请求到达的接口上的时候，才给予响应；\n* arp_announce: 定义将自己地址向外通告时的通告级别  \n    0: 将本地任何地址的任何接口向外通告；  \n    1: 试图只向目标网络参与其网络匹配的地址；  \n    2: 仅向与本地接口上地址匹配的网络进行通知；\n\n\n1)修改内核：\n```\necho 1  >  /proc/sys/net/ipv4/conf/eth0/arp_ignore \necho 1  >  /proc/sys/net/ipv4/conf/all/arp_ignore \necho 2 > /proc/sys/net/ipv4/conf/eth0/arp_announce \necho 2 > /proc/sys/net/ipv4/conf/all/arp_announce \n```\n2）设置隐藏的vip：\n```\nifconfig  lo:3  192.168.79.110  netmask 255.255.255.255\n```\n\n### LVS服务配置\n* 安装lvs的管理工具ipvsadm\n```\nyum install ipvsadm -y\n```\n\n#### 添加虚拟IP\n添加虚拟IP规则，管理集群服务  \nipvsadm -A -t 192.168.79.110:80 -s rr\n\n> -A：添加虚拟IP规则\n> -A -t|u|f service-address [-s scheduler]\n> -t: TCP协议的集群 \n> -u: UDP协议的集群\n> service-address:     IP:PORT\n> -f: FWM: 防火墙标记 \n> service-address: Mark Number\n> 修改：-E\n> 删除：-D -t|u|f service-address\n> scheduler 调度方法，one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq, the default scheduler is wlc.\n\n#### 添加服务\n在虚拟IP中添加服务规则，管理集群服务中的RS  \nipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.102 -g -w 1  \nipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.103 -g -w 1  \n\n> -a： 添加服务规则\n> -t|u|f service-address -r server-address [-g|i|m] [-w weight]\n> -t|u|f service-address：事先定义好的某集群服务\n> -r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；\n> [-g|i|m]: LVS类型 \n> -g: DR\n> -i: TUN\n> -m: NAT\n> [-w weight]: 定义服务器权重\n> 修改：-e\n> 删除：-d -t|u|f service-address -r server-address\n\n\n#### 查看\n> -L|l\n> -n: 数字格式显示主机地址和端口\n> --stats：统计数据\n> --rate: 速率\n> --timeout: 显示tcp、tcpfin和udp的会话超时时长\n> -:c 显示当前的ipvs连接状况\n> ipvsadm -lnc  偷窥负载记录\n\n#### 删除所有集群服务\n> -C：清空ipvs规则\n\n#### 保存规则\n> -S:保存规则\n> ipvsadm -S > /path/to/somefile\n\n#### 载入规则\n> -R 载入此前的规则：\n> ipvsadm -R < /path/form/somefile \n\n\n#### 调度方法： \nrr: 轮询调度\nwrr: 加权轮询调度\nsh: 源地址散列调度U\nlc: 最小连接调度\nwlc: 加权最小连接调度 (默认)\nsed: 最短期望延迟\nnq: 最少队列调度\nlblc: 基于本地的最少连接\ndh: 目标地址散列调度\nlblcr: 基于本地的带复制功能的最少连接\n","source":"_posts/2020-03-01-lvs.md","raw":"---\ntitle: 高并发 - LVS的DR模型\ndate: 2020-03-01 16:53:16\ntoc: true\ncategories:\n- 技术笔记\ntags:\n- 高并发\n- LVS\n---\n\n### 理论基础\n网卡上有IP和MAC地址，网卡一加电就会将自己公布出去，别的机器只能知道IP地址逻辑的会走ARP协议请求MAC地址。  \nLinux系统下 /proc 是虚拟目录，开机之后才会有的目录，里面放的内核及所有启动的进程，把里面的变量及参数抽象成文件，\n修改文件的值相当于改了内核变量参数的值，目录中的文件的参数值一变，内核立即发生效果。  \n这些文件修改的时候不能用vi 命令去打开修改。因为会产生隐藏临时文件，只能echo 重定向去覆盖。\n\nlo 回环接口，是内核上的虚拟网卡，虚拟网络接口，并非真实存在，并不真实地从外界接收和发送数据包，而是在系统内部接收和发送数据包，因此虚拟网络接口不需要驱动程序。lo回环地址\n\neth0 以太网接口，以太网接口与网卡对应，每个硬件网卡(一个MAC)对应一个以太网接口，其工作完全由网卡相应的驱动程序控制。  \n如果物理网卡只有一个，而却有eth1，eth2等，则可能存在无线网卡或多个虚拟网卡，虚拟网卡由系统创建或通过应用层程序创建，作用与物理网卡类似。\n<!--more-->\n#### 关闭arp解析，隐藏VIP方法\n/proc/sys/net/ipv4/conf/eth0 目录下有arp_ignore & arp_announce 两个文件，默认设置都为0  \n* arp_ingore: 定义接收到ARP请求时的响应级别  \n    0: 只要本地配置的有相应地址，就给予响应；  \n    1: 只有请求的目标（MAC）地址配置请求到达的接口上的时候，才给予响应；\n* arp_announce: 定义将自己地址向外通告时的通告级别  \n    0: 将本地任何地址的任何接口向外通告；  \n    1: 试图只向目标网络参与其网络匹配的地址；  \n    2: 仅向与本地接口上地址匹配的网络进行通知；\n\n\n1)修改内核：\n```\necho 1  >  /proc/sys/net/ipv4/conf/eth0/arp_ignore \necho 1  >  /proc/sys/net/ipv4/conf/all/arp_ignore \necho 2 > /proc/sys/net/ipv4/conf/eth0/arp_announce \necho 2 > /proc/sys/net/ipv4/conf/all/arp_announce \n```\n2）设置隐藏的vip：\n```\nifconfig  lo:3  192.168.79.110  netmask 255.255.255.255\n```\n\n### LVS服务配置\n* 安装lvs的管理工具ipvsadm\n```\nyum install ipvsadm -y\n```\n\n#### 添加虚拟IP\n添加虚拟IP规则，管理集群服务  \nipvsadm -A -t 192.168.79.110:80 -s rr\n\n> -A：添加虚拟IP规则\n> -A -t|u|f service-address [-s scheduler]\n> -t: TCP协议的集群 \n> -u: UDP协议的集群\n> service-address:     IP:PORT\n> -f: FWM: 防火墙标记 \n> service-address: Mark Number\n> 修改：-E\n> 删除：-D -t|u|f service-address\n> scheduler 调度方法，one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq, the default scheduler is wlc.\n\n#### 添加服务\n在虚拟IP中添加服务规则，管理集群服务中的RS  \nipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.102 -g -w 1  \nipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.103 -g -w 1  \n\n> -a： 添加服务规则\n> -t|u|f service-address -r server-address [-g|i|m] [-w weight]\n> -t|u|f service-address：事先定义好的某集群服务\n> -r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；\n> [-g|i|m]: LVS类型 \n> -g: DR\n> -i: TUN\n> -m: NAT\n> [-w weight]: 定义服务器权重\n> 修改：-e\n> 删除：-d -t|u|f service-address -r server-address\n\n\n#### 查看\n> -L|l\n> -n: 数字格式显示主机地址和端口\n> --stats：统计数据\n> --rate: 速率\n> --timeout: 显示tcp、tcpfin和udp的会话超时时长\n> -:c 显示当前的ipvs连接状况\n> ipvsadm -lnc  偷窥负载记录\n\n#### 删除所有集群服务\n> -C：清空ipvs规则\n\n#### 保存规则\n> -S:保存规则\n> ipvsadm -S > /path/to/somefile\n\n#### 载入规则\n> -R 载入此前的规则：\n> ipvsadm -R < /path/form/somefile \n\n\n#### 调度方法： \nrr: 轮询调度\nwrr: 加权轮询调度\nsh: 源地址散列调度U\nlc: 最小连接调度\nwlc: 加权最小连接调度 (默认)\nsed: 最短期望延迟\nnq: 最少队列调度\nlblc: 基于本地的最少连接\ndh: 目标地址散列调度\nlblcr: 基于本地的带复制功能的最少连接\n","slug":"lvs","published":1,"updated":"2020-03-02T23:45:57.068Z","_id":"ck78xuu3x0000tdc91q771phn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h3><p>网卡上有IP和MAC地址，网卡一加电就会将自己公布出去，别的机器只能知道IP地址逻辑的会走ARP协议请求MAC地址。<br>Linux系统下 /proc 是虚拟目录，开机之后才会有的目录，里面放的内核及所有启动的进程，把里面的变量及参数抽象成文件，<br>修改文件的值相当于改了内核变量参数的值，目录中的文件的参数值一变，内核立即发生效果。<br>这些文件修改的时候不能用vi 命令去打开修改。因为会产生隐藏临时文件，只能echo 重定向去覆盖。</p>\n<p>lo 回环接口，是内核上的虚拟网卡，虚拟网络接口，并非真实存在，并不真实地从外界接收和发送数据包，而是在系统内部接收和发送数据包，因此虚拟网络接口不需要驱动程序。lo回环地址</p>\n<p>eth0 以太网接口，以太网接口与网卡对应，每个硬件网卡(一个MAC)对应一个以太网接口，其工作完全由网卡相应的驱动程序控制。<br>如果物理网卡只有一个，而却有eth1，eth2等，则可能存在无线网卡或多个虚拟网卡，虚拟网卡由系统创建或通过应用层程序创建，作用与物理网卡类似。</p>\n<a id=\"more\"></a>\n<h4 id=\"关闭arp解析，隐藏VIP方法\"><a href=\"#关闭arp解析，隐藏VIP方法\" class=\"headerlink\" title=\"关闭arp解析，隐藏VIP方法\"></a>关闭arp解析，隐藏VIP方法</h4><p>/proc/sys/net/ipv4/conf/eth0 目录下有arp_ignore &amp; arp_announce 两个文件，默认设置都为0  </p>\n<ul>\n<li>arp_ingore: 定义接收到ARP请求时的响应级别<br>  0: 只要本地配置的有相应地址，就给予响应；<br>  1: 只有请求的目标（MAC）地址配置请求到达的接口上的时候，才给予响应；</li>\n<li>arp_announce: 定义将自己地址向外通告时的通告级别<br>  0: 将本地任何地址的任何接口向外通告；<br>  1: 试图只向目标网络参与其网络匹配的地址；<br>  2: 仅向与本地接口上地址匹配的网络进行通知；</li>\n</ul>\n<p>1)修改内核：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_ignore </span><br><span class=\"line\">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore </span><br><span class=\"line\">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_announce </span><br><span class=\"line\">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce</span><br></pre></td></tr></table></figure>\n<p>2）设置隐藏的vip：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig  lo:3  192.168.79.110  netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LVS服务配置\"><a href=\"#LVS服务配置\" class=\"headerlink\" title=\"LVS服务配置\"></a>LVS服务配置</h3><ul>\n<li>安装lvs的管理工具ipvsadm<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ipvsadm -y</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"添加虚拟IP\"><a href=\"#添加虚拟IP\" class=\"headerlink\" title=\"添加虚拟IP\"></a>添加虚拟IP</h4><p>添加虚拟IP规则，管理集群服务<br>ipvsadm -A -t 192.168.79.110:80 -s rr</p>\n<blockquote>\n<p>-A：添加虚拟IP规则<br>-A -t|u|f service-address [-s scheduler]<br>-t: TCP协议的集群<br>-u: UDP协议的集群<br>service-address:     IP:PORT<br>-f: FWM: 防火墙标记<br>service-address: Mark Number<br>修改：-E<br>删除：-D -t|u|f service-address<br>scheduler 调度方法，one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq, the default scheduler is wlc.</p>\n</blockquote>\n<h4 id=\"添加服务\"><a href=\"#添加服务\" class=\"headerlink\" title=\"添加服务\"></a>添加服务</h4><p>在虚拟IP中添加服务规则，管理集群服务中的RS<br>ipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.102 -g -w 1<br>ipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.103 -g -w 1  </p>\n<blockquote>\n<p>-a： 添加服务规则<br>-t|u|f service-address -r server-address [-g|i|m] [-w weight]<br>-t|u|f service-address：事先定义好的某集群服务<br>-r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；<br>[-g|i|m]: LVS类型<br>-g: DR<br>-i: TUN<br>-m: NAT<br>[-w weight]: 定义服务器权重<br>修改：-e<br>删除：-d -t|u|f service-address -r server-address</p>\n</blockquote>\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><blockquote>\n<p>-L|l<br>-n: 数字格式显示主机地址和端口<br>–stats：统计数据<br>–rate: 速率<br>–timeout: 显示tcp、tcpfin和udp的会话超时时长<br>-:c 显示当前的ipvs连接状况<br>ipvsadm -lnc  偷窥负载记录</p>\n</blockquote>\n<h4 id=\"删除所有集群服务\"><a href=\"#删除所有集群服务\" class=\"headerlink\" title=\"删除所有集群服务\"></a>删除所有集群服务</h4><blockquote>\n<p>-C：清空ipvs规则</p>\n</blockquote>\n<h4 id=\"保存规则\"><a href=\"#保存规则\" class=\"headerlink\" title=\"保存规则\"></a>保存规则</h4><blockquote>\n<p>-S:保存规则<br>ipvsadm -S &gt; /path/to/somefile</p>\n</blockquote>\n<h4 id=\"载入规则\"><a href=\"#载入规则\" class=\"headerlink\" title=\"载入规则\"></a>载入规则</h4><blockquote>\n<p>-R 载入此前的规则：<br>ipvsadm -R &lt; /path/form/somefile </p>\n</blockquote>\n<h4 id=\"调度方法：\"><a href=\"#调度方法：\" class=\"headerlink\" title=\"调度方法：\"></a>调度方法：</h4><p>rr: 轮询调度<br>wrr: 加权轮询调度<br>sh: 源地址散列调度U<br>lc: 最小连接调度<br>wlc: 加权最小连接调度 (默认)<br>sed: 最短期望延迟<br>nq: 最少队列调度<br>lblc: 基于本地的最少连接<br>dh: 目标地址散列调度<br>lblcr: 基于本地的带复制功能的最少连接</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h3><p>网卡上有IP和MAC地址，网卡一加电就会将自己公布出去，别的机器只能知道IP地址逻辑的会走ARP协议请求MAC地址。<br>Linux系统下 /proc 是虚拟目录，开机之后才会有的目录，里面放的内核及所有启动的进程，把里面的变量及参数抽象成文件，<br>修改文件的值相当于改了内核变量参数的值，目录中的文件的参数值一变，内核立即发生效果。<br>这些文件修改的时候不能用vi 命令去打开修改。因为会产生隐藏临时文件，只能echo 重定向去覆盖。</p>\n<p>lo 回环接口，是内核上的虚拟网卡，虚拟网络接口，并非真实存在，并不真实地从外界接收和发送数据包，而是在系统内部接收和发送数据包，因此虚拟网络接口不需要驱动程序。lo回环地址</p>\n<p>eth0 以太网接口，以太网接口与网卡对应，每个硬件网卡(一个MAC)对应一个以太网接口，其工作完全由网卡相应的驱动程序控制。<br>如果物理网卡只有一个，而却有eth1，eth2等，则可能存在无线网卡或多个虚拟网卡，虚拟网卡由系统创建或通过应用层程序创建，作用与物理网卡类似。</p>","more":"<h4 id=\"关闭arp解析，隐藏VIP方法\"><a href=\"#关闭arp解析，隐藏VIP方法\" class=\"headerlink\" title=\"关闭arp解析，隐藏VIP方法\"></a>关闭arp解析，隐藏VIP方法</h4><p>/proc/sys/net/ipv4/conf/eth0 目录下有arp_ignore &amp; arp_announce 两个文件，默认设置都为0  </p>\n<ul>\n<li>arp_ingore: 定义接收到ARP请求时的响应级别<br>  0: 只要本地配置的有相应地址，就给予响应；<br>  1: 只有请求的目标（MAC）地址配置请求到达的接口上的时候，才给予响应；</li>\n<li>arp_announce: 定义将自己地址向外通告时的通告级别<br>  0: 将本地任何地址的任何接口向外通告；<br>  1: 试图只向目标网络参与其网络匹配的地址；<br>  2: 仅向与本地接口上地址匹配的网络进行通知；</li>\n</ul>\n<p>1)修改内核：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_ignore </span><br><span class=\"line\">echo 1  &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore </span><br><span class=\"line\">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;eth0&#x2F;arp_announce </span><br><span class=\"line\">echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce</span><br></pre></td></tr></table></figure>\n<p>2）设置隐藏的vip：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig  lo:3  192.168.79.110  netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LVS服务配置\"><a href=\"#LVS服务配置\" class=\"headerlink\" title=\"LVS服务配置\"></a>LVS服务配置</h3><ul>\n<li>安装lvs的管理工具ipvsadm<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ipvsadm -y</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"添加虚拟IP\"><a href=\"#添加虚拟IP\" class=\"headerlink\" title=\"添加虚拟IP\"></a>添加虚拟IP</h4><p>添加虚拟IP规则，管理集群服务<br>ipvsadm -A -t 192.168.79.110:80 -s rr</p>\n<blockquote>\n<p>-A：添加虚拟IP规则<br>-A -t|u|f service-address [-s scheduler]<br>-t: TCP协议的集群<br>-u: UDP协议的集群<br>service-address:     IP:PORT<br>-f: FWM: 防火墙标记<br>service-address: Mark Number<br>修改：-E<br>删除：-D -t|u|f service-address<br>scheduler 调度方法，one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq, the default scheduler is wlc.</p>\n</blockquote>\n<h4 id=\"添加服务\"><a href=\"#添加服务\" class=\"headerlink\" title=\"添加服务\"></a>添加服务</h4><p>在虚拟IP中添加服务规则，管理集群服务中的RS<br>ipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.102 -g -w 1<br>ipvsadm -a  -t 192.168.79.110:80  -r  192.168.79.103 -g -w 1  </p>\n<blockquote>\n<p>-a： 添加服务规则<br>-t|u|f service-address -r server-address [-g|i|m] [-w weight]<br>-t|u|f service-address：事先定义好的某集群服务<br>-r server-address: 某RS的地址，在NAT模型中，可使用IP：PORT实现端口映射；<br>[-g|i|m]: LVS类型<br>-g: DR<br>-i: TUN<br>-m: NAT<br>[-w weight]: 定义服务器权重<br>修改：-e<br>删除：-d -t|u|f service-address -r server-address</p>\n</blockquote>\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><blockquote>\n<p>-L|l<br>-n: 数字格式显示主机地址和端口<br>–stats：统计数据<br>–rate: 速率<br>–timeout: 显示tcp、tcpfin和udp的会话超时时长<br>-:c 显示当前的ipvs连接状况<br>ipvsadm -lnc  偷窥负载记录</p>\n</blockquote>\n<h4 id=\"删除所有集群服务\"><a href=\"#删除所有集群服务\" class=\"headerlink\" title=\"删除所有集群服务\"></a>删除所有集群服务</h4><blockquote>\n<p>-C：清空ipvs规则</p>\n</blockquote>\n<h4 id=\"保存规则\"><a href=\"#保存规则\" class=\"headerlink\" title=\"保存规则\"></a>保存规则</h4><blockquote>\n<p>-S:保存规则<br>ipvsadm -S &gt; /path/to/somefile</p>\n</blockquote>\n<h4 id=\"载入规则\"><a href=\"#载入规则\" class=\"headerlink\" title=\"载入规则\"></a>载入规则</h4><blockquote>\n<p>-R 载入此前的规则：<br>ipvsadm -R &lt; /path/form/somefile </p>\n</blockquote>\n<h4 id=\"调度方法：\"><a href=\"#调度方法：\" class=\"headerlink\" title=\"调度方法：\"></a>调度方法：</h4><p>rr: 轮询调度<br>wrr: 加权轮询调度<br>sh: 源地址散列调度U<br>lc: 最小连接调度<br>wlc: 加权最小连接调度 (默认)<br>sed: 最短期望延迟<br>nq: 最少队列调度<br>lblc: 基于本地的最少连接<br>dh: 目标地址散列调度<br>lblcr: 基于本地的带复制功能的最少连接</p>"},{"title":"高并发 - 负载均衡架构","toc":true,"date":"2020-03-02T23:43:30.737Z","_content":"\n![负载均衡架构](https://casparthh.github.io/2020/03/02/loadbalance/loadbalance.png)\n","source":"_posts/2020-03-01-loadbalance.md","raw":"---\ntitle: 高并发 - 负载均衡架构\ntoc: true\ncategories:\n  - 技术笔记\ndate: 2020-03-01 2020-03-01 16:53:16\ntags:\n  - 高并发\n---\n\n![负载均衡架构](https://casparthh.github.io/2020/03/02/loadbalance/loadbalance.png)\n","slug":"loadbalance","published":1,"updated":"2020-03-02T23:43:30.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7b4075s0000udc9dxag3585","content":"<p><img src=\"https://casparthh.github.io/2020/03/02/loadbalance/loadbalance.png\" alt=\"负载均衡架构\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://casparthh.github.io/2020/03/02/loadbalance/loadbalance.png\" alt=\"负载均衡架构\"></p>\n"},{"title":"高并发 - 基于Keepalived的LVS实验","toc":true,"date":"2020-03-02T23:50:49.411Z","_content":"### 准备环境\nvip：node01 192.168.79.101 \n\nlvs(主)：node01 192.168.79.101  网卡: eth0\nlvs(备)：node04 192.168.79.104  网卡: eth0 \n\nnginx1：node02 192.168.79.102   网卡: eth3\nnginx2：node03 192.168.79.103   网卡: eth3\n\n\n### RS中的服务\nnode02~node03:\n1)修改内核：\n    echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore \n    echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore \n    echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce \n    echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce \n2）设置隐藏的vip：\n    ifconfig lo:3 192.168.79.110 netmask 255.255.255.255\n\t\t\n3)在node02 & node03上安装nginx\n```\n## 解压\ntar -xf nginx-1.16.1.tar.gz\n\n## 安装编译工具及库文件 \nyum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n\n## 配置编译安装\ncd nginx-1.16.1\n./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module\n\nmake & make install\n\n## 分别修改index.html 加上ip 或内容区分是如台机，方便后续测试\nvi /usr/local/nginx/html/index.html\n\n## 启动nginx\n./nginx\n\n分别访问检查是否安装成功，如果服务正常开启，但主机访问不了，请检查防火墙\nservice iptables stop\n\nhttp://192.168.79.102/\nhttp://192.168.79.103/\n```\n\n### 安装ipvsadm & keepalived\n在node01 & node04 安装 ipvsadm 和 keepalived\n\n```\n## 安装lvs的管理工具ipvsadm\nyum install ipvsadm keepalived -y\n\n## 配置\ncd  /etc/keepalived/\ncp keepalived.conf keepalived.conf.bak\nvi keepalived.conf\n```\n\n#### keepalived 配置文件内容：\n```\n! Configuration File for keepalived\n\n## 全局默认配置，发生故障时邮件通知\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.79.1\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL\n}\n\n\n## 虚拟路由冗余协议！\nvrrp_instance VI_1 {\n    ## state MASTER|BACKUP：当前节点在此虚拟路由器上的初始状态；只能有一个是MASTER，余下的都应该为BACKUP；\n    ##node4 这里写 BACKUP\n    state MASTER\n    ## 绑定为当前虚拟路由器使用的物理接口；\n    interface eth0\n    ## 当前虚拟路由器的惟一标识，范围是0-255\n    virtual_router_id 51\n    ## 当前主机在此虚拟路径器中的优先级；范围1-254；\n    ## node4 这里小点，写 50\n    priority 100\n    ## vrrp通告的时间间隔；\n    advert_int 1\n    \n    ##  设置认证\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    \n    # 定义vip\n    virtual_ipaddress {\n        192.168.79.110/24 dev eth0 label eth0:1\n    }\n}\n\nvirtual_server 192.168.79.110 80 {\n    ## 每隔6秒查看realserver状态\n    delay_loop 6\n    ## 调度算法改为轮询调度\n    lb_algo rr\n    # lvs工作模式为DR|NAT|TUN模式\n    lb_kind DR\n    nat_mask 255.255.255.0\n    # 同一IP 的连接50秒内被分配到同一台realserver(测试时改为0)\n    persistence_timeout 0\n    protocol TCP\n\n    ## 定义realserver\n    real_server 192.168.79.102 80 {\n        weight 1\n        HTTP_GET {\n            url {\n              path /\n              status_code 200\n            }\n            ## 三秒无响应超时\n            connect_timeout 3\n            nb_get_retry 3\n            delay_before_retry 3\n        }\n    }\n    ## 定义realserver\n    real_server 192.168.79.103 80 {\n        weight 1\n        HTTP_GET {\n            url {\n              path /\n              status_code 200\n            }\n            ## 三秒无响应超时\n            connect_timeout 3\n            nb_get_retry 3\n            delay_before_retry 3\n        }\n    }\n}\n\n```\n\n\n#### 查看keepalived配置帮助文档\n```\nman 5 keepalived.conf\n\n## 查看virtual_ipaddress 配置说明\nvirtual_ipaddress {\n   <IPADDR>/<MASK> brd <IPADDR> dev <STRING> scope <SCOPE> label <LABEL>\n   192.168.200.17/24 dev eth1\n   192.168.200.18/24 dev eth2 label eth2:1\n} \n\n## brd <IPADDR>: 桥接器地址\n## dev <STRING>: 设备\n## scope <SCOPE>: 权重值 \n## label <LABEL>: 标签\n```\n\n#### 启动 & 验证 keepalived\n```\n## 启动keepalived\nservice keepalived start\n\n## 检查网卡是否添加成功\nifconfig\n\n## 主需要显示信息，主正常的时候备没有：\neth0:1    Link encap:Ethernet  HWaddr 00:0C:29:6F:93:B0  \n          inet addr:192.168.79.110  Bcast:0.0.0.0  Mask:255.255.255.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n\n\n## 检查lvs内核模块的配置：\nipvsadm -ln\n\n## 需要显示信息：\nIP Virtual Server version 1.2.1 (size=4096)\nProt LocalAddress:Port Scheduler Flags\n  -> RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  192.168.79.110:80 rr\n  -> 192.168.79.102:80            Route   1      0          0         \n  -> 192.168.79.103:80            Route   1      0          0 \n\n## 查看负载记录：\nipvsadm -lnc  \n```\n#### 测试\n\\* 用浏览器访问http://192.168.79.100 验证结果\n\\* 分别停掉一台DR 或 主，备 再检验结果\n\n### 将DR 的隐藏IP配置写成文件\n创建lvsdr.sh，内容如下：\n```\n#!/bin/sh\nVIP=192.168.79.110\n\n# 限制arp请求\necho \"1\" > /proc/sys/net/ipv4/conf/lo/arp_ignore\necho \"1\" > /proc/sys/net/ipv4/conf/all/arp_ignore\necho \"2\" > /proc/sys/net/ipv4/conf/lo/arp_announce\necho \"2\" > /proc/sys/net/ipv4/conf/all/arp_announce\n\nifconfig lo:3 $VIP netmask 255.255.255.255\n```\n","source":"_posts/2020-03-01-keepalivedlvs.md","raw":"---\ntitle: 高并发 - 基于Keepalived的LVS实验\ntoc: true\ncategories:\n  - 技术笔记\ndate: 2020-03-01 2020-03-01 16:53:16\ntags:\n- 高并发\n- LVS\n- Keepalived\n---\n### 准备环境\nvip：node01 192.168.79.101 \n\nlvs(主)：node01 192.168.79.101  网卡: eth0\nlvs(备)：node04 192.168.79.104  网卡: eth0 \n\nnginx1：node02 192.168.79.102   网卡: eth3\nnginx2：node03 192.168.79.103   网卡: eth3\n\n\n### RS中的服务\nnode02~node03:\n1)修改内核：\n    echo 1 > /proc/sys/net/ipv4/conf/lo/arp_ignore \n    echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore \n    echo 2 > /proc/sys/net/ipv4/conf/lo/arp_announce \n    echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce \n2）设置隐藏的vip：\n    ifconfig lo:3 192.168.79.110 netmask 255.255.255.255\n\t\t\n3)在node02 & node03上安装nginx\n```\n## 解压\ntar -xf nginx-1.16.1.tar.gz\n\n## 安装编译工具及库文件 \nyum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n\n## 配置编译安装\ncd nginx-1.16.1\n./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module\n\nmake & make install\n\n## 分别修改index.html 加上ip 或内容区分是如台机，方便后续测试\nvi /usr/local/nginx/html/index.html\n\n## 启动nginx\n./nginx\n\n分别访问检查是否安装成功，如果服务正常开启，但主机访问不了，请检查防火墙\nservice iptables stop\n\nhttp://192.168.79.102/\nhttp://192.168.79.103/\n```\n\n### 安装ipvsadm & keepalived\n在node01 & node04 安装 ipvsadm 和 keepalived\n\n```\n## 安装lvs的管理工具ipvsadm\nyum install ipvsadm keepalived -y\n\n## 配置\ncd  /etc/keepalived/\ncp keepalived.conf keepalived.conf.bak\nvi keepalived.conf\n```\n\n#### keepalived 配置文件内容：\n```\n! Configuration File for keepalived\n\n## 全局默认配置，发生故障时邮件通知\nglobal_defs {\n   notification_email {\n     acassen@firewall.loc\n     failover@firewall.loc\n     sysadmin@firewall.loc\n   }\n   notification_email_from Alexandre.Cassen@firewall.loc\n   smtp_server 192.168.79.1\n   smtp_connect_timeout 30\n   router_id LVS_DEVEL\n}\n\n\n## 虚拟路由冗余协议！\nvrrp_instance VI_1 {\n    ## state MASTER|BACKUP：当前节点在此虚拟路由器上的初始状态；只能有一个是MASTER，余下的都应该为BACKUP；\n    ##node4 这里写 BACKUP\n    state MASTER\n    ## 绑定为当前虚拟路由器使用的物理接口；\n    interface eth0\n    ## 当前虚拟路由器的惟一标识，范围是0-255\n    virtual_router_id 51\n    ## 当前主机在此虚拟路径器中的优先级；范围1-254；\n    ## node4 这里小点，写 50\n    priority 100\n    ## vrrp通告的时间间隔；\n    advert_int 1\n    \n    ##  设置认证\n    authentication {\n        auth_type PASS\n        auth_pass 1111\n    }\n    \n    # 定义vip\n    virtual_ipaddress {\n        192.168.79.110/24 dev eth0 label eth0:1\n    }\n}\n\nvirtual_server 192.168.79.110 80 {\n    ## 每隔6秒查看realserver状态\n    delay_loop 6\n    ## 调度算法改为轮询调度\n    lb_algo rr\n    # lvs工作模式为DR|NAT|TUN模式\n    lb_kind DR\n    nat_mask 255.255.255.0\n    # 同一IP 的连接50秒内被分配到同一台realserver(测试时改为0)\n    persistence_timeout 0\n    protocol TCP\n\n    ## 定义realserver\n    real_server 192.168.79.102 80 {\n        weight 1\n        HTTP_GET {\n            url {\n              path /\n              status_code 200\n            }\n            ## 三秒无响应超时\n            connect_timeout 3\n            nb_get_retry 3\n            delay_before_retry 3\n        }\n    }\n    ## 定义realserver\n    real_server 192.168.79.103 80 {\n        weight 1\n        HTTP_GET {\n            url {\n              path /\n              status_code 200\n            }\n            ## 三秒无响应超时\n            connect_timeout 3\n            nb_get_retry 3\n            delay_before_retry 3\n        }\n    }\n}\n\n```\n\n\n#### 查看keepalived配置帮助文档\n```\nman 5 keepalived.conf\n\n## 查看virtual_ipaddress 配置说明\nvirtual_ipaddress {\n   <IPADDR>/<MASK> brd <IPADDR> dev <STRING> scope <SCOPE> label <LABEL>\n   192.168.200.17/24 dev eth1\n   192.168.200.18/24 dev eth2 label eth2:1\n} \n\n## brd <IPADDR>: 桥接器地址\n## dev <STRING>: 设备\n## scope <SCOPE>: 权重值 \n## label <LABEL>: 标签\n```\n\n#### 启动 & 验证 keepalived\n```\n## 启动keepalived\nservice keepalived start\n\n## 检查网卡是否添加成功\nifconfig\n\n## 主需要显示信息，主正常的时候备没有：\neth0:1    Link encap:Ethernet  HWaddr 00:0C:29:6F:93:B0  \n          inet addr:192.168.79.110  Bcast:0.0.0.0  Mask:255.255.255.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n\n\n## 检查lvs内核模块的配置：\nipvsadm -ln\n\n## 需要显示信息：\nIP Virtual Server version 1.2.1 (size=4096)\nProt LocalAddress:Port Scheduler Flags\n  -> RemoteAddress:Port           Forward Weight ActiveConn InActConn\nTCP  192.168.79.110:80 rr\n  -> 192.168.79.102:80            Route   1      0          0         \n  -> 192.168.79.103:80            Route   1      0          0 \n\n## 查看负载记录：\nipvsadm -lnc  \n```\n#### 测试\n\\* 用浏览器访问http://192.168.79.100 验证结果\n\\* 分别停掉一台DR 或 主，备 再检验结果\n\n### 将DR 的隐藏IP配置写成文件\n创建lvsdr.sh，内容如下：\n```\n#!/bin/sh\nVIP=192.168.79.110\n\n# 限制arp请求\necho \"1\" > /proc/sys/net/ipv4/conf/lo/arp_ignore\necho \"1\" > /proc/sys/net/ipv4/conf/all/arp_ignore\necho \"2\" > /proc/sys/net/ipv4/conf/lo/arp_announce\necho \"2\" > /proc/sys/net/ipv4/conf/all/arp_announce\n\nifconfig lo:3 $VIP netmask 255.255.255.255\n```\n","slug":"keepalivedlvs","published":1,"updated":"2020-03-02T23:50:49.411Z","_id":"ck7b407670003udc9369e0cvl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>vip：node01 192.168.79.101 </p>\n<p>lvs(主)：node01 192.168.79.101  网卡: eth0<br>lvs(备)：node04 192.168.79.104  网卡: eth0 </p>\n<p>nginx1：node02 192.168.79.102   网卡: eth3<br>nginx2：node03 192.168.79.103   网卡: eth3</p>\n<h3 id=\"RS中的服务\"><a href=\"#RS中的服务\" class=\"headerlink\" title=\"RS中的服务\"></a>RS中的服务</h3><p>node02~node03:<br>1)修改内核：<br>    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore<br>    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore<br>    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce<br>    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce<br>2）设置隐藏的vip：<br>    ifconfig lo:3 192.168.79.110 netmask 255.255.255.255</p>\n<p>3)在node02 &amp; node03上安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 解压</span><br><span class=\"line\">tar -xf nginx-1.16.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">## 安装编译工具及库文件 </span><br><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\">## 配置编译安装</span><br><span class=\"line\">cd nginx-1.16.1</span><br><span class=\"line\">.&#x2F;configure --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx --conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf --pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid --with-http_ssl_module</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">## 分别修改index.html 加上ip 或内容区分是如台机，方便后续测试</span><br><span class=\"line\">vi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class=\"line\"></span><br><span class=\"line\">## 启动nginx</span><br><span class=\"line\">.&#x2F;nginx</span><br><span class=\"line\"></span><br><span class=\"line\">分别访问检查是否安装成功，如果服务正常开启，但主机访问不了，请检查防火墙</span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"></span><br><span class=\"line\">http:&#x2F;&#x2F;192.168.79.102&#x2F;</span><br><span class=\"line\">http:&#x2F;&#x2F;192.168.79.103&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装ipvsadm-amp-keepalived\"><a href=\"#安装ipvsadm-amp-keepalived\" class=\"headerlink\" title=\"安装ipvsadm &amp; keepalived\"></a>安装ipvsadm &amp; keepalived</h3><p>在node01 &amp; node04 安装 ipvsadm 和 keepalived</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装lvs的管理工具ipvsadm</span><br><span class=\"line\">yum install ipvsadm keepalived -y</span><br><span class=\"line\"></span><br><span class=\"line\">## 配置</span><br><span class=\"line\">cd  &#x2F;etc&#x2F;keepalived&#x2F;</span><br><span class=\"line\">cp keepalived.conf keepalived.conf.bak</span><br><span class=\"line\">vi keepalived.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"keepalived-配置文件内容：\"><a href=\"#keepalived-配置文件内容：\" class=\"headerlink\" title=\"keepalived 配置文件内容：\"></a>keepalived 配置文件内容：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">## 全局默认配置，发生故障时邮件通知</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     acassen@firewall.loc</span><br><span class=\"line\">     failover@firewall.loc</span><br><span class=\"line\">     sysadmin@firewall.loc</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 192.168.79.1</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 虚拟路由冗余协议！</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    ## state MASTER|BACKUP：当前节点在此虚拟路由器上的初始状态；只能有一个是MASTER，余下的都应该为BACKUP；</span><br><span class=\"line\">    ##node4 这里写 BACKUP</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    ## 绑定为当前虚拟路由器使用的物理接口；</span><br><span class=\"line\">    interface eth0</span><br><span class=\"line\">    ## 当前虚拟路由器的惟一标识，范围是0-255</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    ## 当前主机在此虚拟路径器中的优先级；范围1-254；</span><br><span class=\"line\">    ## node4 这里小点，写 50</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    ## vrrp通告的时间间隔；</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    </span><br><span class=\"line\">    ##  设置认证</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 定义vip</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.79.110&#x2F;24 dev eth0 label eth0:1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.79.110 80 &#123;</span><br><span class=\"line\">    ## 每隔6秒查看realserver状态</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    ## 调度算法改为轮询调度</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    # lvs工作模式为DR|NAT|TUN模式</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    # 同一IP 的连接50秒内被分配到同一台realserver(测试时改为0)</span><br><span class=\"line\">    persistence_timeout 0</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    ## 定义realserver</span><br><span class=\"line\">    real_server 192.168.79.102 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        HTTP_GET &#123;</span><br><span class=\"line\">            url &#123;</span><br><span class=\"line\">              path &#x2F;</span><br><span class=\"line\">              status_code 200</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ## 三秒无响应超时</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ## 定义realserver</span><br><span class=\"line\">    real_server 192.168.79.103 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        HTTP_GET &#123;</span><br><span class=\"line\">            url &#123;</span><br><span class=\"line\">              path &#x2F;</span><br><span class=\"line\">              status_code 200</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ## 三秒无响应超时</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"查看keepalived配置帮助文档\"><a href=\"#查看keepalived配置帮助文档\" class=\"headerlink\" title=\"查看keepalived配置帮助文档\"></a>查看keepalived配置帮助文档</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 5 keepalived.conf</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看virtual_ipaddress 配置说明</span><br><span class=\"line\">virtual_ipaddress &#123;</span><br><span class=\"line\">   &lt;IPADDR&gt;&#x2F;&lt;MASK&gt; brd &lt;IPADDR&gt; dev &lt;STRING&gt; scope &lt;SCOPE&gt; label &lt;LABEL&gt;</span><br><span class=\"line\">   192.168.200.17&#x2F;24 dev eth1</span><br><span class=\"line\">   192.168.200.18&#x2F;24 dev eth2 label eth2:1</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">## brd &lt;IPADDR&gt;: 桥接器地址</span><br><span class=\"line\">## dev &lt;STRING&gt;: 设备</span><br><span class=\"line\">## scope &lt;SCOPE&gt;: 权重值 </span><br><span class=\"line\">## label &lt;LABEL&gt;: 标签</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-amp-验证-keepalived\"><a href=\"#启动-amp-验证-keepalived\" class=\"headerlink\" title=\"启动 &amp; 验证 keepalived\"></a>启动 &amp; 验证 keepalived</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 启动keepalived</span><br><span class=\"line\">service keepalived start</span><br><span class=\"line\"></span><br><span class=\"line\">## 检查网卡是否添加成功</span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"></span><br><span class=\"line\">## 主需要显示信息，主正常的时候备没有：</span><br><span class=\"line\">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:6F:93:B0  </span><br><span class=\"line\">          inet addr:192.168.79.110  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 检查lvs内核模块的配置：</span><br><span class=\"line\">ipvsadm -ln</span><br><span class=\"line\"></span><br><span class=\"line\">## 需要显示信息：</span><br><span class=\"line\">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class=\"line\">TCP  192.168.79.110:80 rr</span><br><span class=\"line\">  -&gt; 192.168.79.102:80            Route   1      0          0         </span><br><span class=\"line\">  -&gt; 192.168.79.103:80            Route   1      0          0 </span><br><span class=\"line\"></span><br><span class=\"line\">## 查看负载记录：</span><br><span class=\"line\">ipvsadm -lnc</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>* 用浏览器访问<a href=\"http://192.168.79.100\" target=\"_blank\" rel=\"noopener\">http://192.168.79.100</a> 验证结果<br>* 分别停掉一台DR 或 主，备 再检验结果</p>\n<h3 id=\"将DR-的隐藏IP配置写成文件\"><a href=\"#将DR-的隐藏IP配置写成文件\" class=\"headerlink\" title=\"将DR 的隐藏IP配置写成文件\"></a>将DR 的隐藏IP配置写成文件</h3><p>创建lvsdr.sh，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;bin&#x2F;sh</span><br><span class=\"line\">VIP&#x3D;192.168.79.110</span><br><span class=\"line\"></span><br><span class=\"line\"># 限制arp请求</span><br><span class=\"line\">echo &quot;1&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;lo&#x2F;arp_ignore</span><br><span class=\"line\">echo &quot;1&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore</span><br><span class=\"line\">echo &quot;2&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;lo&#x2F;arp_announce</span><br><span class=\"line\">echo &quot;2&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce</span><br><span class=\"line\"></span><br><span class=\"line\">ifconfig lo:3 $VIP netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>vip：node01 192.168.79.101 </p>\n<p>lvs(主)：node01 192.168.79.101  网卡: eth0<br>lvs(备)：node04 192.168.79.104  网卡: eth0 </p>\n<p>nginx1：node02 192.168.79.102   网卡: eth3<br>nginx2：node03 192.168.79.103   网卡: eth3</p>\n<h3 id=\"RS中的服务\"><a href=\"#RS中的服务\" class=\"headerlink\" title=\"RS中的服务\"></a>RS中的服务</h3><p>node02~node03:<br>1)修改内核：<br>    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore<br>    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore<br>    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce<br>    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce<br>2）设置隐藏的vip：<br>    ifconfig lo:3 192.168.79.110 netmask 255.255.255.255</p>\n<p>3)在node02 &amp; node03上安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 解压</span><br><span class=\"line\">tar -xf nginx-1.16.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">## 安装编译工具及库文件 </span><br><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\">## 配置编译安装</span><br><span class=\"line\">cd nginx-1.16.1</span><br><span class=\"line\">.&#x2F;configure --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx --conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf --pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid --with-http_ssl_module</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">## 分别修改index.html 加上ip 或内容区分是如台机，方便后续测试</span><br><span class=\"line\">vi &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class=\"line\"></span><br><span class=\"line\">## 启动nginx</span><br><span class=\"line\">.&#x2F;nginx</span><br><span class=\"line\"></span><br><span class=\"line\">分别访问检查是否安装成功，如果服务正常开启，但主机访问不了，请检查防火墙</span><br><span class=\"line\">service iptables stop</span><br><span class=\"line\"></span><br><span class=\"line\">http:&#x2F;&#x2F;192.168.79.102&#x2F;</span><br><span class=\"line\">http:&#x2F;&#x2F;192.168.79.103&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装ipvsadm-amp-keepalived\"><a href=\"#安装ipvsadm-amp-keepalived\" class=\"headerlink\" title=\"安装ipvsadm &amp; keepalived\"></a>安装ipvsadm &amp; keepalived</h3><p>在node01 &amp; node04 安装 ipvsadm 和 keepalived</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装lvs的管理工具ipvsadm</span><br><span class=\"line\">yum install ipvsadm keepalived -y</span><br><span class=\"line\"></span><br><span class=\"line\">## 配置</span><br><span class=\"line\">cd  &#x2F;etc&#x2F;keepalived&#x2F;</span><br><span class=\"line\">cp keepalived.conf keepalived.conf.bak</span><br><span class=\"line\">vi keepalived.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"keepalived-配置文件内容：\"><a href=\"#keepalived-配置文件内容：\" class=\"headerlink\" title=\"keepalived 配置文件内容：\"></a>keepalived 配置文件内容：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Configuration File for keepalived</span><br><span class=\"line\"></span><br><span class=\"line\">## 全局默认配置，发生故障时邮件通知</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">   notification_email &#123;</span><br><span class=\"line\">     acassen@firewall.loc</span><br><span class=\"line\">     failover@firewall.loc</span><br><span class=\"line\">     sysadmin@firewall.loc</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class=\"line\">   smtp_server 192.168.79.1</span><br><span class=\"line\">   smtp_connect_timeout 30</span><br><span class=\"line\">   router_id LVS_DEVEL</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 虚拟路由冗余协议！</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    ## state MASTER|BACKUP：当前节点在此虚拟路由器上的初始状态；只能有一个是MASTER，余下的都应该为BACKUP；</span><br><span class=\"line\">    ##node4 这里写 BACKUP</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    ## 绑定为当前虚拟路由器使用的物理接口；</span><br><span class=\"line\">    interface eth0</span><br><span class=\"line\">    ## 当前虚拟路由器的惟一标识，范围是0-255</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    ## 当前主机在此虚拟路径器中的优先级；范围1-254；</span><br><span class=\"line\">    ## node4 这里小点，写 50</span><br><span class=\"line\">    priority 100</span><br><span class=\"line\">    ## vrrp通告的时间间隔；</span><br><span class=\"line\">    advert_int 1</span><br><span class=\"line\">    </span><br><span class=\"line\">    ##  设置认证</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 1111</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 定义vip</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.79.110&#x2F;24 dev eth0 label eth0:1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">virtual_server 192.168.79.110 80 &#123;</span><br><span class=\"line\">    ## 每隔6秒查看realserver状态</span><br><span class=\"line\">    delay_loop 6</span><br><span class=\"line\">    ## 调度算法改为轮询调度</span><br><span class=\"line\">    lb_algo rr</span><br><span class=\"line\">    # lvs工作模式为DR|NAT|TUN模式</span><br><span class=\"line\">    lb_kind DR</span><br><span class=\"line\">    nat_mask 255.255.255.0</span><br><span class=\"line\">    # 同一IP 的连接50秒内被分配到同一台realserver(测试时改为0)</span><br><span class=\"line\">    persistence_timeout 0</span><br><span class=\"line\">    protocol TCP</span><br><span class=\"line\"></span><br><span class=\"line\">    ## 定义realserver</span><br><span class=\"line\">    real_server 192.168.79.102 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        HTTP_GET &#123;</span><br><span class=\"line\">            url &#123;</span><br><span class=\"line\">              path &#x2F;</span><br><span class=\"line\">              status_code 200</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ## 三秒无响应超时</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ## 定义realserver</span><br><span class=\"line\">    real_server 192.168.79.103 80 &#123;</span><br><span class=\"line\">        weight 1</span><br><span class=\"line\">        HTTP_GET &#123;</span><br><span class=\"line\">            url &#123;</span><br><span class=\"line\">              path &#x2F;</span><br><span class=\"line\">              status_code 200</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ## 三秒无响应超时</span><br><span class=\"line\">            connect_timeout 3</span><br><span class=\"line\">            nb_get_retry 3</span><br><span class=\"line\">            delay_before_retry 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"查看keepalived配置帮助文档\"><a href=\"#查看keepalived配置帮助文档\" class=\"headerlink\" title=\"查看keepalived配置帮助文档\"></a>查看keepalived配置帮助文档</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 5 keepalived.conf</span><br><span class=\"line\"></span><br><span class=\"line\">## 查看virtual_ipaddress 配置说明</span><br><span class=\"line\">virtual_ipaddress &#123;</span><br><span class=\"line\">   &lt;IPADDR&gt;&#x2F;&lt;MASK&gt; brd &lt;IPADDR&gt; dev &lt;STRING&gt; scope &lt;SCOPE&gt; label &lt;LABEL&gt;</span><br><span class=\"line\">   192.168.200.17&#x2F;24 dev eth1</span><br><span class=\"line\">   192.168.200.18&#x2F;24 dev eth2 label eth2:1</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">## brd &lt;IPADDR&gt;: 桥接器地址</span><br><span class=\"line\">## dev &lt;STRING&gt;: 设备</span><br><span class=\"line\">## scope &lt;SCOPE&gt;: 权重值 </span><br><span class=\"line\">## label &lt;LABEL&gt;: 标签</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-amp-验证-keepalived\"><a href=\"#启动-amp-验证-keepalived\" class=\"headerlink\" title=\"启动 &amp; 验证 keepalived\"></a>启动 &amp; 验证 keepalived</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 启动keepalived</span><br><span class=\"line\">service keepalived start</span><br><span class=\"line\"></span><br><span class=\"line\">## 检查网卡是否添加成功</span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"></span><br><span class=\"line\">## 主需要显示信息，主正常的时候备没有：</span><br><span class=\"line\">eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:6F:93:B0  </span><br><span class=\"line\">          inet addr:192.168.79.110  Bcast:0.0.0.0  Mask:255.255.255.0</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 检查lvs内核模块的配置：</span><br><span class=\"line\">ipvsadm -ln</span><br><span class=\"line\"></span><br><span class=\"line\">## 需要显示信息：</span><br><span class=\"line\">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class=\"line\">TCP  192.168.79.110:80 rr</span><br><span class=\"line\">  -&gt; 192.168.79.102:80            Route   1      0          0         </span><br><span class=\"line\">  -&gt; 192.168.79.103:80            Route   1      0          0 </span><br><span class=\"line\"></span><br><span class=\"line\">## 查看负载记录：</span><br><span class=\"line\">ipvsadm -lnc</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>* 用浏览器访问<a href=\"http://192.168.79.100\" target=\"_blank\" rel=\"noopener\">http://192.168.79.100</a> 验证结果<br>* 分别停掉一台DR 或 主，备 再检验结果</p>\n<h3 id=\"将DR-的隐藏IP配置写成文件\"><a href=\"#将DR-的隐藏IP配置写成文件\" class=\"headerlink\" title=\"将DR 的隐藏IP配置写成文件\"></a>将DR 的隐藏IP配置写成文件</h3><p>创建lvsdr.sh，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;bin&#x2F;sh</span><br><span class=\"line\">VIP&#x3D;192.168.79.110</span><br><span class=\"line\"></span><br><span class=\"line\"># 限制arp请求</span><br><span class=\"line\">echo &quot;1&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;lo&#x2F;arp_ignore</span><br><span class=\"line\">echo &quot;1&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore</span><br><span class=\"line\">echo &quot;2&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;lo&#x2F;arp_announce</span><br><span class=\"line\">echo &quot;2&quot; &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce</span><br><span class=\"line\"></span><br><span class=\"line\">ifconfig lo:3 $VIP netmask 255.255.255.255</span><br></pre></td></tr></table></figure>\n"},{"title":"Twemproxy(Nutcracker)","toc":true,"date":"2020-03-07T16:45:46.000Z","_content":"Twtter 开源的一个 Redis 和 Memcache 代理服务器，主要用于管理 Redis 和 Memcached 集群。\n<!--more-->\n### 编译\ngit :https://github.com/twitter/twemproxy\n下载源码\n安装依赖工具\n`$ yum install automake libtool`\n\n添加阿里云epel repository\n`$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo`\n`$ yum clean all`\n\n查找新版本的autoconf\n`$ yum search autoconf`\n`$ yum install autoconf268`\n\n 从源码编译\n`$ makereconf -fvi`\n`$ ./configure`\n`$ make`\n\n### 安装\n编译完成后进入script目录下，可以找到nutcracker.init文件，这是个脚本文件可以打开看下。\n里面有指定了\na. chkconfig\nb. 执行程序： \n    prog=\"nutcracker\"\nc. 配置文件nutcracker.yml： \n  OPTIONS=\"-d -c /etc/nutcracker/nutcracker.yml\"\n\n接下来需要做的就是：\n1.将这个脚本文件复制到 /etc/init.d/\n`$ cp nutcracker.init /etc/init.d/nutcracker`\n`$ chmod +x /etc/init.d/nutcracker`\n\n2.回到编译目录下找到nutcracker.yml配置文件并复制到/tec/nutcracker/目录下\n`$ mkdir /etc/nutcracker`\n`$ cp ./conf/nutcracker.* /etc/nutcracker/`\n\n3.在编译文件的src目录下找到程序nutcracker,并复制到/usr/bin/下\n`$ cp ./src/nutcracker /usr/bin/`\n\n\n4.修改nutcracker\n文件中有配置好了几个参考模版。我们只需保留任意一个，然后修改services部分指向redis master就行。\n```  \nalpha:\n  listen: 127.0.0.1:22121\n  hash: fnv1a_64\n  distribution: ketama\n  auto_eject_hosts: true\n  redis: true\n  server_retry_timeout: 2000\n  server_failure_limit: 1\n  servers:\n   - vm1:6379:1\n   - vm3:6379:1\n```\nauto_eject_host: 当连接一个server失败次数超过server_failure_limit值时，是否把这个server驱逐出集群，默认是false  \nserver_retry_timeout:单位毫秒，当auto_eject_host打开后，重试被临时驱逐的server之前的等待时间    \nserver_failure_limit: 当auto_eject_host打开后，驱逐一个server之前重试次数  \n\n### 运行测试\n启动服务  \n`$ service nutcracker start`  \n\n连接到代理程序并测试\n`$ redis-cli -p 22121`\n`set pass mypassword`\n`set k1 mytestk1`\nset 多个key 后再分别到多台master上get 验证，由于算法原因，可能会连续很多key存到了同一台redis, 所以多set一些不同的key验证。\n\n其缺点：\n不支持Redis的事务操作。    \n不支持针对多个值的操作，比如取sets的子交并补等。  \n  \n\n","source":"_posts/2020-03-08-twemproxy.md","raw":"---\ntitle: Twemproxy(Nutcracker)\ntoc: true\ncategories:\n  - 技术笔记\ndate: 2020-03-08 00:45:46\ntags:\n  - Redis\n---\nTwtter 开源的一个 Redis 和 Memcache 代理服务器，主要用于管理 Redis 和 Memcached 集群。\n<!--more-->\n### 编译\ngit :https://github.com/twitter/twemproxy\n下载源码\n安装依赖工具\n`$ yum install automake libtool`\n\n添加阿里云epel repository\n`$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo`\n`$ yum clean all`\n\n查找新版本的autoconf\n`$ yum search autoconf`\n`$ yum install autoconf268`\n\n 从源码编译\n`$ makereconf -fvi`\n`$ ./configure`\n`$ make`\n\n### 安装\n编译完成后进入script目录下，可以找到nutcracker.init文件，这是个脚本文件可以打开看下。\n里面有指定了\na. chkconfig\nb. 执行程序： \n    prog=\"nutcracker\"\nc. 配置文件nutcracker.yml： \n  OPTIONS=\"-d -c /etc/nutcracker/nutcracker.yml\"\n\n接下来需要做的就是：\n1.将这个脚本文件复制到 /etc/init.d/\n`$ cp nutcracker.init /etc/init.d/nutcracker`\n`$ chmod +x /etc/init.d/nutcracker`\n\n2.回到编译目录下找到nutcracker.yml配置文件并复制到/tec/nutcracker/目录下\n`$ mkdir /etc/nutcracker`\n`$ cp ./conf/nutcracker.* /etc/nutcracker/`\n\n3.在编译文件的src目录下找到程序nutcracker,并复制到/usr/bin/下\n`$ cp ./src/nutcracker /usr/bin/`\n\n\n4.修改nutcracker\n文件中有配置好了几个参考模版。我们只需保留任意一个，然后修改services部分指向redis master就行。\n```  \nalpha:\n  listen: 127.0.0.1:22121\n  hash: fnv1a_64\n  distribution: ketama\n  auto_eject_hosts: true\n  redis: true\n  server_retry_timeout: 2000\n  server_failure_limit: 1\n  servers:\n   - vm1:6379:1\n   - vm3:6379:1\n```\nauto_eject_host: 当连接一个server失败次数超过server_failure_limit值时，是否把这个server驱逐出集群，默认是false  \nserver_retry_timeout:单位毫秒，当auto_eject_host打开后，重试被临时驱逐的server之前的等待时间    \nserver_failure_limit: 当auto_eject_host打开后，驱逐一个server之前重试次数  \n\n### 运行测试\n启动服务  \n`$ service nutcracker start`  \n\n连接到代理程序并测试\n`$ redis-cli -p 22121`\n`set pass mypassword`\n`set k1 mytestk1`\nset 多个key 后再分别到多台master上get 验证，由于算法原因，可能会连续很多key存到了同一台redis, 所以多set一些不同的key验证。\n\n其缺点：\n不支持Redis的事务操作。    \n不支持针对多个值的操作，比如取sets的子交并补等。  \n  \n\n","slug":"twemproxy","published":1,"updated":"2020-03-07T17:34:25.024Z","_id":"ck7huekuy0000twc95e5u1rr1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Twtter 开源的一个 Redis 和 Memcache 代理服务器，主要用于管理 Redis 和 Memcached 集群。</p>\n<a id=\"more\"></a>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>git :<a href=\"https://github.com/twitter/twemproxy\">https://github.com/twitter/twemproxy</a><br>下载源码<br>安装依赖工具<br><code>$ yum install automake libtool</code></p>\n<p>添加阿里云epel repository<br><code>$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</code><br><code>$ yum clean all</code></p>\n<p>查找新版本的autoconf<br><code>$ yum search autoconf</code><br><code>$ yum install autoconf268</code></p>\n<p> 从源码编译<br><code>$ makereconf -fvi</code><br><code>$ ./configure</code><br><code>$ make</code></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>编译完成后进入script目录下，可以找到nutcracker.init文件，这是个脚本文件可以打开看下。<br>里面有指定了<br>a. chkconfig<br>b. 执行程序：<br>    prog=”nutcracker”<br>c. 配置文件nutcracker.yml：<br>  OPTIONS=”-d -c /etc/nutcracker/nutcracker.yml”</p>\n<p>接下来需要做的就是：<br>1.将这个脚本文件复制到 /etc/init.d/<br><code>$ cp nutcracker.init /etc/init.d/nutcracker</code><br><code>$ chmod +x /etc/init.d/nutcracker</code></p>\n<p>2.回到编译目录下找到nutcracker.yml配置文件并复制到/tec/nutcracker/目录下<br><code>$ mkdir /etc/nutcracker</code><br><code>$ cp ./conf/nutcracker.* /etc/nutcracker/</code></p>\n<p>3.在编译文件的src目录下找到程序nutcracker,并复制到/usr/bin/下<br><code>$ cp ./src/nutcracker /usr/bin/</code></p>\n<p>4.修改nutcracker<br>文件中有配置好了几个参考模版。我们只需保留任意一个，然后修改services部分指向redis master就行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alpha:</span><br><span class=\"line\">  listen: 127.0.0.1:22121</span><br><span class=\"line\">  hash: fnv1a_64</span><br><span class=\"line\">  distribution: ketama</span><br><span class=\"line\">  auto_eject_hosts: true</span><br><span class=\"line\">  redis: true</span><br><span class=\"line\">  server_retry_timeout: 2000</span><br><span class=\"line\">  server_failure_limit: 1</span><br><span class=\"line\">  servers:</span><br><span class=\"line\">   - vm1:6379:1</span><br><span class=\"line\">   - vm3:6379:1</span><br></pre></td></tr></table></figure>\n<p>auto_eject_host: 当连接一个server失败次数超过server_failure_limit值时，是否把这个server驱逐出集群，默认是false<br>server_retry_timeout:单位毫秒，当auto_eject_host打开后，重试被临时驱逐的server之前的等待时间<br>server_failure_limit: 当auto_eject_host打开后，驱逐一个server之前重试次数  </p>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><p>启动服务<br><code>$ service nutcracker start</code>  </p>\n<p>连接到代理程序并测试<br><code>$ redis-cli -p 22121</code><br><code>set pass mypassword</code><br><code>set k1 mytestk1</code><br>set 多个key 后再分别到多台master上get 验证，由于算法原因，可能会连续很多key存到了同一台redis, 所以多set一些不同的key验证。</p>\n<p>其缺点：<br>不支持Redis的事务操作。<br>不支持针对多个值的操作，比如取sets的子交并补等。  </p>\n","site":{"data":{}},"excerpt":"<p>Twtter 开源的一个 Redis 和 Memcache 代理服务器，主要用于管理 Redis 和 Memcached 集群。</p>","more":"<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>git :<a href=\"https://github.com/twitter/twemproxy\">https://github.com/twitter/twemproxy</a><br>下载源码<br>安装依赖工具<br><code>$ yum install automake libtool</code></p>\n<p>添加阿里云epel repository<br><code>$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</code><br><code>$ yum clean all</code></p>\n<p>查找新版本的autoconf<br><code>$ yum search autoconf</code><br><code>$ yum install autoconf268</code></p>\n<p> 从源码编译<br><code>$ makereconf -fvi</code><br><code>$ ./configure</code><br><code>$ make</code></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>编译完成后进入script目录下，可以找到nutcracker.init文件，这是个脚本文件可以打开看下。<br>里面有指定了<br>a. chkconfig<br>b. 执行程序：<br>    prog=”nutcracker”<br>c. 配置文件nutcracker.yml：<br>  OPTIONS=”-d -c /etc/nutcracker/nutcracker.yml”</p>\n<p>接下来需要做的就是：<br>1.将这个脚本文件复制到 /etc/init.d/<br><code>$ cp nutcracker.init /etc/init.d/nutcracker</code><br><code>$ chmod +x /etc/init.d/nutcracker</code></p>\n<p>2.回到编译目录下找到nutcracker.yml配置文件并复制到/tec/nutcracker/目录下<br><code>$ mkdir /etc/nutcracker</code><br><code>$ cp ./conf/nutcracker.* /etc/nutcracker/</code></p>\n<p>3.在编译文件的src目录下找到程序nutcracker,并复制到/usr/bin/下<br><code>$ cp ./src/nutcracker /usr/bin/</code></p>\n<p>4.修改nutcracker<br>文件中有配置好了几个参考模版。我们只需保留任意一个，然后修改services部分指向redis master就行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alpha:</span><br><span class=\"line\">  listen: 127.0.0.1:22121</span><br><span class=\"line\">  hash: fnv1a_64</span><br><span class=\"line\">  distribution: ketama</span><br><span class=\"line\">  auto_eject_hosts: true</span><br><span class=\"line\">  redis: true</span><br><span class=\"line\">  server_retry_timeout: 2000</span><br><span class=\"line\">  server_failure_limit: 1</span><br><span class=\"line\">  servers:</span><br><span class=\"line\">   - vm1:6379:1</span><br><span class=\"line\">   - vm3:6379:1</span><br></pre></td></tr></table></figure>\n<p>auto_eject_host: 当连接一个server失败次数超过server_failure_limit值时，是否把这个server驱逐出集群，默认是false<br>server_retry_timeout:单位毫秒，当auto_eject_host打开后，重试被临时驱逐的server之前的等待时间<br>server_failure_limit: 当auto_eject_host打开后，驱逐一个server之前重试次数  </p>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><p>启动服务<br><code>$ service nutcracker start</code>  </p>\n<p>连接到代理程序并测试<br><code>$ redis-cli -p 22121</code><br><code>set pass mypassword</code><br><code>set k1 mytestk1</code><br>set 多个key 后再分别到多台master上get 验证，由于算法原因，可能会连续很多key存到了同一台redis, 所以多set一些不同的key验证。</p>\n<p>其缺点：<br>不支持Redis的事务操作。<br>不支持针对多个值的操作，比如取sets的子交并补等。  </p>"}],"PostAsset":[{"_id":"source/_posts/2020-02-09-algorithm/algorithm.png","slug":"algorithm.png","post":"ck6ztaqtz00005xc99l27h4v3","modified":0,"renderable":0},{"_id":"source/_posts/2020-02-16-thread/status.jpg","slug":"status.jpg","post":"ck6ztaqua00065xc9627o43h0","modified":0,"renderable":0},{"_id":"source/_posts/2020-02-22-ClassLoader/ClassLoader.png","slug":"ClassLoader.png","post":"ck6ztaqub00075xc942v45u7d","modified":0,"renderable":0},{"_id":"source/_posts/2020-02-22-GC/gc.png","slug":"gc.png","post":"ck6ztaqud000b5xc9424641r7","modified":0,"renderable":0},{"_id":"source/_posts/2020-02-22-classfile/jvm.jpeg","slug":"jvm.jpeg","post":"ck6ztaqui000g5xc98d54hegh","modified":0,"renderable":0},{"_id":"source/_posts/2020-03-01-loadbalance/loadbalance.png","slug":"loadbalance.png","post":"ck7b4075s0000udc9dxag3585","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck6ztaqua00065xc9627o43h0","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqug000d5xc98y0xf3qn"},{"post_id":"ck6ztaqtz00005xc99l27h4v3","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqui000h5xc98fexevf4"},{"post_id":"ck6ztaqub00075xc942v45u7d","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaquk000k5xc9cix92f2h"},{"post_id":"ck6ztaqud000b5xc9424641r7","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqul000m5xc979ssbhti"},{"post_id":"ck6ztaqu500025xc9398rduoe","category_id":"ck6ztaquc00085xc90i9wb7nd","_id":"ck6ztaqul000n5xc979z06zco"},{"post_id":"ck6ztaquf000c5xc94st1dlff","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqum000p5xc97t14e5we"},{"post_id":"ck6ztaqui000g5xc98d54hegh","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqum000r5xc94j9ggy3k"},{"post_id":"ck6ztaqu900055xc9hmtn3ykb","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqun000u5xc9fsow59ee"},{"post_id":"ck6ztaquj000j5xc93mjsb2kv","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck6ztaqun000w5xc929rccjb9"},{"post_id":"ck78tfjrj0000shc957fibxls","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck78tfjru0002shc96usaak1m"},{"post_id":"ck78xuu3x0000tdc91q771phn","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck79xjamz0001bsc9hefhgxxo"},{"post_id":"ck7b4075s0000udc9dxag3585","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck7b4075x0002udc9cy8k32ip"},{"post_id":"ck7b407670003udc9369e0cvl","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck7b407690006udc99ld8cb77"},{"post_id":"ck7huekuy0000twc95e5u1rr1","category_id":"ck6ztaqu700035xc964qohzdr","_id":"ck7hvhoqy0001kcc922mvdpkg"}],"PostTag":[{"post_id":"ck6ztaqtz00005xc99l27h4v3","tag_id":"ck6ztaqu800045xc93hhudvfe","_id":"ck6ztaqud000a5xc9ak1wd2hv"},{"post_id":"ck6ztaqu500025xc9398rduoe","tag_id":"ck6ztaquc00095xc9g43nccv0","_id":"ck6ztaquj000i5xc99by4a1pp"},{"post_id":"ck6ztaqu900055xc9hmtn3ykb","tag_id":"ck6ztaqug000f5xc91t28d9m7","_id":"ck6ztaqum000q5xc92bv7hw2n"},{"post_id":"ck6ztaqu900055xc9hmtn3ykb","tag_id":"ck6ztaquk000l5xc9d8m50od9","_id":"ck6ztaqum000s5xc99kan6ckc"},{"post_id":"ck6ztaqua00065xc9627o43h0","tag_id":"ck6ztaqug000f5xc91t28d9m7","_id":"ck6ztaqun000v5xc9aik3et12"},{"post_id":"ck6ztaqub00075xc942v45u7d","tag_id":"ck6ztaqum000t5xc9gzlp7w2k","_id":"ck6ztaquo000y5xc95fxv5v0j"},{"post_id":"ck6ztaqud000b5xc9424641r7","tag_id":"ck6ztaqum000t5xc9gzlp7w2k","_id":"ck6ztaquo00105xc9a35t1ye6"},{"post_id":"ck6ztaquf000c5xc94st1dlff","tag_id":"ck6ztaqug000f5xc91t28d9m7","_id":"ck6ztaqup00125xc9c5dze5yf"},{"post_id":"ck6ztaqui000g5xc98d54hegh","tag_id":"ck6ztaqum000t5xc9gzlp7w2k","_id":"ck6ztaquq00145xc9fnh197ei"},{"post_id":"ck6ztaquj000j5xc93mjsb2kv","tag_id":"ck6ztaqum000t5xc9gzlp7w2k","_id":"ck6ztaquq00155xc90r5r6mc9"},{"post_id":"ck78tfjrj0000shc957fibxls","tag_id":"ck78tfjrq0001shc96xbkeef7","_id":"ck78tfjru0003shc9ed5o82qv"},{"post_id":"ck78xuu3x0000tdc91q771phn","tag_id":"ck78tfjrq0001shc96xbkeef7","_id":"ck79xjamz0002bsc985pf3zq5"},{"post_id":"ck78xuu3x0000tdc91q771phn","tag_id":"ck79xjamv0000bsc9d3ase7sp","_id":"ck79xjamz0003bsc9e5wg7snq"},{"post_id":"ck7b4075s0000udc9dxag3585","tag_id":"ck78tfjrq0001shc96xbkeef7","_id":"ck7b4075x0001udc921ah89do"},{"post_id":"ck7b407670003udc9369e0cvl","tag_id":"ck78tfjrq0001shc96xbkeef7","_id":"ck7b407690004udc947q5a0tr"},{"post_id":"ck7b407670003udc9369e0cvl","tag_id":"ck79xjamv0000bsc9d3ase7sp","_id":"ck7b407690005udc97081b6bl"},{"post_id":"ck7b407670003udc9369e0cvl","tag_id":"ck7an5ek30001vjc9epgcfhf7","_id":"ck7b407690007udc91qec4clp"},{"post_id":"ck7huekuy0000twc95e5u1rr1","tag_id":"ck7hvhoqu0000kcc98uawhoaq","_id":"ck7hvhoqy0002kcc93usgegx8"}],"Tag":[{"name":"算法","_id":"ck6ztaqu800045xc93hhudvfe"},{"name":"Angular","_id":"ck6ztaquc00095xc9g43nccv0"},{"name":"Thread","_id":"ck6ztaqug000f5xc91t28d9m7"},{"name":"容器","_id":"ck6ztaquk000l5xc9d8m50od9"},{"name":"JVM","_id":"ck6ztaqum000t5xc9gzlp7w2k"},{"name":"高并发","_id":"ck78tfjrq0001shc96xbkeef7"},{"name":"LVS","_id":"ck79xjamv0000bsc9d3ase7sp"},{"name":"Keepalived","_id":"ck7an5ek30001vjc9epgcfhf7"},{"name":"Redis","_id":"ck7hvhoqu0000kcc98uawhoaq"}]}}